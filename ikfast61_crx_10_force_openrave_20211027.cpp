/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-10-25 11:01:39.041996
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[5]);
x12=((0.415)*x0);
x13=((0.707102043562323)*x10);
x14=((0.70711151877903)*x9);
x15=((1.0)*x5);
x16=((0.415)*x4);
x17=((0.15)*x2);
x18=((0.707102043562323)*x9);
x19=((0.707102043562323)*x7);
x20=((0.54)*x6);
x21=((1.0)*x6);
x22=((0.54)*x4);
x23=((0.415)*x6);
x24=((0.105)*x7);
x25=((-0.1)*x9);
x26=(x0*x7);
x27=(x1*x2);
x28=(x5*x6);
x29=((-0.105)*x9);
x30=(x0*x5);
x31=(x0*x3);
x32=((-0.1)*x7);
x33=(x3*x4);
x34=((-0.70711151877903)*x9);
x35=(x7*x8);
x36=(x2*x3);
x37=((-0.707102043562323)*x9);
x38=(x1*x4);
x39=(x3*x6);
x40=(x11*x7);
x41=((-0.70711151877903)*x7);
x42=(x10*x5);
x43=((1.0)*x26);
x44=((((-1.0)*x36))+x38);
x45=((((-1.0)*x33))+(((-1.0)*x27)));
x46=((((0.707102043562323)*x33))+(((0.707102043562323)*x27)));
x47=((((0.70711151877903)*x27))+(((0.70711151877903)*x33)));
x48=(x10*x44);
x49=(((x31*x4))+((x0*x27)));
x50=(x6*((x33+x27)));
x51=(x45*x5);
x52=((((-1.0)*x2*x31))+(((1.0)*x0*x38)));
x53=(x21*(((((-1.0)*x36))+x38)));
x54=(x10*x49);
x55=(x10*x50);
x56=(x5*x53);
x57=(x52*x7);
x58=(x53*x7);
x59=(x5*x52);
x60=(x59+((x6*x7)));
x61=((((-1.0)*x43))+x56);
x62=((((-1.0)*x26))+x56);
x63=((((0.70711151877903)*x28))+((x41*x52)));
x64=((((0.707102043562323)*x30))+((x19*x53)));
x65=(x60*x9);
x66=(x61*x9);
x67=((((-0.70711151877903)*x30))+((x41*x53)));
x68=((((-1.0)*x18*x51))+(((-1.0)*x13*x44)));
x69=(((x14*x60))+(((0.70711151877903)*x54)));
eerot[0]=((((-1.0)*x11*x69))+((x11*(((((-0.707102043562323)*x28))+((x19*x52))))))+((x8*((((x37*x60))+(((-0.707102043562323)*x54))))))+((x63*x8)));
eerot[1]=(((x69*x8))+((x11*(((((-1.0)*x18*x60))+(((-1.0)*x13*x49))))))+((x11*x63))+((x8*(((((-0.707102043562323)*x57))+(((0.707102043562323)*x28)))))));
eerot[2]=(((x10*(((((-1.0)*x21*x7))+(((-1.0)*x15*x52))))))+((x49*x9)));
eetrans[0]=((((0.54)*x0*x27))+((x7*((((x17*x31))+(((-0.15)*x0*x38))))))+((x8*((((x29*x60))+(((-0.105)*x54))))))+((x11*(((((-0.105)*x28))+((x24*x52))))))+((x22*x31))+((x10*(((((-0.415)*x59))+(((-1.0)*x23*x7))))))+((x9*((((x12*x33))+((x12*x27))))))+((x8*((((x32*x52))+(((0.1)*x28))))))+((x11*((((x25*x60))+(((-0.1)*x54))))))+(((0.71)*x31))+(((0.15)*x28)));
eerot[3]=(((x8*(((((-1.0)*x18*x61))+(((-1.0)*x13*x50))))))+((x67*x8))+((x11*x64))+((x11*(((((-0.70711151877903)*x55))+((x34*x61)))))));
eerot[4]=(((x8*((((x14*x62))+(((0.70711151877903)*x55))))))+(((-1.0)*x64*x8))+((x11*x67))+((x11*((((x37*x62))+(((-0.707102043562323)*x55)))))));
eerot[5]=(((x50*x9))+((x10*((x43+(((-1.0)*x15*x53)))))));
eetrans[1]=(((x11*(((((-0.1)*x55))+(((-0.1)*x66))))))+(((-0.15)*x30))+((x20*x33))+((x9*((((x16*x39))+((x23*x27))))))+((x8*(((((-0.1)*x30))+((x32*x53))))))+((x11*(((((0.105)*x30))+((x24*x53))))))+((x10*(((((-0.415)*x56))+((x12*x7))))))+(((0.71)*x39))+((x7*((((x17*x39))+(((-0.15)*x38*x6))))))+((x20*x27))+((x8*((((x29*x61))+(((-0.105)*x55)))))));
eerot[6]=(((x68*x8))+((x35*x47))+(((-1.0)*x40*x46))+((x11*(((((-0.70711151877903)*x48))+((x34*x51)))))));
eerot[7]=(((x8*((((x14*x51))+(((0.70711151877903)*x48))))))+((x35*x46))+((x40*x47))+((x11*x68)));
eerot[8]=(((x44*x9))+((x42*((x33+x27)))));
eetrans[2]=((0.245)+(((-0.54)*x36))+((x9*(((((-0.415)*x36))+((x1*x16))))))+((x1*x22))+((x35*(((((0.1)*x33))+(((0.1)*x27))))))+((x7*((((x1*x17))+(((0.15)*x33))))))+((x8*(((((-0.105)*x51*x9))+(((-0.105)*x48))))))+((x11*(((((-0.1)*x48))+((x25*x51))))))+((x40*(((((-0.105)*x27))+(((-0.105)*x33))))))+(((0.71)*x1))+((x42*((((x16*x3))+(((0.415)*x27)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.707102043562323)*r01))+(((-0.70711151877903)*r00)));
new_r01=((((-0.707102043562323)*r00))+(((0.70711151877903)*r01)));
new_r02=((-1.0)*r02);
new_px=((((0.00353650511556582)*r01))+(((-0.415)*r02))+px+(((-0.144956866451947)*r00)));
new_r10=((((-0.707102043562323)*r11))+(((-0.70711151877903)*r10)));
new_r11=((((-0.707102043562323)*r10))+(((0.70711151877903)*r11)));
new_r12=((-1.0)*r12);
new_py=((((-0.144956866451947)*r10))+(((0.00353650511556582)*r11))+(((-0.415)*r12))+py);
new_r20=((((-0.707102043562323)*r21))+(((-0.70711151877903)*r20)));
new_r21=((((-0.707102043562323)*r20))+(((0.70711151877903)*r21)));
new_r22=((-1.0)*r22);
new_pz=((-0.245)+(((-0.415)*r22))+(((0.00353650511556582)*r21))+(((-0.144956866451947)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x70=((1.0)*px);
IkReal x71=((1.0)*pz);
IkReal x72=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x72))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x71)));
rxp0_2=((((-1.0)*r10*x70))+((py*r00)));
rxp1_0=((((-1.0)*r21*x72))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x71)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x70)));
rxp2_0=((((-1.0)*r22*x72))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x71)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x70)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x73=((27.0)*npz);
IkReal x74=((25.0)*pp);
IkReal x75=((7.5)*npx);
IkReal x76=((2.0)*rxp1_2);
IkReal x77=((0.3)*r22);
IkReal x78=((0.15)*r21);
IkReal x79=((1.0)*rxp2_2);
IkReal x80=((((-1.0)*x76))+x77);
IkReal x81=((((-1.0)*x79))+x78);
IkReal x82=((-4.75)+x74);
IkReal x83=(x77+x76);
IkReal x84=((((-1.0)*x78))+(((-1.0)*x79)));
IkReal x85=(x73+x82);
IkReal x86=((((-1.0)*x75))+x85);
IkReal x87=((((-1.0)*x73))+x75+x82);
IkReal x88=((((-1.0)*x73))+(((-1.0)*x75))+x82);
IkReal x89=(x75+x85);
IkReal gconst0=x89;
IkReal gconst1=x86;
IkReal gconst2=x89;
IkReal gconst3=x86;
IkReal gconst4=x80;
IkReal gconst5=x83;
IkReal gconst6=x80;
IkReal gconst7=x83;
IkReal gconst8=x84;
IkReal gconst9=x81;
IkReal gconst10=x87;
IkReal gconst11=x88;
IkReal gconst12=x84;
IkReal gconst13=x81;
IkReal gconst14=x87;
IkReal gconst15=x88;
IkReal x90=r20*r20;
IkReal x91=npy*npy;
IkReal x92=rxp2_2*rxp2_2;
IkReal x93=r21*r21;
IkReal x94=(gconst1*npy);
IkReal x95=((4.5)*r20);
IkReal x96=(gconst9*npx);
IkReal x97=(gconst12*npy);
IkReal x98=((32.4)*r20);
IkReal x99=((0.3)*rxp2_2);
IkReal x100=(gconst10*gconst9);
IkReal x101=(gconst14*gconst7);
IkReal x102=(gconst1*gconst2);
IkReal x103=(npx*npy);
IkReal x104=(gconst11*gconst14);
IkReal x105=(gconst11*gconst12);
IkReal x106=(gconst7*rxp2_2);
IkReal x107=((0.15)*gconst6);
IkReal x108=((54.0)*gconst9);
IkReal x109=(gconst1*rxp2_2);
IkReal x110=((1.0)*gconst15);
IkReal x111=(npy*rxp2_2);
IkReal x112=(gconst0*r21);
IkReal x113=(gconst11*npy);
IkReal x114=(gconst14*npy);
IkReal x115=((0.15)*r21);
IkReal x116=((60.0)*rxp0_2);
IkReal x117=(gconst5*rxp2_2);
IkReal x118=(gconst0*gconst3);
IkReal x119=((54.0)*gconst8);
IkReal x120=((1.0)*gconst3);
IkReal x121=(gconst11*gconst8);
IkReal x122=((0.15)*gconst2);
IkReal x123=((16.2)*r21);
IkReal x124=(gconst6*rxp2_2);
IkReal x125=(gconst12*gconst15);
IkReal x126=(gconst10*gconst5);
IkReal x127=(gconst2*npy);
IkReal x128=((1.0)*gconst0*gconst2);
IkReal x129=(gconst1*gconst3*r21);
IkReal x130=((0.09)*x90);
IkReal x131=((9.0)*r21*rxp0_2);
IkReal x132=((4.86)*x90);
IkReal x133=(gconst13*x119);
IkReal x134=((2.4)*r20*rxp0_2);
IkReal x135=((0.0225)*x93);
IkReal x136=((225.0)*x91);
IkReal x137=(r21*x91);
IkReal x138=((1.0)*gconst13*gconst14);
IkReal x139=((0.675)*r20*r21);
IkReal x140=((243.0)*r20*x91);
IkReal x141=((4.86)*npx*r20*r21);
IkReal x142=((108.0)*npy*x92);
op[0]=((((-1.0)*gconst12*gconst9*x136))+(((-1.0)*x104*x130))+((gconst13*gconst8*x104))+((gconst11*x95*x97))+(((-1.0)*gconst8*x105*x110))+((gconst9*x114*x95))+((x100*x125))+(((-1.0)*x100*x138)));
op[1]=(((gconst11*x116*x97))+((x101*x121))+(((-1.0)*x104*x134))+(((-1.0)*x113*x133))+(((-1.0)*gconst12*gconst5*x136))+(((54.0)*x100*x97))+((gconst13*gconst4*x104))+((gconst13*x108*x114))+(((-1.0)*gconst11*x119*x97))+(((-1.0)*gconst9*x140))+((gconst9*x114*x116))+(((-1.0)*gconst4*x105*x110))+(((-1.0)*gconst15*x108*x97))+(((-1.0)*x126*x138))+(((-1.0)*gconst6*x110*x121))+((x114*x133))+((gconst5*x114*x95))+(((-3240.0)*x96*x97))+(((-1.0)*gconst15*x119*x97))+((x125*x126))+((x113*x132))+((gconst12*x140))+(((-1.0)*x114*x132))+((gconst6*x113*x95))+(((-1.0)*x100*x101))+((gconst14*x96*x98))+((npx*x105*x98))+(((54.0)*gconst13*npy*x100))+((gconst15*gconst6*x100))+(((-1.0)*gconst6*gconst9*x136)));
op[2]=((((-2916.0)*gconst13*gconst8*(npy*npy)))+(((-11664.0)*gconst12*gconst9*(npx*npx)))+((gconst10*gconst15*gconst9*rxp2_2))+(((-16.0)*gconst11*gconst14*(rxp0_2*rxp0_2)))+((gconst11*gconst14*gconst4*gconst7))+(((-0.15)*gconst11*gconst12*gconst15*r21))+(((-33.75)*gconst9*r21*(npy*npy)))+(((60.0)*gconst11*gconst6*npy*rxp0_2))+((gconst11*gconst13*gconst14*rxp2_2))+(((243.0)*gconst6*r20*(npy*npy)))+(((-1.0)*gconst1*gconst12*gconst15*gconst8))+(((-3366.0)*gconst12*gconst9*(npy*npy)))+(((432.0)*gconst11*gconst12*npx*rxp0_2))+(((33.75)*gconst12*r21*(npy*npy)))+(((-54.0)*gconst12*gconst15*gconst4*npy))+(((4.5)*gconst11*npy*r20*rxp2_2))+(((-225.0)*gconst12*rxp2_2*(npy*npy)))+(((4.5)*gconst14*npy*r20*rxp2_2))+(((0.15)*gconst10*gconst15*gconst9*r21))+(((-3240.0)*gconst12*gconst5*npx*npy))+(((-54.0)*gconst11*gconst13*gconst4*npy))+(((-2916.0)*gconst13*gconst9*(npy*npy)))+(((-129.6)*gconst14*npy*r20*rxp0_2))+((gconst11*gconst14*gconst8*rxp2_2))+(((32.4)*gconst14*gconst5*npx*r20))+(((129.6)*gconst11*npy*r20*rxp0_2))+(((-225.0)*gconst9*rxp2_2*(npy*npy)))+(((60.0)*gconst14*gconst5*npy*rxp0_2))+((gconst0*gconst12*gconst15*gconst9))+(((0.15)*gconst10*gconst14*gconst9*r21))+(((4.5)*gconst1*gconst12*npy*r20))+((gconst11*gconst13*gconst2*gconst8))+(((0.18)*gconst11*gconst14*(r20*r20)))+(((0.675)*gconst11*npy*r20*r21))+((gconst1*gconst13*gconst14*gconst8))+(((-1749.6)*gconst9*npx*npy*r20))+(((3240.0)*gconst12*rxp0_2*(npy*npy)))+(((-0.675)*gconst14*npy*r20*r21))+(((-0.15)*gconst10*gconst12*gconst15*r21))+(((-243.0)*gconst5*r20*(npy*npy)))+(((-0.15)*gconst11*gconst15*gconst8*r21))+(((-0.15)*gconst11*gconst14*gconst8*r21))+(((54.0)*gconst10*gconst6*gconst9*npy))+(((54.0)*gconst14*gconst7*gconst8*npy))+(((-54.0)*gconst12*gconst15*gconst5*npy))+(((54.0)*gconst14*gconst7*gconst9*npy))+(((432.0)*gconst14*gconst9*npx*rxp0_2))+(((-225.0)*gconst5*gconst6*(npy*npy)))+((gconst10*gconst12*gconst3*gconst9))+(((0.15)*gconst11*gconst13*gconst14*r21))+(((-0.09)*gconst1*gconst14*(r20*r20)))+((gconst10*gconst15*gconst5*gconst6))+(((-3240.0)*gconst6*gconst9*npx*npy))+(((-1.0)*gconst10*gconst14*gconst9*rxp2_2))+(((-54.0)*gconst11*gconst6*gconst8*npy))+(((-1.0)*gconst11*gconst12*gconst15*rxp2_2))+((gconst10*gconst12*gconst15*rxp2_2))+(((262.44)*(npy*npy)*(r20*r20)))+(((4.5)*gconst2*gconst9*npy*r20))+(((-3240.0)*gconst9*rxp0_2*(npy*npy)))+(((32.4)*gconst11*gconst6*npx*r20))+(((-1.0)*gconst10*gconst13*gconst14*rxp2_2))+(((-54.0)*gconst11*gconst7*gconst8*npy))+(((-54.0)*gconst15*gconst6*gconst9*npy))+(((-54.0)*gconst11*gconst12*gconst4*npy))+(((54.0)*gconst10*gconst12*gconst5*npy))+(((-1.0)*gconst10*gconst13*gconst2*gconst9))+(((-0.09)*gconst11*gconst2*(r20*r20)))+(((-54.0)*gconst15*gconst6*gconst8*npy))+(((-1.0)*gconst10*gconst14*gconst5*gconst7))+(((-1.0)*gconst11*gconst12*gconst3*gconst8))+(((0.15)*gconst10*gconst13*gconst14*r21))+(((-1.0)*gconst11*gconst15*gconst8*rxp2_2))+(((54.0)*gconst13*gconst14*gconst5*npy))+(((54.0)*gconst13*gconst14*gconst4*npy))+(((-2916.0)*gconst12*gconst8*(npy*npy)))+(((-1.0)*gconst0*gconst13*gconst14*gconst9))+(((54.0)*gconst10*gconst7*gconst9*npy))+(((54.0)*gconst10*gconst13*gconst5*npy))+(((-1.0)*gconst11*gconst15*gconst4*gconst6))+(((1749.6)*gconst12*npx*npy*r20)));
op[3]=((((-8.1)*gconst11*gconst12*npy*r21))+(((60.0)*gconst14*npy*rxp0_2*rxp2_2))+(((-8.1)*gconst14*gconst8*npy*r21))+(((-1.0)*gconst0*gconst14*gconst7*gconst9))+(((0.15)*gconst10*gconst14*gconst7*r21))+(((-1.0)*gconst10*gconst14*gconst5*rxp2_2))+(((-0.15)*gconst10*gconst15*gconst6*r21))+(((-1.0)*gconst11*gconst15*gconst6*rxp2_2))+(((54.0)*gconst0*gconst12*gconst9*npy))+(((-1.0)*gconst1*gconst12*gconst15*gconst4))+(((-1749.6)*gconst5*npx*npy*r20))+((gconst11*gconst14*gconst7*rxp2_2))+((gconst10*gconst3*gconst6*gconst9))+(((-0.15)*gconst11*gconst14*gconst4*r21))+(((108.0)*gconst10*gconst9*npy*rxp2_2))+(((-486.0)*gconst9*npx*npy*r21))+(((432.0)*gconst14*gconst5*npx*rxp0_2))+(((-2916.0)*gconst6*gconst8*(npy*npy)))+(((72.9)*r20*r21*(npy*npy)))+(((-1.0)*gconst11*gconst3*gconst6*gconst8))+(((32.4)*gconst14*npx*r20*rxp2_2))+(((864.0)*gconst11*npy*(rxp0_2*rxp0_2)))+(((-2.4)*gconst11*gconst2*r20*rxp0_2))+(((-225.0)*gconst5*rxp2_2*(npy*npy)))+(((-3240.0)*gconst12*npx*npy*rxp2_2))+(((60.0)*gconst2*gconst9*npy*rxp0_2))+(((54.0)*gconst10*gconst5*gconst6*npy))+(((9.72)*gconst14*npy*(r20*r20)))+(((23328.0)*gconst12*npx*npy*rxp0_2))+(((-54.0)*gconst11*gconst4*gconst6*npy))+(((-4.86)*gconst2*npy*(r20*r20)))+(((-3240.0)*gconst5*gconst6*npx*npy))+((gconst10*gconst15*gconst5*rxp2_2))+(((2.4)*gconst11*gconst14*r20*rxp0_2))+(((32.4)*gconst11*npx*r20*rxp2_2))+((gconst0*gconst12*gconst15*gconst5))+(((0.15)*gconst11*gconst14*gconst7*r21))+(((-8.1)*gconst15*gconst9*npy*r21))+((gconst11*gconst13*gconst2*gconst4))+(((-1.0)*gconst10*gconst2*gconst7*gconst9))+(((-54.0)*gconst15*gconst8*npy*rxp2_2))+(((54.0)*gconst14*gconst8*npy*rxp2_2))+(((54.0)*gconst10*gconst12*npy*rxp2_2))+(((-1.0)*gconst10*gconst14*gconst7*rxp2_2))+(((0.15)*gconst10*gconst14*gconst5*r21))+((gconst1*gconst13*gconst14*gconst4))+(((-108.0)*gconst12*gconst15*npy*rxp2_2))+(((-2916.0)*gconst13*gconst4*(npy*npy)))+(((-2916.0)*gconst7*gconst8*(npy*npy)))+(((6998.4)*r20*rxp0_2*(npy*npy)))+(((4.86)*gconst1*npy*(r20*r20)))+(((-54.0)*gconst11*gconst13*npy*rxp2_2))+((gconst0*gconst15*gconst6*gconst9))+(((54.0)*gconst14*gconst5*gconst7*npy))+(((54.0)*gconst0*gconst13*gconst9*npy))+(((-0.15)*gconst11*gconst15*gconst6*r21))+(((-225.0)*gconst6*rxp2_2*(npy*npy)))+(((-32.4)*gconst14*gconst9*npx*r20))+(((-1.0)*gconst1*gconst15*gconst6*gconst8))+(((432.0)*gconst11*gconst6*npx*rxp0_2))+(((-32.4)*gconst11*gconst12*npx*r20))+(((-4.86)*gconst14*npx*r20*r21))+(((108.0)*gconst13*gconst14*npy*rxp2_2))+(((-3240.0)*gconst9*npx*npy*rxp2_2))+(((60.0)*gconst11*npy*rxp0_2*rxp2_2))+(((-8.1)*gconst10*gconst13*npy*r21))+(((-54.0)*gconst15*gconst4*gconst6*npy))+(((60.0)*gconst11*gconst12*npy*rxp0_2))+(((4.5)*gconst1*gconst6*npy*r20))+(((-108.0)*gconst11*gconst8*npy*rxp2_2))+(((-23328.0)*gconst9*npx*npy*rxp0_2))+(((54.0)*gconst13*gconst2*gconst9*npy))+(((4.5)*gconst2*gconst5*npy*r20))+((gconst11*gconst14*gconst4*rxp2_2))+(((-2.4)*gconst1*gconst14*r20*rxp0_2))+(((-8.1)*gconst15*gconst8*npy*r21))+(((-9.0)*gconst14*npy*r21*rxp0_2))+(((-33.75)*gconst5*r21*(npy*npy)))+(((54.0)*gconst13*gconst2*gconst8*npy))+((gconst10*gconst12*gconst3*gconst5))+(((-54.0)*gconst11*gconst12*npy*rxp2_2))+((gconst10*gconst15*gconst6*rxp2_2))+(((-2916.0)*gconst7*gconst9*(npy*npy)))+(((-54.0)*gconst11*gconst4*gconst7*npy))+(((33.75)*gconst6*r21*(npy*npy)))+(((-2916.0)*gconst13*gconst5*(npy*npy)))+((gconst11*gconst2*gconst7*gconst8))+(((54.0)*gconst14*gconst4*gconst7*npy))+(((-8.1)*gconst14*gconst9*npy*r21))+(((54.0)*gconst10*gconst13*npy*rxp2_2))+(((-11664.0)*gconst12*gconst5*(npx*npx)))+(((-11664.0)*gconst6*gconst9*(npx*npx)))+(((-54.0)*gconst15*gconst5*gconst6*npy))+(((32.4)*gconst1*gconst12*npx*r20))+(((-864.0)*gconst14*npy*(rxp0_2*rxp0_2)))+(((54.0)*gconst14*gconst9*npy*rxp2_2))+(((32.4)*gconst2*gconst9*npx*r20))+(((-9.72)*gconst11*npy*(r20*r20)))+(((-54.0)*gconst1*gconst12*gconst8*npy))+(((-3366.0)*gconst12*gconst5*(npy*npy)))+(((-54.0)*gconst15*gconst9*npy*rxp2_2))+(((-8.1)*gconst10*gconst12*npy*r21))+(((3240.0)*gconst6*rxp0_2*(npy*npy)))+(((60.0)*gconst14*gconst9*npy*rxp0_2))+(((4.86)*gconst11*npx*r20*r21))+(((-54.0)*gconst12*gconst3*gconst9*npy))+(((9.0)*gconst11*npy*r21*rxp0_2))+(((-1.0)*gconst11*gconst15*gconst4*rxp2_2))+(((-54.0)*gconst1*gconst13*gconst8*npy))+(((-1.0)*gconst10*gconst13*gconst2*gconst5))+(((-2916.0)*gconst12*gconst4*(npy*npy)))+(((60.0)*gconst1*gconst12*npy*rxp0_2))+(((-3240.0)*gconst12*gconst9*npx*npy))+(((-0.15)*gconst11*gconst15*gconst4*r21))+(((-3240.0)*gconst5*rxp0_2*(npy*npy)))+(((-54.0)*gconst12*gconst3*gconst8*npy))+(((-1.0)*gconst11*gconst12*gconst3*gconst4))+(((-3366.0)*gconst6*gconst9*(npy*npy)))+(((0.15)*gconst10*gconst15*gconst5*r21))+(((-8.1)*gconst11*gconst13*npy*r21))+(((486.0)*gconst12*npx*npy*r21))+(((-1.0)*gconst0*gconst13*gconst14*gconst5))+((gconst1*gconst14*gconst7*gconst8))+(((54.0)*gconst10*gconst5*gconst7*npy))+(((1749.6)*gconst6*npx*npy*r20)));
op[4]=((((-6282.0)*gconst9*rxp2_2*(npy*npy)))+(((60.0)*gconst2*gconst5*npy*rxp0_2))+(((-108.0)*gconst15*gconst6*npy*rxp2_2))+(((-129.6)*gconst11*npy*r20*rxp0_2))+(((-2916.0)*gconst4*gconst6*(npy*npy)))+((gconst0*gconst15*gconst9*rxp2_2))+(((-8.1)*gconst14*gconst5*npy*r21))+((gconst1*gconst14*gconst8*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst9*rxp2_2))+(((-67.5)*gconst9*r21*(npy*npy)))+(((60.0)*gconst11*gconst6*npy*rxp0_2))+(((-1.0)*gconst10*gconst2*gconst9*rxp2_2))+(((54.0)*gconst10*gconst7*npy*rxp2_2))+(((-5832.0)*gconst13*rxp2_2*(npy*npy)))+(((-0.15)*gconst1*gconst14*gconst8*r21))+(((-8.1)*gconst11*gconst7*npy*r21))+(((-1.0)*gconst10*gconst2*gconst5*gconst7))+(((67.5)*gconst12*r21*(npy*npy)))+(((-0.0225)*gconst11*gconst14*(r21*r21)))+(((64.8)*gconst11*npx*r21*rxp0_2))+(((-1.0)*gconst1*gconst12*gconst3*gconst8))+(((32.4)*gconst2*gconst5*npx*r20))+(((0.15)*gconst10*gconst2*gconst9*r21))+(((-225.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-3240.0)*gconst12*gconst5*npx*npy))+(((0.15)*gconst0*gconst15*gconst9*r21))+(((-3240.0)*gconst6*npx*npy*rxp2_2))+(((0.675)*gconst1*npy*r20*r21))+(((32.4)*gconst1*gconst6*npx*r20))+((gconst11*gconst14*(rxp2_2*rxp2_2)))+(((-0.15)*gconst11*gconst2*gconst8*r21))+((gconst1*gconst14*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst3*rxp2_2))+(((0.15)*gconst10*gconst3*gconst9*r21))+(((-0.15)*gconst1*gconst15*gconst8*r21))+(((0.15)*gconst1*gconst13*gconst14*r21))+(((-2916.0)*gconst4*gconst7*(npy*npy)))+(((-1.0)*gconst10*gconst13*gconst2*rxp2_2))+(((-0.0225)*gconst10*gconst15*(r21*r21)))+((gconst1*gconst13*gconst2*gconst8))+(((-0.09)*gconst11*gconst14*(r20*r20)))+(((54.0)*gconst14*gconst5*npy*rxp2_2))+(((-54.0)*gconst15*gconst4*npy*rxp2_2))+(((60.0)*gconst14*gconst5*npy*rxp0_2))+((gconst11*gconst2*gconst4*gconst7))+(((54.0)*gconst2*gconst7*gconst9*npy))+(((432.0)*gconst1*gconst12*npx*rxp0_2))+(((4.5)*gconst1*npy*r20*rxp2_2))+(((-2916.0)*gconst5*gconst7*(npy*npy)))+(((-54.0)*gconst12*gconst3*gconst4*npy))+((gconst10*gconst15*(rxp2_2*rxp2_2)))+(((-8.1)*gconst10*gconst6*npy*r21))+((gconst10*gconst12*gconst3*rxp2_2))+(((-4.5)*gconst11*gconst12*npy*r20))+(((54.0)*gconst0*gconst6*gconst9*npy))+(((-16.0)*gconst1*gconst14*(rxp0_2*rxp0_2)))+(((3240.0)*gconst12*rxp0_2*(npy*npy)))+(((0.18)*gconst11*gconst2*(r20*r20)))+(((-54.0)*gconst1*gconst7*gconst8*npy))+(((-1.0)*gconst1*gconst15*gconst4*gconst6))+(((23328.0)*gconst6*npx*npy*rxp0_2))+(((-54.0)*gconst1*gconst6*gconst8*npy))+(((-0.3)*gconst11*gconst15*r21*rxp2_2))+(((54.0)*gconst13*gconst2*gconst4*npy))+(((46656.0)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-54.0)*gconst12*gconst3*gconst5*npy))+(((-54.0)*gconst3*gconst6*gconst9*npy))+(((-8.1)*gconst15*gconst4*npy*r21))+(((432.0)*gconst14*npx*rxp0_2*rxp2_2))+((gconst10*gconst3*gconst5*gconst6))+(((-0.09)*gconst1*gconst2*(r20*r20)))+(((54.0)*gconst14*gconst4*npy*rxp2_2))+(((-5832.0)*gconst8*rxp2_2*(npy*npy)))+(((-524.88)*(npy*npy)*(r20*r20)))+(((54.0)*gconst13*gconst2*gconst5*npy))+(((432.0)*gconst2*gconst9*npx*rxp0_2))+(((-11664.0)*gconst9*rxp2_2*(npx*npx)))+((gconst0*gconst12*gconst15*rxp2_2))+(((-8.1)*gconst15*gconst5*npy*r21))+(((-129.6)*gconst2*npy*r20*rxp0_2))+(((-32.4)*gconst11*gconst6*npx*r20))+(((-225.0)*gconst12*gconst9*(npy*npy)))+(((524.88)*npx*npy*r20*r21))+(((129.6)*gconst14*npy*r20*rxp0_2))+(((-1.0)*gconst11*gconst3*gconst8*rxp2_2))+(((-0.0225)*gconst11*gconst15*(r21*r21)))+(((-0.15)*gconst0*gconst12*gconst15*r21))+(((0.15)*gconst11*gconst13*gconst2*r21))+(((0.15)*gconst0*gconst13*gconst14*r21))+(((-3240.0)*gconst5*npx*npy*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst15*rxp2_2))+(((54.0)*gconst0*gconst13*gconst5*npy))+(((-54.0)*gconst15*gconst5*npy*rxp2_2))+(((-3240.0)*gconst6*gconst9*npx*npy))+(((-1.0)*gconst11*gconst15*(rxp2_2*rxp2_2)))+(((-486.0)*gconst5*npx*npy*r21))+(((5.0625)*(npy*npy)*(r21*r21)))+(((-3366.0)*gconst5*gconst6*(npy*npy)))+(((54.0)*gconst10*gconst6*npy*rxp2_2))+(((-0.15)*gconst11*gconst12*gconst3*r21))+(((-1749.6)*gconst12*npx*npy*r20))+(((60.0)*gconst1*gconst6*npy*rxp0_2))+((gconst11*gconst2*gconst8*rxp2_2))+(((-1.0)*gconst11*gconst3*gconst4*gconst6))+(((4.5)*gconst2*npy*r20*rxp2_2))+(((0.18)*gconst1*gconst14*(r20*r20)))+(((-54.0)*gconst3*gconst6*gconst8*npy))+(((-6282.0)*gconst12*rxp2_2*(npy*npy)))+(((486.0)*gconst6*npx*npy*r21))+(((-3240.0)*gconst9*rxp0_2*(npy*npy)))+(((54.0)*gconst2*gconst7*gconst8*npy))+(((-16.0)*gconst11*gconst2*(rxp0_2*rxp0_2)))+(((-11664.0)*gconst12*rxp2_2*(npx*npx)))+(((-0.15)*gconst1*gconst12*gconst15*r21))+(((-32.4)*gconst14*gconst5*npx*r20))+(((0.15)*gconst10*gconst13*gconst2*r21))+(((-0.0225)*gconst10*gconst14*(r21*r21)))+((gconst1*gconst13*gconst14*rxp2_2))+(((108.0)*gconst10*gconst5*npy*rxp2_2))+(((-64.8)*gconst14*npx*r21*rxp0_2))+(((-0.15)*gconst11*gconst3*gconst8*r21))+(((-0.675)*gconst2*npy*r20*r21))+(((0.3)*gconst10*gconst14*r21*rxp2_2))+(((54.0)*gconst0*gconst12*gconst5*npy))+((gconst0*gconst12*gconst3*gconst9))+(((-54.0)*gconst11*gconst7*npy*rxp2_2))+(((-23328.0)*gconst5*npx*npy*rxp0_2))+(((-1.0)*gconst0*gconst13*gconst2*gconst9))+(((-54.0)*gconst11*gconst6*npy*rxp2_2))+(((-1.0)*gconst0*gconst13*gconst14*rxp2_2))+(((-11664.0)*gconst5*gconst6*(npx*npx)))+(((54.0)*gconst0*gconst7*gconst9*npy))+(((-54.0)*gconst1*gconst13*gconst4*npy))+(((1749.6)*gconst12*r21*(npx*npx)))+(((129.6)*gconst1*npy*r20*rxp0_2))+(((1749.6)*gconst9*npx*npy*r20))+(((-0.15)*gconst10*gconst12*gconst3*r21))+(((-4.5)*gconst14*gconst9*npy*r20))+(((-1.0)*gconst1*gconst15*gconst8*rxp2_2))+(((-8.1)*gconst14*gconst4*npy*r21))+(((-1.0)*gconst0*gconst14*gconst5*gconst7))+(((-8.1)*gconst10*gconst7*npy*r21))+(((-108.0)*gconst11*gconst4*npy*rxp2_2))+((gconst11*gconst13*gconst2*rxp2_2))+((gconst0*gconst15*gconst5*gconst6))+(((-8.1)*gconst11*gconst6*npy*r21))+(((-1.0)*gconst10*gconst14*(rxp2_2*rxp2_2)))+(((108.0)*gconst14*gconst7*npy*rxp2_2))+(((-54.0)*gconst1*gconst12*gconst4*npy))+(((-1749.6)*gconst9*r21*(npx*npx)))+(((0.15)*gconst0*gconst14*gconst9*r21))+((gconst10*gconst3*gconst9*rxp2_2))+(((432.0)*gconst11*npx*rxp0_2*rxp2_2))+(((972.0)*r21*rxp0_2*(npy*npy))));
op[5]=((((-108.0)*gconst15*npy*(rxp2_2*rxp2_2)))+(((-8.1)*gconst1*gconst12*npy*r21))+((gconst11*gconst2*gconst7*rxp2_2))+(((54.0)*gconst0*gconst5*gconst6*npy))+(((1749.6)*gconst5*npx*npy*r20))+(((60.0)*gconst14*npy*rxp0_2*rxp2_2))+(((-54.0)*gconst1*gconst12*npy*rxp2_2))+(((-54.0)*gconst3*gconst8*npy*rxp2_2))+(((-0.15)*gconst11*gconst2*gconst4*r21))+(((-1.0)*gconst1*gconst3*gconst6*gconst8))+(((-8.1)*gconst0*gconst13*npy*r21))+(((-11664.0)*gconst5*rxp2_2*(npx*npx)))+(((-864.0)*gconst2*npy*(rxp0_2*rxp0_2)))+(((-4.86)*gconst2*npx*r20*r21))+(((-2.4)*gconst1*gconst2*r20*rxp0_2))+(((0.15)*gconst0*gconst14*gconst5*r21))+(((-32.4)*gconst14*npx*r20*rxp2_2))+(((-16.2)*gconst14*npy*r21*rxp2_2))+(((-16.2)*gconst10*npy*r21*rxp2_2))+(((4.86)*gconst1*npx*r20*r21))+(((-8.1)*gconst1*gconst13*npy*r21))+(((0.15)*gconst1*gconst14*gconst7*r21))+(((-1.0)*gconst1*gconst15*gconst4*rxp2_2))+(((243.0)*gconst9*r20*(npy*npy)))+(((-1.0)*gconst1*gconst12*gconst3*gconst4))+(((-225.0)*gconst12*gconst5*(npy*npy)))+(((0.15)*gconst0*gconst15*gconst5*r21))+(((-32.4)*gconst1*gconst12*npx*r20))+(((2.4)*gconst1*gconst14*r20*rxp0_2))+(((54.0)*gconst0*gconst5*gconst7*npy))+(((-486.0)*gconst9*npx*npy*r21))+(((4.86)*gconst11*npy*(r20*r20)))+(((-1.0)*gconst11*gconst3*gconst6*rxp2_2))+(((-16.2)*gconst15*npy*r21*rxp2_2))+(((-3240.0)*gconst12*npx*npy*rxp2_2))+(((-4.5)*gconst14*gconst5*npy*r20))+(((60.0)*gconst2*gconst9*npy*rxp0_2))+(((0.15)*gconst10*gconst2*gconst7*r21))+((gconst1*gconst13*gconst2*gconst4))+(((-9.0)*gconst2*npy*r21*rxp0_2))+(((-8.1)*gconst3*gconst9*npy*r21))+(((432.0)*gconst1*gconst6*npx*rxp0_2))+(((32.4)*gconst1*npx*r20*rxp2_2))+(((-54.0)*gconst1*gconst4*gconst6*npy))+(((-3240.0)*gconst5*gconst6*npx*npy))+((gconst1*gconst14*gconst4*rxp2_2))+((gconst10*gconst3*gconst6*rxp2_2))+(((-54.0)*gconst1*gconst13*npy*rxp2_2))+(((-1.0)*gconst11*gconst3*gconst4*rxp2_2))+(((32.4)*gconst2*npx*r20*rxp2_2))+(((-3240.0)*npx*npy*(rxp2_2*rxp2_2)))+(((54.0)*gconst0*gconst13*npy*rxp2_2))+(((-54.0)*gconst3*gconst4*gconst6*npy))+((gconst0*gconst3*gconst6*gconst9))+(((0.15)*gconst10*gconst3*gconst5*r21))+((gconst1*gconst14*gconst7*rxp2_2))+(((-5832.0)*gconst4*rxp2_2*(npy*npy)))+(((-11664.0)*gconst6*rxp2_2*(npx*npx)))+(((432.0)*gconst2*gconst5*npx*rxp0_2))+(((-108.0)*gconst12*gconst3*npy*rxp2_2))+(((54.0)*gconst2*gconst4*gconst7*npy))+(((-54.0)*gconst3*gconst5*gconst6*npy))+(((9.0)*gconst1*npy*r21*rxp0_2))+(((-4.86)*gconst11*npx*r20*r21))+(((-108.0)*gconst11*npy*(rxp2_2*rxp2_2)))+(((-1.0)*gconst10*gconst2*gconst7*rxp2_2))+(((0.15)*gconst0*gconst14*gconst7*r21))+(((-6282.0)*gconst5*rxp2_2*(npy*npy)))+(((-9.72)*gconst1*npy*(r20*r20)))+(((-6282.0)*gconst6*rxp2_2*(npy*npy)))+((gconst1*gconst2*gconst7*gconst8))+(((-8.1)*gconst3*gconst8*npy*r21))+(((-3240.0)*gconst9*npx*npy*rxp2_2))+(((60.0)*gconst11*npy*rxp0_2*rxp2_2))+(((-32.4)*gconst11*npx*r20*rxp2_2))+(((108.0)*gconst10*npy*(rxp2_2*rxp2_2)))+(((-1.0)*gconst1*gconst15*gconst6*rxp2_2))+(((-1.0)*gconst10*gconst2*gconst5*rxp2_2))+(((6998.4)*npx*npy*r21*rxp0_2))+(((-4.86)*gconst14*npy*(r20*r20)))+(((-9.0)*gconst14*npy*r21*rxp0_2))+(((72.9)*npx*npy*(r21*r21)))+(((-67.5)*gconst5*r21*(npy*npy)))+(((54.0)*gconst2*gconst8*npy*rxp2_2))+(((0.15)*gconst10*gconst2*gconst5*r21))+(((-6998.4)*r20*rxp0_2*(npy*npy)))+(((54.0)*gconst2*gconst9*npy*rxp2_2))+(((108.0)*gconst14*npy*(rxp2_2*rxp2_2)))+(((67.5)*gconst6*r21*(npy*npy)))+(((108.0)*gconst0*gconst9*npy*rxp2_2))+(((-16.2)*gconst11*npy*r21*rxp2_2))+((gconst11*gconst2*gconst4*rxp2_2))+(((54.0)*gconst2*gconst5*gconst7*npy))+(((9.72)*gconst2*npy*(r20*r20)))+(((-8.1)*gconst2*gconst8*npy*r21))+(((-0.15)*gconst1*gconst14*gconst4*r21))+(((108.0)*gconst13*gconst2*npy*rxp2_2))+(((60.0)*gconst1*npy*rxp0_2*rxp2_2))+(((-5832.0)*gconst7*rxp2_2*(npy*npy)))+(((3240.0)*gconst6*rxp0_2*(npy*npy)))+(((-1.0)*gconst0*gconst14*gconst7*rxp2_2))+(((0.15)*gconst11*gconst2*gconst7*r21))+(((-0.15)*gconst1*gconst15*gconst6*r21))+(((-1749.6)*gconst6*npx*npy*r20))+(((-0.15)*gconst0*gconst15*gconst6*r21))+(((-32.4)*gconst2*gconst9*npx*r20))+(((-8.1)*gconst0*gconst12*npy*r21))+(((9.0)*gconst11*npy*r21*rxp0_2))+(((-54.0)*gconst1*gconst4*gconst7*npy))+(((1749.6)*gconst6*r21*(npx*npx)))+((gconst0*gconst12*gconst3*gconst5))+(((-225.0)*gconst6*gconst9*(npy*npy)))+(((60.0)*gconst1*gconst12*npy*rxp0_2))+(((-1.0)*gconst0*gconst13*gconst2*gconst5))+(((60.0)*gconst2*npy*rxp0_2*rxp2_2))+(((864.0)*gconst1*npy*(rxp0_2*rxp0_2)))+((gconst0*gconst15*gconst6*rxp2_2))+(((-3240.0)*gconst5*rxp0_2*(npy*npy)))+(((54.0)*gconst0*gconst12*npy*rxp2_2))+(((-0.15)*gconst1*gconst15*gconst4*r21))+(((4.86)*gconst14*npx*r20*r21))+(((-1.0)*gconst0*gconst14*gconst5*rxp2_2))+(((2.4)*gconst11*gconst2*r20*rxp0_2))+(((-0.15)*gconst10*gconst3*gconst6*r21))+(((-1.0)*gconst0*gconst2*gconst7*gconst9))+(((486.0)*gconst12*npx*npy*r21))+(((-0.15)*gconst11*gconst3*gconst6*r21))+(((-1749.6)*gconst5*r21*(npx*npx)))+(((-54.0)*gconst3*gconst9*npy*rxp2_2))+(((-108.0)*gconst1*gconst8*npy*rxp2_2))+((gconst0*gconst15*gconst5*rxp2_2))+(((-8.1)*gconst2*gconst9*npy*r21))+(((-243.0)*gconst12*r20*(npy*npy)))+((gconst10*gconst3*gconst5*rxp2_2))+(((-0.15)*gconst11*gconst3*gconst4*r21))+(((-4.5)*gconst11*gconst6*npy*r20)));
op[6]=((((-54.0)*gconst3*gconst4*npy*rxp2_2))+(((60.0)*gconst2*gconst5*npy*rxp0_2))+((gconst0*gconst12*gconst3*rxp2_2))+((gconst1*gconst2*gconst4*gconst7))+(((0.15)*gconst1*gconst13*gconst2*r21))+(((0.3)*gconst0*gconst14*r21*rxp2_2))+(((54.0)*gconst2*gconst4*npy*rxp2_2))+(((-4.5)*gconst1*gconst12*npy*r20))+(((10.125)*(npy*npy)*(r21*r21)))+(((-33.75)*gconst9*r21*(npy*npy)))+(((54.0)*gconst0*gconst7*npy*rxp2_2))+(((0.18)*gconst1*gconst2*(r20*r20)))+(((-0.0225)*gconst1*gconst14*(r21*r21)))+(((64.8)*gconst1*npx*r21*rxp0_2))+(((54.0)*gconst2*gconst5*npy*rxp2_2))+(((33.75)*gconst12*r21*(npy*npy)))+(((-1.0)*gconst10*gconst2*(rxp2_2*rxp2_2)))+(((-8.1)*gconst3*gconst4*npy*r21))+(((-32.4)*gconst2*gconst5*npx*r20))+(((-4.5)*gconst2*gconst9*npy*r20))+(((-225.0)*gconst12*rxp2_2*(npy*npy)))+((gconst1*gconst2*gconst8*rxp2_2))+(((-0.0225)*gconst11*gconst3*(r21*r21)))+(((262.44)*(npx*npx)*(r21*r21)))+(((-0.675)*gconst11*npy*r20*r21))+(((-3240.0)*gconst6*npx*npy*rxp2_2))+(((0.15)*gconst0*gconst13*gconst2*r21))+(((-4.5)*gconst11*npy*r20*rxp2_2))+((gconst0*gconst3*gconst5*gconst6))+(((-8.1)*gconst2*gconst4*npy*r21))+(((-1.0)*gconst0*gconst14*(rxp2_2*rxp2_2)))+(((-8.1)*gconst2*gconst5*npy*r21))+(((-0.0225)*gconst11*gconst2*(r21*r21)))+(((-0.0225)*gconst0*gconst15*(r21*r21)))+(((0.15)*gconst0*gconst3*gconst9*r21))+(((-225.0)*gconst9*rxp2_2*(npy*npy)))+(((-8.1)*gconst3*gconst5*npy*r21))+(((-54.0)*gconst1*gconst7*npy*rxp2_2))+(((0.675)*gconst14*npy*r20*r21))+(((-4.5)*gconst14*npy*r20*rxp2_2))+((gconst1*gconst14*(rxp2_2*rxp2_2)))+(((0.15)*gconst0*gconst2*gconst9*r21))+(((-1.0)*gconst1*gconst3*gconst4*gconst6))+(((108.0)*gconst0*gconst5*npy*rxp2_2))+(((0.3)*gconst10*gconst2*r21*rxp2_2))+(((-0.0225)*gconst0*gconst14*(r21*r21)))+(((-64.8)*gconst2*npx*r21*rxp0_2))+((gconst0*gconst3*gconst9*rxp2_2))+(((129.6)*gconst2*npy*r20*rxp0_2))+(((-1.0)*gconst11*gconst3*(rxp2_2*rxp2_2)))+((gconst1*gconst13*gconst2*rxp2_2))+(((-1.0)*gconst0*gconst13*gconst2*rxp2_2))+(((432.0)*gconst2*npx*rxp0_2*rxp2_2))+((gconst10*gconst3*(rxp2_2*rxp2_2)))+(((-12114.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-11664.0)*(npx*npx)*(rxp2_2*rxp2_2)))+(((-0.15)*gconst0*gconst12*gconst3*r21))+(((-1.0)*gconst1*gconst3*gconst8*rxp2_2))+(((-8.1)*gconst0*gconst7*npy*r21))+(((-3240.0)*gconst5*npx*npy*rxp2_2))+(((-225.0)*gconst5*gconst6*(npy*npy)))+(((-32.4)*gconst1*gconst6*npx*r20))+(((-0.09)*gconst1*gconst14*(r20*r20)))+(((243.0)*gconst5*r20*(npy*npy)))+(((-486.0)*gconst5*npx*npy*r21))+(((-243.0)*gconst6*r20*(npy*npy)))+(((60.0)*gconst1*gconst6*npy*rxp0_2))+(((-129.6)*gconst1*npy*r20*rxp0_2))+(((-8.1)*gconst1*gconst6*npy*r21))+(((-54.0)*gconst1*gconst6*npy*rxp2_2))+(((262.44)*(npy*npy)*(r20*r20)))+(((-1.0)*gconst0*gconst2*gconst5*gconst7))+(((486.0)*gconst6*npx*npy*r21))+(((-524.88)*npx*npy*r20*r21))+(((-0.0225)*gconst10*gconst3*(r21*r21)))+(((-54.0)*gconst3*gconst5*npy*rxp2_2))+(((-1.0)*gconst0*gconst2*gconst9*rxp2_2))+((gconst0*gconst15*(rxp2_2*rxp2_2)))+(((-16.0)*gconst1*gconst2*(rxp0_2*rxp0_2)))+(((-108.0)*gconst3*gconst6*npy*rxp2_2))+(((54.0)*gconst0*gconst6*npy*rxp2_2))+(((-0.09)*gconst11*gconst2*(r20*r20)))+(((108.0)*gconst2*gconst7*npy*rxp2_2))+(((-0.3)*gconst1*gconst15*r21*rxp2_2))+(((-8.1)*gconst1*gconst7*npy*r21))+(((-0.3)*gconst11*gconst3*r21*rxp2_2))+(((-0.0225)*gconst1*gconst15*(r21*r21)))+(((-0.15)*gconst1*gconst3*gconst8*r21))+(((-0.15)*gconst1*gconst12*gconst3*r21))+(((-8.1)*gconst0*gconst6*npy*r21))+((gconst11*gconst2*(rxp2_2*rxp2_2)))+(((-1.0)*gconst1*gconst12*gconst3*rxp2_2))+(((-1.0)*gconst1*gconst15*(rxp2_2*rxp2_2)))+(((-108.0)*gconst1*gconst4*npy*rxp2_2))+(((-0.0225)*gconst10*gconst2*(r21*r21)))+(((432.0)*gconst1*npx*rxp0_2*rxp2_2))+(((-0.15)*gconst1*gconst2*gconst8*r21))+(((972.0)*r21*rxp0_2*(npy*npy))));
op[7]=(((gconst5*x112*x122))+(((-1.0)*gconst5*x127*x95))+(((-108.0)*x92*x94))+((gconst7*x112*x122))+(((-1.0)*gconst6*x109*x120))+(((-1.0)*gconst4*x109*x120))+((gconst0*x142))+((gconst7*x102*x115))+(((-72.9)*r20*x137))+(((-16.2)*x111*x112))+(((-1.0)*rxp2_2*x123*x94))+(((-1.0)*x106*x128))+((x102*x134))+(((0.15)*gconst3*gconst5*x112))+(((72.9)*x103*x93))+((gconst4*rxp2_2*x102))+(((-1.0)*x117*x136))+(((-1.0)*gconst2*npx*rxp2_2*x98))+(((-1.0)*npx*x109*x98))+(((-1.0)*x124*x136))+(((-1.0)*x117*x128))+((x102*x106))+(((-33.75)*gconst5*x137))+(((-1.0)*x107*x129))+(((108.0)*x127*x92))+((x131*x94))+(((-1.0)*gconst1*gconst3*gconst4*x115))+((rxp2_2*x116*x94))+((x132*x94))+(((-1.0)*gconst3*x142))+((gconst2*x141))+(((-1.0)*gconst3*x107*x112))+(((-1.0)*gconst3*x111*x123))+(((-1.0)*gconst1*x141))+(((-1.0)*gconst2*x111*x123))+(((-3240.0)*x103*x92))+(((-1.0)*gconst4*x102*x115))+((x118*x124))+(((-1.0)*x127*x131))+(((-1.0)*x127*x132))+(((-1.0)*gconst6*x94*x95))+(((33.75)*gconst6*x137))+((gconst2*x111*x116))+((x117*x118)));
op[8]=(((x127*x139))+((gconst2*x112*x99))+(((-1.0)*gconst2*x111*x95))+(((5.0625)*x91*x93))+((x102*x92))+(((-1.0)*gconst0*gconst2*x135))+(((-1.0)*x139*x94))+((x118*x92))+(((-1.0)*x136*x92))+(((-1.0)*x129*x99))+(((-1.0)*gconst1*x120*x92))+(((-1.0)*x128*x92))+(((-1.0)*x118*x135))+(((-1.0)*x102*x135))+(((-1.0)*x102*x130))+(((-1.0)*gconst1*gconst3*x135))+(((-1.0)*rxp2_2*x94*x95)));
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5eval[2];
IkReal x143=cj4*cj4;
IkReal x144=((1.125)*cj4);
IkReal x145=(npz*r22);
IkReal x146=(npx*rxp1_2);
IkReal x147=(npy*rxp0_2);
IkReal x148=(npx*r21);
IkReal x149=(npy*r20);
IkReal x150=((6.66666666666667)*sj4);
IkReal x151=(npy*rxp1_2);
IkReal x152=(npx*rxp0_2);
IkReal x153=((7.5)*sj4);
IkReal x154=((24.0)*x147);
IkReal x155=((27.0)*x143);
IkReal x156=((4.05)*cj4*sj4);
IkReal x157=((3.6)*cj4*sj4);
j5eval[0]=((((24.0)*x143*x146))+(((-1.0)*cj4*x145))+(((-1.0)*x143*x154))+((cj4*pz))+(((-1.0)*x150*x151))+(((-1.0)*x150*x152))+x154+((x148*x157))+(((-1.0)*x149*x157))+(((-24.0)*x146)));
j5eval[1]=IKsign((((pz*x144))+(((27.0)*x147))+(((-27.0)*x146))+(((-1.0)*x151*x153))+(((-1.0)*x144*x145))+(((-1.0)*x152*x153))+(((-1.0)*x147*x155))+((x146*x155))+((x148*x156))+(((-1.0)*x149*x156))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x158=cj4*cj4;
IkReal x159=(npx*sj4);
IkReal x160=((1.125)*r22);
IkReal x161=((4.05)*r22);
IkReal x162=(rxp1_2*sj4);
IkReal x163=((25.0)*pp);
IkReal x164=(npy*sj4);
IkReal x165=(cj4*r21);
IkReal x166=((3.75)*pp);
IkReal x167=((7.5)*npy);
IkReal x168=(cj4*r20);
IkReal x169=(cj4*rxp2_2);
IkReal x170=(rxp0_2*sj4);
IkReal x171=((27.0)*x158);
IkReal x172=((27.0)*x169);
IkReal x173=((27.0)*cj4*npz);
IkReal x174=((4.05)*npz*x158);
CheckValue<IkReal> x175 = IKatan2WithCheck(IkReal(((((-1.0)*x159*x160))+(((-1.0)*npy*x158*x161))+(((-0.7125)*x165))+(((-7.5)*npx*x169))+(((-1.0)*x162*x173))+((r21*x174))+(((-1.0)*x162*x163))+((x164*x172))+((x165*x166))+((npy*x161))+(((4.75)*x162)))),IkReal(((((-1.0)*x166*x168))+(((-1.0)*x159*x172))+(((-1.0)*x160*x164))+(((0.7125)*x168))+(((-4.75)*x170))+(((-1.0)*r20*x174))+(((-1.0)*npx*x161))+((x170*x173))+((npx*x158*x161))+((x163*x170))+(((-1.0)*x167*x169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x175.valid){
continue;
}
CheckValue<IkReal> x176=IKPowWithIntegerCheck(IKsign((((npx*rxp1_2*(((-27.0)+x171))))+((npy*rxp0_2*(((27.0)+(((-1.0)*x171))))))+(((-1.0)*cj4*npz*x160))+(((4.05)*x159*x165))+(((-1.0)*x162*x167))+(((-4.05)*x164*x168))+(((-7.5)*rxp0_2*x159))+(((1.125)*cj4*pz)))),-1);
if(!x176.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x175.value)+(((1.5707963267949)*(x176.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x177=IKcos(j5);
IkReal x178=IKsin(j5);
IkReal x179=((27.0)*sj4);
IkReal x180=((1.0)*sj4);
IkReal x181=((0.15)*cj4);
evalcond[0]=((-4.75)+(((27.0)*cj4*npz))+(((-7.5)*npy*x178))+(((-1.0)*npy*x177*x179))+(((25.0)*pp))+(((7.5)*npx*x177))+(((-1.0)*npx*x178*x179)));
evalcond[1]=((((-1.0)*rxp0_2*x178*x180))+(((-1.0)*rxp1_2*x177*x180))+(((0.15)*r22*sj4))+((r20*x178*x181))+((r21*x177*x181))+((cj4*rxp2_2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
j0eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5))+(((6.66666666666667)*py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x182=((1.0)*sj4);
j0eval[0]=((((-1.0)*r10*sj5*x182))+(((-1.0)*cj5*r11*x182))+((cj4*r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x183=((6.66666666666667)*sj4);
j0eval[0]=(((cj4*r00*sj5))+(((6.66666666666667)*cj4*rxp2_0))+((r02*sj4))+(((-1.0)*cj5*rxp1_0*x183))+((cj4*cj5*r01))+(((-1.0)*rxp0_0*sj5*x183)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x184=((6.66666666666667)*py);
IkReal x185=((1.0)+(((-1.0)*(r12*r12))));
if((x185) < -0.00001)
continue;
IkReal x186=IKabs(IKsqrt(x185));
IkReal x193 = x185;
if(IKabs(x193)==0){
continue;
}
IkReal x187=pow(x193,-0.5);
IkReal x188=(r11*x187);
IkReal x189=(r10*x187);
CheckValue<IkReal> x194=IKPowWithIntegerCheck(x186,-1);
if(!x194.valid){
continue;
}
IkReal x190=x194.value;
if((((1.0)+(((-44.4444444444444)*(py*py)*(x190*x190))))) < -0.00001)
continue;
IkReal x191=IKsqrt(((1.0)+(((-44.4444444444444)*(py*py)*(x190*x190)))));
IkReal x192=((1.0)*x191);
CheckValue<IkReal> x195 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x195.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x196=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x196.valid){
continue;
}
if( ((x184*(x196.value))) < -1-IKFAST_SINCOS_THRESH || ((x184*(x196.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst32=((((-1.0)*(x195.value)))+(((-1.0)*(IKasin((x184*(x196.value)))))));
IkReal gconst33=((((-1.0)*x189*x192))+((x184*x188*x190)));
IkReal gconst34=((((-1.0)*x188*x192))+(((-1.0)*x184*x189*x190)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x197=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x197.valid){
continue;
}
if( (((6.66666666666667)*py*(x197.value))) < -1-IKFAST_SINCOS_THRESH || (((6.66666666666667)*py*(x197.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x198 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x198.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((6.66666666666667)*py*(x197.value))))+j5+(x198.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x199=gconst34*gconst34;
IkReal x200=gconst33*gconst33;
IkReal x201=(gconst33*r01);
IkReal x202=(gconst33*r11);
IkReal x203=((1.2)*py);
IkReal x204=((1.2)*px);
IkReal x205=(gconst34*r00);
IkReal x206=(gconst34*r10);
IkReal x207=((0.09)*x199);
IkReal x208=((0.09)*x200);
CheckValue<IkReal> x216=IKPowWithIntegerCheck(((((-0.15)*x202))+py+(((0.15)*x206))),-1);
if(!x216.valid){
continue;
}
IkReal x209=x216.value;
IkReal x210=(px*x209);
IkReal x211=((0.15)*x209);
IkReal x212=(x205*x211);
IkReal x213=(x201*x211);
IkReal x214=(x210+x212);
if(((((x208*(r11*r11)))+(((-0.18)*x202*x206))+(((4.0)*(py*py)))+(((-1.0)*x201*x204))+(((-1.0)*x202*x203))+(((-0.18)*x201*x205))+((x207*(r00*r00)))+((x204*x205))+((x208*(r01*r01)))+(((4.0)*(px*px)))+((x203*x206))+((x207*(r10*r10))))) < -0.00001)
continue;
IkReal x215=((0.5)*x209*(IKsqrt((((x208*(r11*r11)))+(((-0.18)*x202*x206))+(((4.0)*(py*py)))+(((-1.0)*x201*x204))+(((-1.0)*x202*x203))+(((-0.18)*x201*x205))+((x207*(r00*r00)))+((x204*x205))+((x208*(r01*r01)))+(((4.0)*(px*px)))+((x203*x206))+((x207*(r10*r10)))))));
j0array[0]=((2.0)*(atan((x213+x215+(((-1.0)*x214))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x214+x215+(((-1.0)*x213))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2828=((6.66666666666667)*py);
IkReal x2829=((1.0)+(((-1.0)*(r12*r12))));
if((x2829) < -0.00001)
continue;
IkReal x2830=IKabs(IKsqrt(x2829));
IkReal x2837 = x2829;
if(IKabs(x2837)==0){
continue;
}
IkReal x2831=pow(x2837,-0.5);
IkReal x2832=(r11*x2831);
IkReal x2833=(r10*x2831);
CheckValue<IkReal> x2838=IKPowWithIntegerCheck(x2830,-1);
if(!x2838.valid){
continue;
}
IkReal x2834=x2838.value;
if((((1.0)+(((-44.4444444444444)*(py*py)*(x2834*x2834))))) < -0.00001)
continue;
IkReal x2835=IKsqrt(((1.0)+(((-44.4444444444444)*(py*py)*(x2834*x2834)))));
IkReal x2836=((1.0)*x2835);
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2839=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2839.valid){
continue;
}
if( ((x2828*(x2839.value))) < -1-IKFAST_SINCOS_THRESH || ((x2828*(x2839.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2840 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2840.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(IKasin((x2828*(x2839.value))))+(((-1.0)*(x2840.value))));
IkReal gconst36=(((x2828*x2832*x2834))+((x2833*x2836)));
IkReal gconst37=((((-1.0)*x2828*x2833*x2834))+((x2832*x2836)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2841=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2841.valid){
continue;
}
if( (((6.66666666666667)*py*(x2841.value))) < -1-IKFAST_SINCOS_THRESH || (((6.66666666666667)*py*(x2841.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2842 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2842.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((6.66666666666667)*py*(x2841.value))))))+j5+(x2842.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2843=gconst36*gconst36;
IkReal x2844=gconst37*gconst37;
IkReal x2845=((0.15)*gconst36);
IkReal x2846=(gconst36*r11);
IkReal x2847=((1.2)*py);
IkReal x2848=((0.18)*gconst37);
IkReal x2849=(gconst37*r00);
IkReal x2850=((1.2)*px);
IkReal x2851=(gconst36*r01);
IkReal x2852=(gconst37*r10);
IkReal x2853=((0.09)*x2844);
IkReal x2854=((0.09)*x2843);
CheckValue<IkReal> x2860=IKPowWithIntegerCheck(((((-1.0)*r11*x2845))+py+(((0.15)*x2852))),-1);
if(!x2860.valid){
continue;
}
IkReal x2855=x2860.value;
IkReal x2856=(px*x2855);
IkReal x2857=((0.15)*x2849*x2855);
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(((((-0.15)*x2846))+py+(((0.15)*x2852))),-1);
if(!x2861.valid){
continue;
}
IkReal x2858=(r01*x2845*(x2861.value));
if(((((x2854*(r01*r01)))+(((-1.0)*x2846*x2847))+(((4.0)*(py*py)))+((x2849*x2850))+((x2847*x2852))+((x2853*(r10*r10)))+(((-1.0)*x2850*x2851))+((x2853*(r00*r00)))+(((4.0)*(px*px)))+(((-1.0)*r00*x2848*x2851))+(((-1.0)*r10*x2846*x2848))+((x2854*(r11*r11))))) < -0.00001)
continue;
IkReal x2859=((0.5)*x2855*(IKsqrt((((x2854*(r01*r01)))+(((-1.0)*x2846*x2847))+(((4.0)*(py*py)))+((x2849*x2850))+((x2847*x2852))+((x2853*(r10*r10)))+(((-1.0)*x2850*x2851))+((x2853*(r00*r00)))+(((4.0)*(px*px)))+(((-1.0)*r00*x2848*x2851))+(((-1.0)*r10*x2846*x2848))+((x2854*(r11*r11)))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2856))+x2859+x2858+(((-1.0)*x2857))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x2859+x2857+x2856+(((-1.0)*x2858))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2862=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2862.valid){
continue;
}
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2863.valid){
continue;
}
CheckValue<IkReal> x2864=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2864.valid){
continue;
}
CheckValue<IkReal> x2865=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2865.valid){
continue;
}
CheckValue<IkReal> x2866=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2866.valid){
continue;
}
if((((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))) < -0.00001)
continue;
CheckValue<IkReal> x2867=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2868.valid){
continue;
}
j0array[0]=((2.0)*(atan(((((0.15)*cj4*r10*sj5*(x2862.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2863.value)))+((cj4*rxp2_1*(x2864.value)))+(((0.15)*cj4*cj5*r11*(x2865.value)))+(((0.5)*(x2866.value)*(IKsqrt(((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))))))+(((0.15)*r12*sj4*(x2867.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2868.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
CheckValue<IkReal> x2869=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2869.valid){
continue;
}
CheckValue<IkReal> x2870=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2870.valid){
continue;
}
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2872.valid){
continue;
}
CheckValue<IkReal> x2873=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2873.valid){
continue;
}
CheckValue<IkReal> x2874=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2874.valid){
continue;
}
CheckValue<IkReal> x2875=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2875.valid){
continue;
}
if((((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))) < -0.00001)
continue;
j0array[1]=((2.0)*(atan(((((0.15)*cj4*r10*sj5*(x2869.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2870.value)))+((cj4*rxp2_1*(x2871.value)))+(((0.15)*cj4*cj5*r11*(x2872.value)))+(((0.15)*r12*sj4*(x2873.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2874.value)))+(((-0.5)*(x2875.value)*(IKsqrt(((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))))))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2876=cj4*cj4;
IkReal x2877=cj5*cj5;
IkReal x2878=r10*r10;
IkReal x2879=r00*r00;
IkReal x2880=r11*r11;
IkReal x2881=r01*r01;
IkReal x2882=(r10*sj5);
IkReal x2883=((1.0)*sj4);
IkReal x2884=(cj5*r01);
IkReal x2885=(cj4*r02);
IkReal x2886=((4.0)*x2876);
IkReal x2887=((8.0)*cj5*r11);
IkReal x2888=(r00*sj4*sj5);
IkReal x2889=((4.0)*x2878);
IkReal x2890=((4.0)*x2879);
IkReal x2891=(cj4*r12*sj4);
IkReal x2892=((8.0)*r00*sj5);
IkReal x2893=(x2877*x2881);
IkReal x2894=(x2877*x2880);
CheckValue<IkReal> x2902=IKPowWithIntegerCheck(((((-1.0)*x2882*x2883))+(((-1.0)*cj5*r11*x2883))+((cj4*r12))),-1);
if(!x2902.valid){
continue;
}
IkReal x2895=x2902.value;
IkReal x2896=(sj4*x2895);
IkReal x2897=(x2884*x2896);
IkReal x2898=(x2888*x2895);
IkReal x2899=((1.0)*x2885*x2895);
IkReal x2900=(x2898+x2897);
if(((((x2884*x2892))+(((-8.0)*x2882*x2891))+(((-1.0)*x2887*x2891))+(((4.0)*x2894))+(((4.0)*x2893))+((x2877*x2878*x2886))+((x2886*(r02*r02)))+(((-1.0)*x2876*x2882*x2887))+(((-1.0)*x2877*x2890))+(((-1.0)*x2879*x2886))+(((-1.0)*x2877*x2889))+(((-1.0)*x2878*x2886))+(((-8.0)*x2885*x2888))+(((-1.0)*x2886*x2893))+(((-1.0)*x2886*x2894))+(((-1.0)*x2876*x2884*x2892))+x2889+x2890+((x2886*(r12*r12)))+(((-8.0)*sj4*x2884*x2885))+((x2877*x2879*x2886))+((x2882*x2887)))) < -0.00001)
continue;
IkReal x2901=((0.5)*x2895*(IKsqrt((((x2884*x2892))+(((-8.0)*x2882*x2891))+(((-1.0)*x2887*x2891))+(((4.0)*x2894))+(((4.0)*x2893))+((x2877*x2878*x2886))+((x2886*(r02*r02)))+(((-1.0)*x2876*x2882*x2887))+(((-1.0)*x2877*x2890))+(((-1.0)*x2879*x2886))+(((-1.0)*x2877*x2889))+(((-1.0)*x2878*x2886))+(((-8.0)*x2885*x2888))+(((-1.0)*x2886*x2893))+(((-1.0)*x2886*x2894))+(((-1.0)*x2876*x2884*x2892))+x2889+x2890+((x2886*(r12*r12)))+(((-8.0)*sj4*x2884*x2885))+((x2877*x2879*x2886))+((x2882*x2887))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2899))+x2901+x2900))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2900))+x2899+x2901))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2903=cj5*cj5;
IkReal x2904=r01*r01;
IkReal x2905=r11*r11;
IkReal x2906=(r11*sj5);
IkReal x2907=((1.2)*py);
IkReal x2908=((0.15)*cj5);
IkReal x2909=(cj5*r00);
IkReal x2910=((1.2)*px);
IkReal x2911=(r01*sj5);
IkReal x2912=(cj5*r10);
IkReal x2913=((0.09)*x2903);
CheckValue<IkReal> x2919=IKPowWithIntegerCheck((((r10*x2908))+py+(((-0.15)*x2906))),-1);
if(!x2919.valid){
continue;
}
IkReal x2914=x2919.value;
IkReal x2915=(px*x2914);
CheckValue<IkReal> x2920=IKPowWithIntegerCheck((py+(((0.15)*x2912))+(((-0.15)*x2906))),-1);
if(!x2920.valid){
continue;
}
IkReal x2916=(r00*x2908*(x2920.value));
IkReal x2917=((0.15)*x2911*x2914);
if((((((-1.0)*x2906*x2907))+(((-0.18)*x2906*x2912))+(((4.0)*(py*py)))+((x2907*x2912))+((x2913*(r10*r10)))+((x2909*x2910))+(((-1.0)*x2904*x2913))+(((0.09)*x2905))+(((0.09)*x2904))+(((-1.0)*x2905*x2913))+(((4.0)*(px*px)))+(((-0.18)*x2909*x2911))+(((-1.0)*x2910*x2911))+((x2913*(r00*r00))))) < -0.00001)
continue;
IkReal x2918=((0.5)*x2914*(IKsqrt(((((-1.0)*x2906*x2907))+(((-0.18)*x2906*x2912))+(((4.0)*(py*py)))+((x2907*x2912))+((x2913*(r10*r10)))+((x2909*x2910))+(((-1.0)*x2904*x2913))+(((0.09)*x2905))+(((0.09)*x2904))+(((-1.0)*x2905*x2913))+(((4.0)*(px*px)))+(((-0.18)*x2909*x2911))+(((-1.0)*x2910*x2911))+((x2913*(r00*r00)))))));
j0array[0]=((-2.0)*(atan(((((1.0)*x2915))+x2916+(((-1.0)*x2918))+(((-1.0)*x2917))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x2915+x2916+x2918+(((-1.0)*x2917))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x217=(cj0*r21);
IkReal x218=((1.0)*cj5);
IkReal x219=((1.0)*cj0);
IkReal x220=((((-1.0)*cj4*r02))+((r00*sj4*sj5))+((cj5*r01*sj4)));
j3eval[0]=x220;
j3eval[1]=IKsign(x220);
j3eval[2]=((IKabs(((((-1.0)*cj0*r20*x218))+((sj5*x217)))))+(IKabs(((((-1.0)*cj4*x217*x218))+(((-1.0)*r22*sj4*x219))+(((-1.0)*cj4*r20*sj5*x219))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x221=(r21*sj0);
IkReal x222=((1.0)*cj4);
IkReal x223=((1.0)*r20*sj0);
IkReal x224=(((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x222)));
j3eval[0]=x224;
j3eval[1]=((IKabs(((((-1.0)*cj5*x223))+((sj5*x221)))))+(IKabs(((((-1.0)*cj5*x221*x222))+(((-1.0)*r20*sj0*sj5*x222))+(((-1.0)*r22*sj0*sj4))))));
j3eval[2]=IKsign(x224);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x225=((1.0)*sj4);
IkReal x226=((((-1.0)*cj5*r21*x225))+((cj4*r22))+(((-1.0)*r20*sj5*x225)));
j3eval[0]=x226;
j3eval[1]=IKsign(x226);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x227=((1.0)*r20);
IkReal x228=((1.0)*cj4);
IkReal x229=(((r00*sj4*sj5))+(((-1.0)*r02*x228))+((cj5*r01*sj4)));
j3eval[0]=x229;
j3eval[1]=IKsign(x229);
j3eval[2]=((IKabs(((((-1.0)*cj5*x227))+((r21*sj5)))))+(IKabs(((((-1.0)*cj5*r21*x228))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*sj5*x227))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x230=((1.0)*sj4);
IkReal x231=((1.0)*r00);
IkReal x232=(((cj4*r22))+(((-1.0)*r20*sj5*x230))+(((-1.0)*cj5*r21*x230)));
j3eval[0]=x232;
j3eval[1]=IKsign(x232);
j3eval[2]=((IKabs((((r01*sj5))+(((-1.0)*cj5*x231)))))+(IKabs(((((-1.0)*cj4*sj5*x231))+(((-1.0)*r02*x230))+(((-1.0)*cj4*cj5*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x233=cj4*cj4;
IkReal x234=cj5*cj5;
IkReal x235=r10*r10;
IkReal x236=r11*r11;
IkReal x237=r12*r12;
IkReal x238=(cj5*r10);
IkReal x239=((2.0)*sj5);
IkReal x240=(cj4*r10);
IkReal x241=(r12*sj4);
IkReal x242=((1.0)*x233);
IkReal x243=(cj4*cj5*r11);
IkReal x244=(x234*x236);
IkReal x245=(x234*x235);
IkReal x246=((((-1.0)*x242*x244))+(((-1.0)*r11*x233*x238*x239))+((x233*x245))+(((-1.0)*x245))+(((-2.0)*x241*x243))+((x233*x237))+x244+((r11*x238*x239))+(((-1.0)*x235*x242))+(((-1.0)*x236))+(((-1.0)*x237))+(((-1.0)*x239*x240*x241)));
j3eval[0]=x246;
j3eval[1]=((IKabs((((r11*sj5))+(((-1.0)*x238)))))+(IKabs((((sj5*x240))+x243+x241))));
j3eval[2]=IKsign(x246);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x247=cj4*cj4;
IkReal x248=cj5*cj5;
IkReal x249=r10*r10;
IkReal x250=r11*r11;
IkReal x251=r12*r12;
IkReal x252=(cj5*r10);
IkReal x253=((2.0)*sj5);
IkReal x254=(cj5*r11);
IkReal x255=((1.0)*x247);
IkReal x256=(cj4*r12*sj4);
IkReal x257=(x248*x250);
IkReal x258=(x248*x249);
CheckValue<IkReal> x259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x247*x252*x253))+(((-2.0)*x254*x256))+(((-1.0)*r10*x253*x256))+(((-1.0)*x255*x257))+((r11*x252*x253))+x257+(((-1.0)*x249*x255))+(((-1.0)*x250))+(((-1.0)*x251))+(((-1.0)*x258))+((x247*x258))+((x247*x251)))),-1);
if(!x259.valid){
continue;
}
CheckValue<IkReal> x260 = IKatan2WithCheck(IkReal((((r12*sj4))+((cj4*r10*sj5))+((cj4*x254)))),IkReal((((r11*sj5))+(((-1.0)*x252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x260.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x259.value)))+(x260.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x261=IKsin(j3);
IkReal x262=IKcos(j3);
IkReal x263=(cj4*r10);
IkReal x264=(cj4*r11);
IkReal x265=(cj5*x261);
IkReal x266=(sj5*x261);
IkReal x267=(sj4*x261);
IkReal x268=(sj5*x262);
IkReal x269=((1.0)*cj5*x262);
evalcond[0]=(((r22*x267))+((cj4*r21*x265))+((r21*x268))+((cj4*r20*x266))+(((-1.0)*r20*x269)));
evalcond[1]=(((cj4*r00*x266))+((r02*x267))+((cj4*r01*x265))+(((-1.0)*r00*x269))+((r01*x268)));
evalcond[2]=(((cj5*x262*x264))+((x263*x268))+((r12*sj4*x262))+(((-1.0)*r11*x266))+((r10*x265)));
evalcond[3]=((1.0)+((x264*x265))+((x263*x266))+(((-1.0)*r10*x269))+((r12*x267))+((r11*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x270=((0.76056338028169)*sj4);
IkReal x271=((0.211267605633803)*sj5);
IkReal x272=((0.76056338028169)*cj4);
IkReal x273=((0.211267605633803)*cj5);
if( IKabs((((r02*x272))+(((-1.0)*r00*sj5*x270))+(((-1.0)*cj5*r01*x270))+(((-1.0)*r01*x271))+(((1.40845070422535)*px))+((r00*x273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x270))+(((-1.0)*cj5*r21*x270))+((r22*x272))+(((1.40845070422535)*pz))+(((-1.0)*r21*x271))+((r20*x273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x272))+(((-1.0)*r00*sj5*x270))+(((-1.0)*cj5*r01*x270))+(((-1.0)*r01*x271))+(((1.40845070422535)*px))+((r00*x273))))+IKsqr(((((-1.0)*r20*sj5*x270))+(((-1.0)*cj5*r21*x270))+((r22*x272))+(((1.40845070422535)*pz))+(((-1.0)*r21*x271))+((r20*x273))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x272))+(((-1.0)*r00*sj5*x270))+(((-1.0)*cj5*r01*x270))+(((-1.0)*r01*x271))+(((1.40845070422535)*px))+((r00*x273))), ((((-1.0)*r20*sj5*x270))+(((-1.0)*cj5*r21*x270))+((r22*x272))+(((1.40845070422535)*pz))+(((-1.0)*r21*x271))+((r20*x273))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x274=((1.0)*px);
IkReal x275=((0.54)*sj5);
IkReal x276=((0.15)*sj5);
IkReal x277=((0.54)*cj5);
IkReal x278=(cj3*cj4);
IkReal x279=((0.15)*cj5);
IkReal x280=((0.54)*r02);
IkReal x281=(cj3*sj4);
IkReal x282=((0.54)*r22);
IkReal x283=(r01*x276);
IkReal x284=((0.71)*(IKsin(j1)));
IkReal x285=(r00*x279);
IkReal x286=(r21*x276);
IkReal x287=((0.71)*(IKcos(j1)));
IkReal x288=(r20*x279);
IkReal x289=(x274+x285);
IkReal x290=(x287+x286);
IkReal x291=(x284+x283);
evalcond[0]=((((-1.0)*x290))+x288+pz+((cj4*x282))+(((-1.0)*r21*sj4*x277))+(((-1.0)*r20*sj4*x275)));
evalcond[1]=(((r01*sj4*x277))+x291+(((-1.0)*cj4*x280))+((r00*sj4*x275))+(((-1.0)*x289)));
evalcond[2]=((((-1.0)*r20*x275*x278))+((r21*sj3*x275))+(((-1.0)*r21*x277*x278))+(((-1.0)*r20*sj3*x277))+(((-1.0)*x281*x282))+x291+(((-1.0)*x289)));
evalcond[3]=(((r00*x275*x278))+((r01*x277*x278))+((r00*sj3*x277))+(((-1.0)*pz))+x290+(((-1.0)*r01*sj3*x275))+(((-1.0)*x288))+((x280*x281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x292=((1.0)*cj4);
IkReal x293=(sj1*sj4);
IkReal x294=(r20*sj5);
IkReal x295=(cj5*r01);
IkReal x296=(cj5*r21);
IkReal x297=(cj1*sj4);
IkReal x298=(r00*sj5);
if( IKabs(((((-1.0)*r02*sj1*x292))+(((-1.0)*cj1*r22*x292))+((x296*x297))+((x294*x297))+((x293*x295))+((x293*x298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x293*x294))+(((-1.0)*x293*x296))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x292))+((x297*x298))+((x295*x297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x292))+(((-1.0)*cj1*r22*x292))+((x296*x297))+((x294*x297))+((x293*x295))+((x293*x298))))+IKsqr(((((-1.0)*x293*x294))+(((-1.0)*x293*x296))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x292))+((x297*x298))+((x295*x297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*sj1*x292))+(((-1.0)*cj1*r22*x292))+((x296*x297))+((x294*x297))+((x293*x295))+((x293*x298))), ((((-1.0)*x293*x294))+(((-1.0)*x293*x296))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x292))+((x297*x298))+((x295*x297))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x299=IKsin(j2);
IkReal x300=IKcos(j2);
IkReal x301=(cj3*sj4);
IkReal x302=(r21*sj5);
IkReal x303=(cj5*sj4);
IkReal x304=((0.15)*cj5);
IkReal x305=((1.0)*cj4);
IkReal x306=(sj4*sj5);
IkReal x307=((1.0)*sj3);
IkReal x308=(cj5*sj3);
IkReal x309=(r01*sj5);
IkReal x310=(sj1*x300);
IkReal x311=(cj1*x300);
IkReal x312=(cj3*cj4*sj5);
IkReal x313=((0.54)*x299);
IkReal x314=(sj1*x299);
IkReal x315=(cj3*cj4*cj5);
IkReal x316=((1.0)*cj1*x299);
evalcond[0]=((((-1.0)*r22*x305))+((r21*x303))+x310+(((-1.0)*x316))+((r20*x306)));
evalcond[1]=((((-1.0)*r02*x305))+(((-1.0)*x314))+(((-1.0)*x311))+((r01*x303))+((r00*x306)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x304))+(((-0.54)*x310))+((cj1*x313))+(((-1.0)*pz))+(((0.15)*x302)));
evalcond[3]=((((0.54)*x311))+(((-1.0)*r00*x304))+((sj1*x313))+(((-1.0)*px))+(((0.15)*x309))+(((0.71)*sj1)));
evalcond[4]=(((r22*x301))+((r20*x312))+(((-1.0)*x302*x307))+x314+x311+((r20*x308))+((r21*x315)));
evalcond[5]=(((r02*x301))+x310+((r01*x315))+(((-1.0)*x316))+((r00*x312))+(((-1.0)*x307*x309))+((r00*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x317=((1.0)*sj4);
IkReal x318=((1.0)*r00);
CheckValue<IkReal> x319=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj5*x317))+(((-1.0)*cj5*r21*x317)))),-1);
if(!x319.valid){
continue;
}
CheckValue<IkReal> x320 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x318)))),IkReal(((((-1.0)*r02*x317))+(((-1.0)*cj4*sj5*x318))+(((-1.0)*cj4*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x320.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x319.value)))+(x320.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x321=IKsin(j3);
IkReal x322=IKcos(j3);
IkReal x323=(cj4*r10);
IkReal x324=(cj4*r11);
IkReal x325=(cj5*x321);
IkReal x326=(sj5*x321);
IkReal x327=(sj4*x321);
IkReal x328=(sj5*x322);
IkReal x329=((1.0)*cj5*x322);
evalcond[0]=(((r21*x328))+((cj4*r21*x325))+((r22*x327))+((cj4*r20*x326))+(((-1.0)*r20*x329)));
evalcond[1]=(((r02*x327))+((r01*x328))+((cj4*r00*x326))+(((-1.0)*r00*x329))+((cj4*r01*x325)));
evalcond[2]=(((x323*x328))+((cj5*x322*x324))+(((-1.0)*r11*x326))+((r12*sj4*x322))+((r10*x325)));
evalcond[3]=((1.0)+((x323*x326))+((r12*x327))+((r11*x328))+((x324*x325))+(((-1.0)*r10*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x330=((0.76056338028169)*sj4);
IkReal x331=((0.211267605633803)*sj5);
IkReal x332=((0.76056338028169)*cj4);
IkReal x333=((0.211267605633803)*cj5);
if( IKabs((((r00*x333))+(((-1.0)*r01*x331))+((r02*x332))+(((-1.0)*r00*sj5*x330))+(((-1.0)*cj5*r01*x330))+(((1.40845070422535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x332))+(((-1.0)*cj5*r21*x330))+(((-1.0)*r20*sj5*x330))+(((-1.0)*r21*x331))+((r20*x333))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x333))+(((-1.0)*r01*x331))+((r02*x332))+(((-1.0)*r00*sj5*x330))+(((-1.0)*cj5*r01*x330))+(((1.40845070422535)*px))))+IKsqr((((r22*x332))+(((-1.0)*cj5*r21*x330))+(((-1.0)*r20*sj5*x330))+(((-1.0)*r21*x331))+((r20*x333))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x333))+(((-1.0)*r01*x331))+((r02*x332))+(((-1.0)*r00*sj5*x330))+(((-1.0)*cj5*r01*x330))+(((1.40845070422535)*px))), (((r22*x332))+(((-1.0)*cj5*r21*x330))+(((-1.0)*r20*sj5*x330))+(((-1.0)*r21*x331))+((r20*x333))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x334=((1.0)*px);
IkReal x335=((0.54)*sj5);
IkReal x336=((0.15)*sj5);
IkReal x337=((0.54)*cj5);
IkReal x338=(cj3*cj4);
IkReal x339=((0.15)*cj5);
IkReal x340=((0.54)*r02);
IkReal x341=(cj3*sj4);
IkReal x342=((0.54)*r22);
IkReal x343=(r01*x336);
IkReal x344=((0.71)*(IKsin(j1)));
IkReal x345=(r00*x339);
IkReal x346=(r21*x336);
IkReal x347=((0.71)*(IKcos(j1)));
IkReal x348=(r20*x339);
IkReal x349=(x334+x345);
IkReal x350=(x346+x347);
IkReal x351=(x343+x344);
evalcond[0]=((((-1.0)*x350))+(((-1.0)*r20*sj4*x335))+x348+((cj4*x342))+(((-1.0)*r21*sj4*x337))+pz);
evalcond[1]=((((-1.0)*cj4*x340))+((r00*sj4*x335))+x351+((r01*sj4*x337))+(((-1.0)*x349)));
evalcond[2]=((((-1.0)*r21*x337*x338))+(((-1.0)*r20*sj3*x337))+(((-1.0)*r20*x335*x338))+x351+(((-1.0)*x341*x342))+(((-1.0)*x349))+((r21*sj3*x335)));
evalcond[3]=(x350+(((-1.0)*pz))+((r00*x335*x338))+((r01*x337*x338))+((r00*sj3*x337))+((x340*x341))+(((-1.0)*x348))+(((-1.0)*r01*sj3*x335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x352=((1.0)*cj4);
IkReal x353=(sj1*sj4);
IkReal x354=(r20*sj5);
IkReal x355=(cj5*r01);
IkReal x356=(cj5*r21);
IkReal x357=(cj1*sj4);
IkReal x358=(r00*sj5);
if( IKabs((((x356*x357))+((x353*x358))+((x353*x355))+((x354*x357))+(((-1.0)*cj1*r22*x352))+(((-1.0)*r02*sj1*x352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x353*x356))+(((-1.0)*x353*x354))+(((-1.0)*cj1*r02*x352))+((x355*x357))+((cj4*r22*sj1))+((x357*x358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x356*x357))+((x353*x358))+((x353*x355))+((x354*x357))+(((-1.0)*cj1*r22*x352))+(((-1.0)*r02*sj1*x352))))+IKsqr(((((-1.0)*x353*x356))+(((-1.0)*x353*x354))+(((-1.0)*cj1*r02*x352))+((x355*x357))+((cj4*r22*sj1))+((x357*x358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x356*x357))+((x353*x358))+((x353*x355))+((x354*x357))+(((-1.0)*cj1*r22*x352))+(((-1.0)*r02*sj1*x352))), ((((-1.0)*x353*x356))+(((-1.0)*x353*x354))+(((-1.0)*cj1*r02*x352))+((x355*x357))+((cj4*r22*sj1))+((x357*x358))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x359=IKsin(j2);
IkReal x360=IKcos(j2);
IkReal x361=(cj3*sj4);
IkReal x362=(r21*sj5);
IkReal x363=(cj5*sj4);
IkReal x364=((0.15)*cj5);
IkReal x365=((1.0)*cj4);
IkReal x366=(sj4*sj5);
IkReal x367=((1.0)*sj3);
IkReal x368=(cj5*sj3);
IkReal x369=(r01*sj5);
IkReal x370=(sj1*x360);
IkReal x371=(cj1*x360);
IkReal x372=(cj3*cj4*sj5);
IkReal x373=((0.54)*x359);
IkReal x374=(sj1*x359);
IkReal x375=(cj3*cj4*cj5);
IkReal x376=((1.0)*cj1*x359);
evalcond[0]=(((r20*x366))+(((-1.0)*x376))+x370+((r21*x363))+(((-1.0)*r22*x365)));
evalcond[1]=((((-1.0)*x371))+(((-1.0)*x374))+((r01*x363))+(((-1.0)*r02*x365))+((r00*x366)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x362))+(((-1.0)*r20*x364))+(((-0.54)*x370))+(((-1.0)*pz))+((cj1*x373)));
evalcond[3]=((((0.15)*x369))+((sj1*x373))+(((0.54)*x371))+(((-1.0)*r00*x364))+(((-1.0)*px))+(((0.71)*sj1)));
evalcond[4]=(((r20*x368))+((r20*x372))+(((-1.0)*x362*x367))+x374+x371+((r21*x375))+((r22*x361)));
evalcond[5]=(((r00*x372))+((r01*x375))+((r00*x368))+(((-1.0)*x376))+(((-1.0)*x367*x369))+x370+((r02*x361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x377=((1.0)*r20);
IkReal x378=((1.0)*cj4);
CheckValue<IkReal> x379 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x377))+((r21*sj5)))),IkReal(((((-1.0)*cj4*sj5*x377))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x379.valid){
continue;
}
CheckValue<IkReal> x380=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x378)))),-1);
if(!x380.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x379.value)+(((1.5707963267949)*(x380.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x381=IKsin(j3);
IkReal x382=IKcos(j3);
IkReal x383=(cj4*r10);
IkReal x384=(cj4*r11);
IkReal x385=(cj5*x381);
IkReal x386=(sj5*x381);
IkReal x387=(sj4*x381);
IkReal x388=(sj5*x382);
IkReal x389=((1.0)*cj5*x382);
evalcond[0]=(((r22*x387))+((cj4*r20*x386))+((cj4*r21*x385))+((r21*x388))+(((-1.0)*r20*x389)));
evalcond[1]=(((cj4*r01*x385))+((r02*x387))+((cj4*r00*x386))+(((-1.0)*r00*x389))+((r01*x388)));
evalcond[2]=(((r12*sj4*x382))+((cj5*x382*x384))+((x383*x388))+(((-1.0)*r11*x386))+((r10*x385)));
evalcond[3]=((1.0)+((r11*x388))+((x384*x385))+(((-1.0)*r10*x389))+((r12*x387))+((x383*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x390=((0.76056338028169)*sj4);
IkReal x391=((0.211267605633803)*sj5);
IkReal x392=((0.76056338028169)*cj4);
IkReal x393=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x390))+((r00*x393))+(((-1.0)*r01*x391))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x390))+((r02*x392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x393))+(((-1.0)*r20*sj5*x390))+(((-1.0)*r21*x391))+((r22*x392))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x390))+((r00*x393))+(((-1.0)*r01*x391))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x390))+((r02*x392))))+IKsqr((((r20*x393))+(((-1.0)*r20*sj5*x390))+(((-1.0)*r21*x391))+((r22*x392))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x390))+((r00*x393))+(((-1.0)*r01*x391))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x390))+((r02*x392))), (((r20*x393))+(((-1.0)*r20*sj5*x390))+(((-1.0)*r21*x391))+((r22*x392))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x390))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x394=((1.0)*px);
IkReal x395=((0.54)*sj5);
IkReal x396=((0.15)*sj5);
IkReal x397=((0.54)*cj5);
IkReal x398=(cj3*cj4);
IkReal x399=((0.15)*cj5);
IkReal x400=((0.54)*r02);
IkReal x401=(cj3*sj4);
IkReal x402=((0.54)*r22);
IkReal x403=(r01*x396);
IkReal x404=((0.71)*(IKsin(j1)));
IkReal x405=(r00*x399);
IkReal x406=(r21*x396);
IkReal x407=((0.71)*(IKcos(j1)));
IkReal x408=(r20*x399);
IkReal x409=(x394+x405);
IkReal x410=(x407+x406);
IkReal x411=(x403+x404);
evalcond[0]=((((-1.0)*r20*sj4*x395))+(((-1.0)*r21*sj4*x397))+((cj4*x402))+x408+pz+(((-1.0)*x410)));
evalcond[1]=(((r00*sj4*x395))+x411+(((-1.0)*cj4*x400))+((r01*sj4*x397))+(((-1.0)*x409)));
evalcond[2]=((((-1.0)*r21*x397*x398))+(((-1.0)*x401*x402))+(((-1.0)*r20*x395*x398))+x411+((r21*sj3*x395))+(((-1.0)*r20*sj3*x397))+(((-1.0)*x409)));
evalcond[3]=(((r01*x397*x398))+(((-1.0)*r01*sj3*x395))+(((-1.0)*pz))+x410+((x400*x401))+((r00*x395*x398))+(((-1.0)*x408))+((r00*sj3*x397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x412=((1.0)*cj4);
IkReal x413=(sj1*sj4);
IkReal x414=(r20*sj5);
IkReal x415=(cj5*r01);
IkReal x416=(cj5*r21);
IkReal x417=(cj1*sj4);
IkReal x418=(r00*sj5);
if( IKabs((((x416*x417))+((x413*x415))+((x413*x418))+((x414*x417))+(((-1.0)*r02*sj1*x412))+(((-1.0)*cj1*r22*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x415*x417))+((cj4*r22*sj1))+(((-1.0)*x413*x414))+(((-1.0)*x413*x416))+((x417*x418))+(((-1.0)*cj1*r02*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x416*x417))+((x413*x415))+((x413*x418))+((x414*x417))+(((-1.0)*r02*sj1*x412))+(((-1.0)*cj1*r22*x412))))+IKsqr((((x415*x417))+((cj4*r22*sj1))+(((-1.0)*x413*x414))+(((-1.0)*x413*x416))+((x417*x418))+(((-1.0)*cj1*r02*x412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x416*x417))+((x413*x415))+((x413*x418))+((x414*x417))+(((-1.0)*r02*sj1*x412))+(((-1.0)*cj1*r22*x412))), (((x415*x417))+((cj4*r22*sj1))+(((-1.0)*x413*x414))+(((-1.0)*x413*x416))+((x417*x418))+(((-1.0)*cj1*r02*x412))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x419=IKsin(j2);
IkReal x420=IKcos(j2);
IkReal x421=(cj3*sj4);
IkReal x422=(r21*sj5);
IkReal x423=(cj5*sj4);
IkReal x424=((0.15)*cj5);
IkReal x425=((1.0)*cj4);
IkReal x426=(sj4*sj5);
IkReal x427=((1.0)*sj3);
IkReal x428=(cj5*sj3);
IkReal x429=(r01*sj5);
IkReal x430=(sj1*x420);
IkReal x431=(cj1*x420);
IkReal x432=(cj3*cj4*sj5);
IkReal x433=((0.54)*x419);
IkReal x434=(sj1*x419);
IkReal x435=(cj3*cj4*cj5);
IkReal x436=((1.0)*cj1*x419);
evalcond[0]=(((r20*x426))+(((-1.0)*x436))+((r21*x423))+x430+(((-1.0)*r22*x425)));
evalcond[1]=((((-1.0)*x431))+(((-1.0)*x434))+((r00*x426))+(((-1.0)*r02*x425))+((r01*x423)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x422))+((cj1*x433))+(((-0.54)*x430))+(((-1.0)*r20*x424))+(((-1.0)*pz)));
evalcond[3]=((((0.15)*x429))+(((0.54)*x431))+(((-1.0)*px))+(((-1.0)*r00*x424))+(((0.71)*sj1))+((sj1*x433)));
evalcond[4]=((((-1.0)*x422*x427))+((r20*x428))+((r21*x435))+x431+x434+((r22*x421))+((r20*x432)));
evalcond[5]=((((-1.0)*x436))+(((-1.0)*x427*x429))+((r02*x421))+((r00*x428))+x430+((r00*x432))+((r01*x435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x437=((1.0)*cj4);
IkReal x438=(((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x437)));
j3eval[0]=x438;
j3eval[1]=IKsign(x438);
j3eval[2]=((IKabs(((((-1.0)*cj5*r01*x437))+(((-1.0)*r02*sj4))+(((-1.0)*r00*sj5*x437)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x439=((1.0)*sj5);
IkReal x440=((1.0)*cj5);
IkReal x441=((((-1.0)*r00*sj4*x439))+(((-1.0)*r01*sj4*x440))+((cj4*r02)));
j3eval[0]=x441;
j3eval[1]=IKsign(x441);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*r20*x440)))))+(IKabs(((((-1.0)*cj4*r21*x440))+(((-1.0)*cj4*r20*x439))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x442=cj4*cj4;
IkReal x443=r11*r11;
IkReal x444=cj5*cj5;
IkReal x445=r10*r10;
IkReal x446=r12*r12;
IkReal x447=(cj5*r11);
IkReal x448=((1.0)*x442);
IkReal x449=((2.0)*r10*sj5);
IkReal x450=(cj4*r12*sj4);
IkReal x451=(x444*x445);
IkReal x452=(x443*x444);
IkReal x453=((((2.0)*x447*x450))+(((-1.0)*x452))+x446+x443+x451+((x449*x450))+(((-1.0)*x447*x449))+((x442*x452))+((x442*x445))+((x442*x447*x449))+(((-1.0)*x448*x451))+(((-1.0)*x446*x448)));
j3eval[0]=x453;
j3eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs((((cj4*x447))+((r12*sj4))+((cj4*r10*sj5))))));
j3eval[2]=IKsign(x453);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x454=cj4*cj4;
IkReal x455=r11*r11;
IkReal x456=cj5*cj5;
IkReal x457=r10*r10;
IkReal x458=r12*r12;
IkReal x459=(cj5*r11);
IkReal x460=((2.0)*r10*sj5);
IkReal x461=(cj4*r12*sj4);
IkReal x462=((1.0)*x454);
IkReal x463=(x456*x457);
IkReal x464=(x455*x456);
CheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign(((((-1.0)*x462*x463))+((x454*x457))+((x454*x464))+(((2.0)*x459*x461))+((x454*x459*x460))+(((-1.0)*x464))+(((-1.0)*x459*x460))+x458+x455+x463+((x460*x461))+(((-1.0)*x458*x462)))),-1);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal((((cj4*x459))+((r12*sj4))+((cj4*r10*sj5)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x465.value)))+(x466.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x467=IKsin(j3);
IkReal x468=IKcos(j3);
IkReal x469=(cj4*r10);
IkReal x470=(cj4*r11);
IkReal x471=(cj5*x467);
IkReal x472=(sj5*x467);
IkReal x473=(sj4*x467);
IkReal x474=(sj5*x468);
IkReal x475=((1.0)*cj5*x468);
evalcond[0]=(((r21*x474))+((cj4*r20*x472))+((cj4*r21*x471))+((r22*x473))+(((-1.0)*r20*x475)));
evalcond[1]=(((cj4*r01*x471))+((cj4*r00*x472))+(((-1.0)*r00*x475))+((r02*x473))+((r01*x474)));
evalcond[2]=(((cj5*x468*x470))+((r10*x471))+((x469*x474))+((r12*sj4*x468))+(((-1.0)*r11*x472)));
evalcond[3]=((-1.0)+((x469*x472))+((x470*x471))+((r11*x474))+((r12*x473))+(((-1.0)*r10*x475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x476=((0.76056338028169)*sj4);
IkReal x477=((0.211267605633803)*sj5);
IkReal x478=((0.76056338028169)*cj4);
IkReal x479=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x479))+(((-1.40845070422535)*px))+((r00*sj5*x476))+((cj5*r01*x476))+(((-1.0)*r02*x478))+((r01*x477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x477))+((r20*x479))+(((-1.0)*cj5*r21*x476))+(((-1.0)*r20*sj5*x476))+(((1.40845070422535)*pz))+((r22*x478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x479))+(((-1.40845070422535)*px))+((r00*sj5*x476))+((cj5*r01*x476))+(((-1.0)*r02*x478))+((r01*x477))))+IKsqr(((((-1.0)*r21*x477))+((r20*x479))+(((-1.0)*cj5*r21*x476))+(((-1.0)*r20*sj5*x476))+(((1.40845070422535)*pz))+((r22*x478))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x479))+(((-1.40845070422535)*px))+((r00*sj5*x476))+((cj5*r01*x476))+(((-1.0)*r02*x478))+((r01*x477))), ((((-1.0)*r21*x477))+((r20*x479))+(((-1.0)*cj5*r21*x476))+(((-1.0)*r20*sj5*x476))+(((1.40845070422535)*pz))+((r22*x478))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x480=((0.54)*sj5);
IkReal x481=((0.15)*sj5);
IkReal x482=((0.54)*cj5);
IkReal x483=(cj3*cj4);
IkReal x484=((0.15)*cj5);
IkReal x485=((0.54)*r02);
IkReal x486=(cj3*sj4);
IkReal x487=((0.54)*r22);
IkReal x488=(r20*x484);
IkReal x489=(r21*x481);
IkReal x490=((0.71)*(IKcos(j1)));
IkReal x491=(r01*x481);
IkReal x492=((0.71)*(IKsin(j1)));
IkReal x493=(r00*x484);
IkReal x494=(x488+pz);
IkReal x495=(x489+x490);
IkReal x496=(x492+x493);
evalcond[0]=((((-1.0)*x495))+(((-1.0)*r20*sj4*x480))+((cj4*x487))+x494+(((-1.0)*r21*sj4*x482)));
evalcond[1]=((((-1.0)*x491))+(((-1.0)*r00*sj4*x480))+((cj4*x485))+x496+px+(((-1.0)*r01*sj4*x482)));
evalcond[2]=(((x485*x486))+((r00*sj3*x482))+(((-1.0)*x495))+((r00*x480*x483))+x494+((r01*x482*x483))+(((-1.0)*r01*sj3*x480)));
evalcond[3]=(((r20*sj3*x482))+(((-1.0)*x496))+(((-1.0)*px))+(((-1.0)*r21*sj3*x480))+x491+((r21*x482*x483))+((x486*x487))+((r20*x480*x483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x497=(cj4*r22);
IkReal x498=((1.0)*cj1);
IkReal x499=(r20*sj5);
IkReal x500=(cj4*r02);
IkReal x501=(cj5*r21);
IkReal x502=(cj1*sj4);
IkReal x503=(cj5*r01);
IkReal x504=(r00*sj5);
IkReal x505=((1.0)*sj1*sj4);
if( IKabs((((sj1*x500))+(((-1.0)*x497*x498))+(((-1.0)*x503*x505))+((x501*x502))+(((-1.0)*x504*x505))+((x499*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x499*x505))+((cj1*x500))+(((-1.0)*sj4*x498*x504))+(((-1.0)*sj4*x498*x503))+(((-1.0)*x501*x505))+((sj1*x497)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x500))+(((-1.0)*x497*x498))+(((-1.0)*x503*x505))+((x501*x502))+(((-1.0)*x504*x505))+((x499*x502))))+IKsqr(((((-1.0)*x499*x505))+((cj1*x500))+(((-1.0)*sj4*x498*x504))+(((-1.0)*sj4*x498*x503))+(((-1.0)*x501*x505))+((sj1*x497))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x500))+(((-1.0)*x497*x498))+(((-1.0)*x503*x505))+((x501*x502))+(((-1.0)*x504*x505))+((x499*x502))), ((((-1.0)*x499*x505))+((cj1*x500))+(((-1.0)*sj4*x498*x504))+(((-1.0)*sj4*x498*x503))+(((-1.0)*x501*x505))+((sj1*x497))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x506=IKcos(j2);
IkReal x507=IKsin(j2);
IkReal x508=(cj3*sj4);
IkReal x509=(r21*sj5);
IkReal x510=(cj5*sj4);
IkReal x511=((0.15)*cj5);
IkReal x512=((1.0)*cj4);
IkReal x513=(sj4*sj5);
IkReal x514=((1.0)*sj3);
IkReal x515=(cj5*sj3);
IkReal x516=(r01*sj5);
IkReal x517=(cj1*x506);
IkReal x518=(sj1*x507);
IkReal x519=(cj3*cj4*sj5);
IkReal x520=(cj1*x507);
IkReal x521=(sj1*x506);
IkReal x522=(cj3*cj4*cj5);
IkReal x523=(x518+x517);
evalcond[0]=(((r01*x510))+x523+(((-1.0)*r02*x512))+((r00*x513)));
evalcond[1]=((((-1.0)*r22*x512))+(((-1.0)*x520))+((r20*x513))+x521+((r21*x510)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x520))+(((0.15)*x509))+(((-1.0)*pz))+(((-1.0)*r20*x511))+(((-0.54)*x521)));
evalcond[3]=((((-1.0)*r00*x511))+(((-0.54)*x518))+(((-0.54)*x517))+(((-0.71)*sj1))+(((-1.0)*px))+(((0.15)*x516)));
evalcond[4]=(((r21*x522))+((r22*x508))+((r20*x515))+((r20*x519))+x523+(((-1.0)*x509*x514)));
evalcond[5]=((((-1.0)*x514*x516))+(((-1.0)*x521))+x520+((r01*x522))+((r00*x519))+((r00*x515))+((r02*x508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x524=((1.0)*sj5);
IkReal x525=((1.0)*cj5);
CheckValue<IkReal> x526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj4*x525))+(((-1.0)*r00*sj4*x524))+((cj4*r02)))),-1);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x525)))),IkReal(((((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x525))+(((-1.0)*cj4*r20*x524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x527.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x526.value)))+(x527.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x528=IKsin(j3);
IkReal x529=IKcos(j3);
IkReal x530=(cj4*r10);
IkReal x531=(cj4*r11);
IkReal x532=(cj5*x528);
IkReal x533=(sj5*x528);
IkReal x534=(sj4*x528);
IkReal x535=(sj5*x529);
IkReal x536=((1.0)*cj5*x529);
evalcond[0]=((((-1.0)*r20*x536))+((r22*x534))+((cj4*r20*x533))+((cj4*r21*x532))+((r21*x535)));
evalcond[1]=(((r02*x534))+((cj4*r01*x532))+(((-1.0)*r00*x536))+((cj4*r00*x533))+((r01*x535)));
evalcond[2]=((((-1.0)*r11*x533))+((r10*x532))+((r12*sj4*x529))+((cj5*x529*x531))+((x530*x535)));
evalcond[3]=((-1.0)+((r11*x535))+(((-1.0)*r10*x536))+((r12*x534))+((x531*x532))+((x530*x533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x537=((0.76056338028169)*sj4);
IkReal x538=((0.211267605633803)*sj5);
IkReal x539=((0.76056338028169)*cj4);
IkReal x540=((0.211267605633803)*cj5);
if( IKabs((((r00*sj5*x537))+(((-1.0)*r00*x540))+(((-1.0)*r02*x539))+(((-1.40845070422535)*px))+((cj5*r01*x537))+((r01*x538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x540))+(((-1.0)*r21*x538))+(((-1.0)*r20*sj5*x537))+((r22*x539))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5*x537))+(((-1.0)*r00*x540))+(((-1.0)*r02*x539))+(((-1.40845070422535)*px))+((cj5*r01*x537))+((r01*x538))))+IKsqr((((r20*x540))+(((-1.0)*r21*x538))+(((-1.0)*r20*sj5*x537))+((r22*x539))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x537))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj5*x537))+(((-1.0)*r00*x540))+(((-1.0)*r02*x539))+(((-1.40845070422535)*px))+((cj5*r01*x537))+((r01*x538))), (((r20*x540))+(((-1.0)*r21*x538))+(((-1.0)*r20*sj5*x537))+((r22*x539))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x537))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x541=((0.54)*sj5);
IkReal x542=((0.15)*sj5);
IkReal x543=((0.54)*cj5);
IkReal x544=(cj3*cj4);
IkReal x545=((0.15)*cj5);
IkReal x546=((0.54)*r02);
IkReal x547=(cj3*sj4);
IkReal x548=((0.54)*r22);
IkReal x549=(r20*x545);
IkReal x550=(r21*x542);
IkReal x551=((0.71)*(IKcos(j1)));
IkReal x552=(r01*x542);
IkReal x553=((0.71)*(IKsin(j1)));
IkReal x554=(r00*x545);
IkReal x555=(pz+x549);
IkReal x556=(x551+x550);
IkReal x557=(x553+x554);
evalcond[0]=((((-1.0)*r20*sj4*x541))+((cj4*x548))+(((-1.0)*x556))+x555+(((-1.0)*r21*sj4*x543)));
evalcond[1]=(((cj4*x546))+(((-1.0)*r01*sj4*x543))+(((-1.0)*r00*sj4*x541))+(((-1.0)*x552))+px+x557);
evalcond[2]=((((-1.0)*r01*sj3*x541))+((r01*x543*x544))+(((-1.0)*x556))+x555+((r00*sj3*x543))+((r00*x541*x544))+((x546*x547)));
evalcond[3]=(((r20*x541*x544))+((x547*x548))+(((-1.0)*px))+((r21*x543*x544))+(((-1.0)*x557))+x552+((r20*sj3*x543))+(((-1.0)*r21*sj3*x541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x558=(cj4*r22);
IkReal x559=((1.0)*cj1);
IkReal x560=(r20*sj5);
IkReal x561=(cj4*r02);
IkReal x562=(cj5*r21);
IkReal x563=(cj1*sj4);
IkReal x564=(cj5*r01);
IkReal x565=(r00*sj5);
IkReal x566=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x564*x566))+((x562*x563))+((x560*x563))+((sj1*x561))+(((-1.0)*x558*x559))+(((-1.0)*x565*x566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x561))+((sj1*x558))+(((-1.0)*x562*x566))+(((-1.0)*x560*x566))+(((-1.0)*sj4*x559*x564))+(((-1.0)*sj4*x559*x565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x564*x566))+((x562*x563))+((x560*x563))+((sj1*x561))+(((-1.0)*x558*x559))+(((-1.0)*x565*x566))))+IKsqr((((cj1*x561))+((sj1*x558))+(((-1.0)*x562*x566))+(((-1.0)*x560*x566))+(((-1.0)*sj4*x559*x564))+(((-1.0)*sj4*x559*x565))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x564*x566))+((x562*x563))+((x560*x563))+((sj1*x561))+(((-1.0)*x558*x559))+(((-1.0)*x565*x566))), (((cj1*x561))+((sj1*x558))+(((-1.0)*x562*x566))+(((-1.0)*x560*x566))+(((-1.0)*sj4*x559*x564))+(((-1.0)*sj4*x559*x565))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x567=IKcos(j2);
IkReal x568=IKsin(j2);
IkReal x569=(cj3*sj4);
IkReal x570=(r21*sj5);
IkReal x571=(cj5*sj4);
IkReal x572=((0.15)*cj5);
IkReal x573=((1.0)*cj4);
IkReal x574=(sj4*sj5);
IkReal x575=((1.0)*sj3);
IkReal x576=(cj5*sj3);
IkReal x577=(r01*sj5);
IkReal x578=(cj1*x567);
IkReal x579=(sj1*x568);
IkReal x580=(cj3*cj4*sj5);
IkReal x581=(cj1*x568);
IkReal x582=(sj1*x567);
IkReal x583=(cj3*cj4*cj5);
IkReal x584=(x579+x578);
evalcond[0]=(((r01*x571))+((r00*x574))+x584+(((-1.0)*r02*x573)));
evalcond[1]=((((-1.0)*x581))+((r20*x574))+x582+((r21*x571))+(((-1.0)*r22*x573)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x581))+(((0.15)*x570))+(((-1.0)*pz))+(((-0.54)*x582))+(((-1.0)*r20*x572)));
evalcond[3]=((((0.15)*x577))+(((-0.54)*x579))+(((-0.54)*x578))+(((-1.0)*r00*x572))+(((-0.71)*sj1))+(((-1.0)*px)));
evalcond[4]=(((r20*x580))+((r22*x569))+((r20*x576))+(((-1.0)*x570*x575))+x584+((r21*x583)));
evalcond[5]=((((-1.0)*x582))+((r00*x576))+(((-1.0)*x575*x577))+x581+((r01*x583))+((r00*x580))+((r02*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x585=((1.0)*cj4);
CheckValue<IkReal> x586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x585))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x586.valid){
continue;
}
CheckValue<IkReal> x587 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*cj5*r01*x585))+(((-1.0)*r02*sj4))+(((-1.0)*r00*sj5*x585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x587.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x586.value)))+(x587.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x588=IKsin(j3);
IkReal x589=IKcos(j3);
IkReal x590=(cj4*r10);
IkReal x591=(cj4*r11);
IkReal x592=(cj5*x588);
IkReal x593=(sj5*x588);
IkReal x594=(sj4*x588);
IkReal x595=(sj5*x589);
IkReal x596=((1.0)*cj5*x589);
evalcond[0]=(((cj4*r21*x592))+((r22*x594))+(((-1.0)*r20*x596))+((r21*x595))+((cj4*r20*x593)));
evalcond[1]=(((cj4*r01*x592))+(((-1.0)*r00*x596))+((cj4*r00*x593))+((r01*x595))+((r02*x594)));
evalcond[2]=(((cj5*x589*x591))+(((-1.0)*r11*x593))+((x590*x595))+((r10*x592))+((r12*sj4*x589)));
evalcond[3]=((-1.0)+((r11*x595))+((r12*x594))+(((-1.0)*r10*x596))+((x590*x593))+((x591*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x597=((0.76056338028169)*sj4);
IkReal x598=((0.211267605633803)*sj5);
IkReal x599=((0.76056338028169)*cj4);
IkReal x600=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x600))+((r01*x598))+(((-1.40845070422535)*px))+((cj5*r01*x597))+(((-1.0)*r02*x599))+((r00*sj5*x597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x598))+((r22*x599))+((r20*x600))+(((-1.0)*cj5*r21*x597))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x600))+((r01*x598))+(((-1.40845070422535)*px))+((cj5*r01*x597))+(((-1.0)*r02*x599))+((r00*sj5*x597))))+IKsqr(((((-1.0)*r21*x598))+((r22*x599))+((r20*x600))+(((-1.0)*cj5*r21*x597))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x597))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x600))+((r01*x598))+(((-1.40845070422535)*px))+((cj5*r01*x597))+(((-1.0)*r02*x599))+((r00*sj5*x597))), ((((-1.0)*r21*x598))+((r22*x599))+((r20*x600))+(((-1.0)*cj5*r21*x597))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x597))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x601=((0.54)*sj5);
IkReal x602=((0.15)*sj5);
IkReal x603=((0.54)*cj5);
IkReal x604=(cj3*cj4);
IkReal x605=((0.15)*cj5);
IkReal x606=((0.54)*r02);
IkReal x607=(cj3*sj4);
IkReal x608=((0.54)*r22);
IkReal x609=(r20*x605);
IkReal x610=(r21*x602);
IkReal x611=((0.71)*(IKcos(j1)));
IkReal x612=(r01*x602);
IkReal x613=((0.71)*(IKsin(j1)));
IkReal x614=(r00*x605);
IkReal x615=(pz+x609);
IkReal x616=(x610+x611);
IkReal x617=(x614+x613);
evalcond[0]=((((-1.0)*r21*sj4*x603))+(((-1.0)*x616))+x615+(((-1.0)*r20*sj4*x601))+((cj4*x608)));
evalcond[1]=((((-1.0)*r00*sj4*x601))+(((-1.0)*r01*sj4*x603))+px+(((-1.0)*x612))+x617+((cj4*x606)));
evalcond[2]=(((r00*sj3*x603))+((r01*x603*x604))+((x606*x607))+(((-1.0)*x616))+x615+((r00*x601*x604))+(((-1.0)*r01*sj3*x601)));
evalcond[3]=((((-1.0)*r21*sj3*x601))+(((-1.0)*px))+((x607*x608))+(((-1.0)*x617))+x612+((r20*sj3*x603))+((r21*x603*x604))+((r20*x601*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x618=(cj4*r22);
IkReal x619=((1.0)*cj1);
IkReal x620=(r20*sj5);
IkReal x621=(cj4*r02);
IkReal x622=(cj5*r21);
IkReal x623=(cj1*sj4);
IkReal x624=(cj5*r01);
IkReal x625=(r00*sj5);
IkReal x626=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x618*x619))+(((-1.0)*x624*x626))+((sj1*x621))+(((-1.0)*x625*x626))+((x622*x623))+((x620*x623)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x619*x624))+(((-1.0)*sj4*x619*x625))+((sj1*x618))+(((-1.0)*x622*x626))+(((-1.0)*x620*x626))+((cj1*x621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x618*x619))+(((-1.0)*x624*x626))+((sj1*x621))+(((-1.0)*x625*x626))+((x622*x623))+((x620*x623))))+IKsqr(((((-1.0)*sj4*x619*x624))+(((-1.0)*sj4*x619*x625))+((sj1*x618))+(((-1.0)*x622*x626))+(((-1.0)*x620*x626))+((cj1*x621))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x618*x619))+(((-1.0)*x624*x626))+((sj1*x621))+(((-1.0)*x625*x626))+((x622*x623))+((x620*x623))), ((((-1.0)*sj4*x619*x624))+(((-1.0)*sj4*x619*x625))+((sj1*x618))+(((-1.0)*x622*x626))+(((-1.0)*x620*x626))+((cj1*x621))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x627=IKcos(j2);
IkReal x628=IKsin(j2);
IkReal x629=(cj3*sj4);
IkReal x630=(r21*sj5);
IkReal x631=(cj5*sj4);
IkReal x632=((0.15)*cj5);
IkReal x633=((1.0)*cj4);
IkReal x634=(sj4*sj5);
IkReal x635=((1.0)*sj3);
IkReal x636=(cj5*sj3);
IkReal x637=(r01*sj5);
IkReal x638=(cj1*x627);
IkReal x639=(sj1*x628);
IkReal x640=(cj3*cj4*sj5);
IkReal x641=(cj1*x628);
IkReal x642=(sj1*x627);
IkReal x643=(cj3*cj4*cj5);
IkReal x644=(x638+x639);
evalcond[0]=((((-1.0)*r02*x633))+((r01*x631))+((r00*x634))+x644);
evalcond[1]=(((r21*x631))+(((-1.0)*x641))+x642+((r20*x634))+(((-1.0)*r22*x633)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x630))+(((0.54)*x641))+(((-1.0)*pz))+(((-1.0)*r20*x632))+(((-0.54)*x642)));
evalcond[3]=((((-1.0)*r00*x632))+(((0.15)*x637))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x638))+(((-0.54)*x639)));
evalcond[4]=(((r20*x640))+(((-1.0)*x630*x635))+((r22*x629))+((r21*x643))+x644+((r20*x636)));
evalcond[5]=(((r02*x629))+(((-1.0)*x642))+(((-1.0)*x635*x637))+((r00*x636))+x641+((r01*x643))+((r00*x640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x645=((1.0)*r20);
IkReal x646=((1.0)*cj4);
IkReal x647=(((cj5*r11*sj4))+(((-1.0)*r12*x646))+((r10*sj4*sj5)));
j3eval[0]=x647;
j3eval[1]=IKsign(x647);
j3eval[2]=((IKabs(((((-1.0)*cj5*x645))+((r21*sj5)))))+(IKabs(((((-1.0)*cj4*sj5*x645))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x646))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x648=((1.0)*cj5);
IkReal x649=((1.0)*sj4);
IkReal x650=(((cj4*r22))+(((-1.0)*r20*sj5*x649))+(((-1.0)*r21*sj4*x648)));
j3eval[0]=x650;
j3eval[1]=IKsign(x650);
j3eval[2]=((IKabs(((((-1.0)*r10*x648))+((r11*sj5)))))+(IKabs(((((-1.0)*cj4*r11*x648))+(((-1.0)*r12*x649))+(((-1.0)*cj4*r10*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x651=cj4*cj4;
IkReal x652=r00*r00;
IkReal x653=cj5*cj5;
IkReal x654=r01*r01;
IkReal x655=r02*r02;
IkReal x656=(r00*sj5);
IkReal x657=((2.0)*cj5*r01);
IkReal x658=(cj4*r02*sj4);
IkReal x659=((1.0)*x653);
IkReal x660=(x651*x652);
IkReal x661=((((2.0)*x656*x658))+(((-1.0)*x659*x660))+((x652*x653))+(((-1.0)*x656*x657))+((x657*x658))+((x651*x656*x657))+x654+x655+x660+((x651*x653*x654))+(((-1.0)*x651*x655))+(((-1.0)*x654*x659)));
j3eval[0]=x661;
j3eval[1]=IKsign(x661);
j3eval[2]=((IKabs((((cj4*x656))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x662=cj4*cj4;
IkReal x663=r00*r00;
IkReal x664=cj5*cj5;
IkReal x665=r01*r01;
IkReal x666=r02*r02;
IkReal x667=(r00*sj5);
IkReal x668=((2.0)*cj5*r01);
IkReal x669=(cj4*r02*sj4);
IkReal x670=((1.0)*x664);
IkReal x671=(x662*x663);
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal((((r02*sj4))+((cj4*cj5*r01))+((cj4*x667)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
CheckValue<IkReal> x673=IKPowWithIntegerCheck(IKsign((((x668*x669))+((x663*x664))+(((-1.0)*x670*x671))+(((-1.0)*x665*x670))+((x662*x667*x668))+((x662*x664*x665))+x665+x666+x671+(((2.0)*x667*x669))+(((-1.0)*x667*x668))+(((-1.0)*x662*x666)))),-1);
if(!x673.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x672.value)+(((1.5707963267949)*(x673.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x674=IKsin(j3);
IkReal x675=IKcos(j3);
IkReal x676=(cj4*r00);
IkReal x677=(sj5*x674);
IkReal x678=(sj4*x674);
IkReal x679=(sj5*x675);
IkReal x680=(cj4*cj5*x674);
IkReal x681=((1.0)*cj5*x675);
evalcond[0]=(((cj4*r20*x677))+((r21*x679))+((r21*x680))+((r22*x678))+(((-1.0)*r20*x681)));
evalcond[1]=((((-1.0)*r10*x681))+((r12*x678))+((r11*x679))+((r11*x680))+((cj4*r10*x677)));
evalcond[2]=(((cj5*r00*x674))+((cj4*cj5*r01*x675))+(((-1.0)*r01*x677))+((x676*x679))+((r02*sj4*x675)));
evalcond[3]=((-1.0)+((r02*x678))+((r01*x679))+((x676*x677))+(((-1.0)*r00*x681))+((r01*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x682=((0.76056338028169)*sj4);
IkReal x683=((0.211267605633803)*sj5);
IkReal x684=((0.76056338028169)*cj4);
IkReal x685=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*sj5*x682))+(((-1.0)*cj5*r11*x682))+((r10*x685))+(((1.40845070422535)*py))+((r12*x684))+(((-1.0)*r11*x683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x684))+(((-1.0)*cj5*r21*x682))+(((-1.0)*r20*sj5*x682))+(((-1.0)*r21*x683))+(((1.40845070422535)*pz))+((r20*x685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj5*x682))+(((-1.0)*cj5*r11*x682))+((r10*x685))+(((1.40845070422535)*py))+((r12*x684))+(((-1.0)*r11*x683))))+IKsqr((((r22*x684))+(((-1.0)*cj5*r21*x682))+(((-1.0)*r20*sj5*x682))+(((-1.0)*r21*x683))+(((1.40845070422535)*pz))+((r20*x685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*sj5*x682))+(((-1.0)*cj5*r11*x682))+((r10*x685))+(((1.40845070422535)*py))+((r12*x684))+(((-1.0)*r11*x683))), (((r22*x684))+(((-1.0)*cj5*r21*x682))+(((-1.0)*r20*sj5*x682))+(((-1.0)*r21*x683))+(((1.40845070422535)*pz))+((r20*x685))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x686=((1.0)*py);
IkReal x687=((0.54)*sj5);
IkReal x688=((0.15)*sj5);
IkReal x689=(cj5*r10);
IkReal x690=((0.54)*cj5);
IkReal x691=(cj3*cj4);
IkReal x692=((0.54)*r12);
IkReal x693=(cj3*sj4);
IkReal x694=((0.54)*r22);
IkReal x695=((0.71)*(IKsin(j1)));
IkReal x696=(r11*x688);
IkReal x697=((0.15)*x689);
IkReal x698=(r21*x688);
IkReal x699=((0.71)*(IKcos(j1)));
IkReal x700=((0.15)*cj5*r20);
IkReal x701=(x686+x697);
IkReal x702=(x698+x699);
IkReal x703=(x695+x696);
evalcond[0]=(((cj4*x694))+(((-1.0)*r20*sj4*x687))+(((-1.0)*r21*sj4*x690))+pz+(((-1.0)*x702))+x700);
evalcond[1]=((((-1.0)*cj4*x692))+((r10*sj4*x687))+(((-1.0)*x701))+x703+((r11*sj4*x690)));
evalcond[2]=(((r21*sj3*x687))+(((-1.0)*x693*x694))+(((-1.0)*r20*sj3*x690))+(((-1.0)*r20*x687*x691))+(((-1.0)*x701))+x703+(((-1.0)*r21*x690*x691)));
evalcond[3]=(((r10*x687*x691))+((r11*x690*x691))+(((0.54)*sj3*x689))+((x692*x693))+(((-1.0)*pz))+(((-1.0)*x700))+(((-1.0)*r11*sj3*x687))+x702);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x704=((1.0)*cj4);
IkReal x705=(r20*sj5);
IkReal x706=((1.0)*sj1*sj4);
IkReal x707=(cj1*cj5*sj4);
IkReal x708=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((cj1*sj4*x705))+(((-1.0)*r12*sj1*x704))+(((-1.0)*cj1*r22*x704))+((r21*x707))+((sj1*x708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x704))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x706))+(((-1.0)*x705*x706))+((cj1*x708))+((r11*x707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((cj1*sj4*x705))+(((-1.0)*r12*sj1*x704))+(((-1.0)*cj1*r22*x704))+((r21*x707))+((sj1*x708))))+IKsqr(((((-1.0)*cj1*r12*x704))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x706))+(((-1.0)*x705*x706))+((cj1*x708))+((r11*x707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((cj1*sj4*x705))+(((-1.0)*r12*sj1*x704))+(((-1.0)*cj1*r22*x704))+((r21*x707))+((sj1*x708))), ((((-1.0)*cj1*r12*x704))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x706))+(((-1.0)*x705*x706))+((cj1*x708))+((r11*x707))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x709=IKsin(j2);
IkReal x710=IKcos(j2);
IkReal x711=((0.15)*sj5);
IkReal x712=((0.15)*cj5);
IkReal x713=(cj5*sj4);
IkReal x714=(cj3*cj4);
IkReal x715=(r20*sj5);
IkReal x716=(cj3*sj4);
IkReal x717=(r10*sj5);
IkReal x718=((1.0)*cj4);
IkReal x719=(cj5*sj3);
IkReal x720=(sj1*x710);
IkReal x721=(cj1*x710);
IkReal x722=((0.54)*x709);
IkReal x723=((1.0)*sj3*sj5);
IkReal x724=(sj1*x709);
IkReal x725=((1.0)*cj1*x709);
evalcond[0]=((((-1.0)*r22*x718))+((sj4*x715))+(((-1.0)*x725))+((r21*x713))+x720);
evalcond[1]=(((sj4*x717))+((r11*x713))+(((-1.0)*r12*x718))+(((-1.0)*x724))+(((-1.0)*x721)));
evalcond[2]=(((cj1*x722))+(((0.71)*cj1))+(((-0.54)*x720))+(((-1.0)*pz))+(((-1.0)*r20*x712))+((r21*x711)));
evalcond[3]=(((r11*x711))+(((0.54)*x721))+(((-1.0)*py))+(((-1.0)*r10*x712))+(((0.71)*sj1))+((sj1*x722)));
evalcond[4]=(((r22*x716))+((x714*x715))+((cj5*r21*x714))+((r20*x719))+(((-1.0)*r21*x723))+x721+x724);
evalcond[5]=(((x714*x717))+(((-1.0)*x725))+((cj5*r11*x714))+x720+((r12*x716))+(((-1.0)*r11*x723))+((r10*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x726=((1.0)*cj5);
IkReal x727=((1.0)*sj4);
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x726)))),IkReal(((((-1.0)*r12*x727))+(((-1.0)*cj4*r11*x726))+(((-1.0)*cj4*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
CheckValue<IkReal> x729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x727))+((cj4*r22))+(((-1.0)*r21*sj4*x726)))),-1);
if(!x729.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x728.value)+(((1.5707963267949)*(x729.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x730=IKsin(j3);
IkReal x731=IKcos(j3);
IkReal x732=(cj4*r00);
IkReal x733=(sj5*x730);
IkReal x734=(sj4*x730);
IkReal x735=(sj5*x731);
IkReal x736=(cj4*cj5*x730);
IkReal x737=((1.0)*cj5*x731);
evalcond[0]=((((-1.0)*r20*x737))+((r22*x734))+((cj4*r20*x733))+((r21*x736))+((r21*x735)));
evalcond[1]=(((r12*x734))+((cj4*r10*x733))+((r11*x735))+((r11*x736))+(((-1.0)*r10*x737)));
evalcond[2]=((((-1.0)*r01*x733))+((r02*sj4*x731))+((cj5*r00*x730))+((cj4*cj5*r01*x731))+((x732*x735)));
evalcond[3]=((-1.0)+((r01*x736))+((r01*x735))+((r02*x734))+((x732*x733))+(((-1.0)*r00*x737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x738=((0.76056338028169)*sj4);
IkReal x739=((0.211267605633803)*sj5);
IkReal x740=((0.76056338028169)*cj4);
IkReal x741=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*cj5*r11*x738))+(((-1.0)*r10*sj5*x738))+((r10*x741))+(((1.40845070422535)*py))+((r12*x740))+(((-1.0)*r11*x739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x740))+(((-1.0)*r20*sj5*x738))+(((-1.0)*cj5*r21*x738))+(((1.40845070422535)*pz))+((r20*x741))+(((-1.0)*r21*x739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r11*x738))+(((-1.0)*r10*sj5*x738))+((r10*x741))+(((1.40845070422535)*py))+((r12*x740))+(((-1.0)*r11*x739))))+IKsqr((((r22*x740))+(((-1.0)*r20*sj5*x738))+(((-1.0)*cj5*r21*x738))+(((1.40845070422535)*pz))+((r20*x741))+(((-1.0)*r21*x739))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r11*x738))+(((-1.0)*r10*sj5*x738))+((r10*x741))+(((1.40845070422535)*py))+((r12*x740))+(((-1.0)*r11*x739))), (((r22*x740))+(((-1.0)*r20*sj5*x738))+(((-1.0)*cj5*r21*x738))+(((1.40845070422535)*pz))+((r20*x741))+(((-1.0)*r21*x739))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x742=((1.0)*py);
IkReal x743=((0.54)*sj5);
IkReal x744=((0.15)*sj5);
IkReal x745=(cj5*r10);
IkReal x746=((0.54)*cj5);
IkReal x747=(cj3*cj4);
IkReal x748=((0.54)*r12);
IkReal x749=(cj3*sj4);
IkReal x750=((0.54)*r22);
IkReal x751=((0.71)*(IKsin(j1)));
IkReal x752=(r11*x744);
IkReal x753=((0.15)*x745);
IkReal x754=(r21*x744);
IkReal x755=((0.71)*(IKcos(j1)));
IkReal x756=((0.15)*cj5*r20);
IkReal x757=(x753+x742);
IkReal x758=(x755+x754);
IkReal x759=(x751+x752);
evalcond[0]=((((-1.0)*r20*sj4*x743))+pz+(((-1.0)*r21*sj4*x746))+x756+(((-1.0)*x758))+((cj4*x750)));
evalcond[1]=(((r10*sj4*x743))+((r11*sj4*x746))+(((-1.0)*cj4*x748))+x759+(((-1.0)*x757)));
evalcond[2]=((((-1.0)*r21*x746*x747))+(((-1.0)*r20*x743*x747))+(((-1.0)*r20*sj3*x746))+((r21*sj3*x743))+x759+(((-1.0)*x749*x750))+(((-1.0)*x757)));
evalcond[3]=((((-1.0)*r11*sj3*x743))+((r10*x743*x747))+(((-1.0)*pz))+(((0.54)*sj3*x745))+x758+(((-1.0)*x756))+((x748*x749))+((r11*x746*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x760=((1.0)*cj4);
IkReal x761=(r20*sj5);
IkReal x762=((1.0)*sj1*sj4);
IkReal x763=(cj1*cj5*sj4);
IkReal x764=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x760))+(((-1.0)*cj1*r22*x760))+((cj5*r11*sj1*sj4))+((sj1*x764))+((r21*x763))+((cj1*sj4*x761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x764))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x760))+(((-1.0)*cj5*r21*x762))+((r11*x763))+(((-1.0)*x761*x762)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x760))+(((-1.0)*cj1*r22*x760))+((cj5*r11*sj1*sj4))+((sj1*x764))+((r21*x763))+((cj1*sj4*x761))))+IKsqr((((cj1*x764))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x760))+(((-1.0)*cj5*r21*x762))+((r11*x763))+(((-1.0)*x761*x762))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x760))+(((-1.0)*cj1*r22*x760))+((cj5*r11*sj1*sj4))+((sj1*x764))+((r21*x763))+((cj1*sj4*x761))), (((cj1*x764))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x760))+(((-1.0)*cj5*r21*x762))+((r11*x763))+(((-1.0)*x761*x762))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x765=IKsin(j2);
IkReal x766=IKcos(j2);
IkReal x767=((0.15)*sj5);
IkReal x768=((0.15)*cj5);
IkReal x769=(cj5*sj4);
IkReal x770=(cj3*cj4);
IkReal x771=(r20*sj5);
IkReal x772=(cj3*sj4);
IkReal x773=(r10*sj5);
IkReal x774=((1.0)*cj4);
IkReal x775=(cj5*sj3);
IkReal x776=(sj1*x766);
IkReal x777=(cj1*x766);
IkReal x778=((0.54)*x765);
IkReal x779=((1.0)*sj3*sj5);
IkReal x780=(sj1*x765);
IkReal x781=((1.0)*cj1*x765);
evalcond[0]=(((sj4*x771))+(((-1.0)*x781))+((r21*x769))+(((-1.0)*r22*x774))+x776);
evalcond[1]=(((sj4*x773))+(((-1.0)*r12*x774))+(((-1.0)*x780))+(((-1.0)*x777))+((r11*x769)));
evalcond[2]=((((0.71)*cj1))+((cj1*x778))+(((-1.0)*r20*x768))+((r21*x767))+(((-1.0)*pz))+(((-0.54)*x776)));
evalcond[3]=((((0.54)*x777))+(((-1.0)*r10*x768))+(((-1.0)*py))+((sj1*x778))+(((0.71)*sj1))+((r11*x767)));
evalcond[4]=(((r22*x772))+((x770*x771))+((r20*x775))+((cj5*r21*x770))+x777+x780+(((-1.0)*r21*x779)));
evalcond[5]=((((-1.0)*r11*x779))+((x770*x773))+(((-1.0)*x781))+((r10*x775))+((r12*x772))+x776+((cj5*r11*x770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x782=((1.0)*r20);
IkReal x783=((1.0)*cj4);
CheckValue<IkReal> x784=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x783)))),-1);
if(!x784.valid){
continue;
}
CheckValue<IkReal> x785 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x782)))),IkReal(((((-1.0)*r22*sj4))+(((-1.0)*cj4*sj5*x782))+(((-1.0)*cj5*r21*x783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x785.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x784.value)))+(x785.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x786=IKsin(j3);
IkReal x787=IKcos(j3);
IkReal x788=(cj4*r00);
IkReal x789=(sj5*x786);
IkReal x790=(sj4*x786);
IkReal x791=(sj5*x787);
IkReal x792=(cj4*cj5*x786);
IkReal x793=((1.0)*cj5*x787);
evalcond[0]=(((cj4*r20*x789))+(((-1.0)*r20*x793))+((r21*x792))+((r21*x791))+((r22*x790)));
evalcond[1]=(((cj4*r10*x789))+(((-1.0)*r10*x793))+((r11*x792))+((r11*x791))+((r12*x790)));
evalcond[2]=(((r02*sj4*x787))+(((-1.0)*r01*x789))+((cj4*cj5*r01*x787))+((x788*x791))+((cj5*r00*x786)));
evalcond[3]=((-1.0)+((r01*x792))+((r01*x791))+(((-1.0)*r00*x793))+((x788*x789))+((r02*x790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x794=((0.76056338028169)*sj4);
IkReal x795=((0.211267605633803)*sj5);
IkReal x796=((0.76056338028169)*cj4);
IkReal x797=((0.211267605633803)*cj5);
if( IKabs((((r10*x797))+(((-1.0)*cj5*r11*x794))+(((-1.0)*r11*x795))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x794))+((r12*x796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x797))+(((-1.0)*r20*sj5*x794))+(((-1.0)*r21*x795))+((r22*x796))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x797))+(((-1.0)*cj5*r11*x794))+(((-1.0)*r11*x795))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x794))+((r12*x796))))+IKsqr((((r20*x797))+(((-1.0)*r20*sj5*x794))+(((-1.0)*r21*x795))+((r22*x796))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x797))+(((-1.0)*cj5*r11*x794))+(((-1.0)*r11*x795))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x794))+((r12*x796))), (((r20*x797))+(((-1.0)*r20*sj5*x794))+(((-1.0)*r21*x795))+((r22*x796))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x794))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x798=((1.0)*py);
IkReal x799=((0.54)*sj5);
IkReal x800=((0.15)*sj5);
IkReal x801=(cj5*r10);
IkReal x802=((0.54)*cj5);
IkReal x803=(cj3*cj4);
IkReal x804=((0.54)*r12);
IkReal x805=(cj3*sj4);
IkReal x806=((0.54)*r22);
IkReal x807=((0.71)*(IKsin(j1)));
IkReal x808=(r11*x800);
IkReal x809=((0.15)*x801);
IkReal x810=(r21*x800);
IkReal x811=((0.71)*(IKcos(j1)));
IkReal x812=((0.15)*cj5*r20);
IkReal x813=(x798+x809);
IkReal x814=(x810+x811);
IkReal x815=(x808+x807);
evalcond[0]=(((cj4*x806))+(((-1.0)*r21*sj4*x802))+(((-1.0)*x814))+pz+x812+(((-1.0)*r20*sj4*x799)));
evalcond[1]=((((-1.0)*cj4*x804))+(((-1.0)*x813))+((r10*sj4*x799))+x815+((r11*sj4*x802)));
evalcond[2]=(((r21*sj3*x799))+(((-1.0)*r20*x799*x803))+(((-1.0)*x805*x806))+(((-1.0)*r21*x802*x803))+(((-1.0)*x813))+(((-1.0)*r20*sj3*x802))+x815);
evalcond[3]=(((x804*x805))+((r10*x799*x803))+(((-1.0)*x812))+(((0.54)*sj3*x801))+(((-1.0)*pz))+(((-1.0)*r11*sj3*x799))+((r11*x802*x803))+x814);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x816=((1.0)*cj4);
IkReal x817=(r20*sj5);
IkReal x818=((1.0)*sj1*sj4);
IkReal x819=(cj1*cj5*sj4);
IkReal x820=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x816))+((sj1*x820))+(((-1.0)*r12*sj1*x816))+((r21*x819))+((cj1*sj4*x817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x819))+(((-1.0)*x817*x818))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x816))+(((-1.0)*cj5*r21*x818))+((cj1*x820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x816))+((sj1*x820))+(((-1.0)*r12*sj1*x816))+((r21*x819))+((cj1*sj4*x817))))+IKsqr((((r11*x819))+(((-1.0)*x817*x818))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x816))+(((-1.0)*cj5*r21*x818))+((cj1*x820))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x816))+((sj1*x820))+(((-1.0)*r12*sj1*x816))+((r21*x819))+((cj1*sj4*x817))), (((r11*x819))+(((-1.0)*x817*x818))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x816))+(((-1.0)*cj5*r21*x818))+((cj1*x820))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x821=IKsin(j2);
IkReal x822=IKcos(j2);
IkReal x823=((0.15)*sj5);
IkReal x824=((0.15)*cj5);
IkReal x825=(cj5*sj4);
IkReal x826=(cj3*cj4);
IkReal x827=(r20*sj5);
IkReal x828=(cj3*sj4);
IkReal x829=(r10*sj5);
IkReal x830=((1.0)*cj4);
IkReal x831=(cj5*sj3);
IkReal x832=(sj1*x822);
IkReal x833=(cj1*x822);
IkReal x834=((0.54)*x821);
IkReal x835=((1.0)*sj3*sj5);
IkReal x836=(sj1*x821);
IkReal x837=((1.0)*cj1*x821);
evalcond[0]=(((r21*x825))+(((-1.0)*x837))+(((-1.0)*r22*x830))+x832+((sj4*x827)));
evalcond[1]=((((-1.0)*r12*x830))+(((-1.0)*x833))+(((-1.0)*x836))+((r11*x825))+((sj4*x829)));
evalcond[2]=(((r21*x823))+(((0.71)*cj1))+(((-1.0)*r20*x824))+(((-1.0)*pz))+(((-0.54)*x832))+((cj1*x834)));
evalcond[3]=((((-1.0)*py))+(((0.71)*sj1))+(((-1.0)*r10*x824))+(((0.54)*x833))+((r11*x823))+((sj1*x834)));
evalcond[4]=((((-1.0)*r21*x835))+((r20*x831))+((cj5*r21*x826))+((r22*x828))+x836+x833+((x826*x827)));
evalcond[5]=(((r12*x828))+((cj5*r11*x826))+((r10*x831))+(((-1.0)*x837))+(((-1.0)*r11*x835))+x832+((x826*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x838=((1.0)*r10);
IkReal x839=((1.0)*cj4);
IkReal x840=(((cj5*r21*sj4))+(((-1.0)*r22*x839))+((r20*sj4*sj5)));
j3eval[0]=x840;
j3eval[1]=IKsign(x840);
j3eval[2]=((IKabs(((((-1.0)*cj5*x838))+((r11*sj5)))))+(IKabs(((((-1.0)*cj4*sj5*x838))+(((-1.0)*cj5*r11*x839))+(((-1.0)*r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x841=((1.0)*sj5);
IkReal x842=((1.0)*cj5);
IkReal x843=((((-1.0)*r10*sj4*x841))+(((-1.0)*r11*sj4*x842))+((cj4*r12)));
j3eval[0]=x843;
j3eval[1]=IKsign(x843);
j3eval[2]=((IKabs(((((-1.0)*cj4*r21*x842))+(((-1.0)*cj4*r20*x841))+(((-1.0)*r22*sj4)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x842))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x844=cj5*cj5;
IkReal x845=cj4*cj4;
IkReal x846=r00*r00;
IkReal x847=r01*r01;
IkReal x848=r02*r02;
IkReal x849=(r00*sj5);
IkReal x850=((2.0)*cj5*r01);
IkReal x851=(cj4*r02*sj4);
IkReal x852=((1.0)*x845);
IkReal x853=(x844*x846);
IkReal x854=(x844*x847);
IkReal x855=((((-1.0)*x846*x852))+(((-1.0)*x853))+((x845*x853))+(((-1.0)*x852*x854))+(((-1.0)*x850*x851))+(((-2.0)*x849*x851))+((x845*x848))+(((-1.0)*x848))+(((-1.0)*x847))+(((-1.0)*x845*x849*x850))+x854+((x849*x850)));
j3eval[0]=x855;
j3eval[1]=IKsign(x855);
j3eval[2]=((IKabs((((cj4*x849))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x856=cj5*cj5;
IkReal x857=cj4*cj4;
IkReal x858=r00*r00;
IkReal x859=r01*r01;
IkReal x860=r02*r02;
IkReal x861=(r00*sj5);
IkReal x862=((2.0)*cj5*r01);
IkReal x863=(cj4*r02*sj4);
IkReal x864=((1.0)*x857);
IkReal x865=(x856*x858);
IkReal x866=(x856*x859);
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal((((r02*sj4))+((cj4*cj5*r01))+((cj4*x861)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
CheckValue<IkReal> x868=IKPowWithIntegerCheck(IKsign(((((-1.0)*x857*x861*x862))+(((-1.0)*x859))+(((-1.0)*x860))+(((-1.0)*x865))+(((-1.0)*x862*x863))+(((-1.0)*x864*x866))+((x861*x862))+(((-1.0)*x858*x864))+x866+((x857*x865))+((x857*x860))+(((-2.0)*x861*x863)))),-1);
if(!x868.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x867.value)+(((1.5707963267949)*(x868.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x869=IKsin(j3);
IkReal x870=IKcos(j3);
IkReal x871=(cj4*r00);
IkReal x872=(sj5*x869);
IkReal x873=(sj4*x869);
IkReal x874=(sj5*x870);
IkReal x875=(cj4*cj5*x869);
IkReal x876=((1.0)*cj5*x870);
evalcond[0]=(((r21*x874))+((r21*x875))+((cj4*r20*x872))+((r22*x873))+(((-1.0)*r20*x876)));
evalcond[1]=(((r11*x875))+((r11*x874))+((r12*x873))+((cj4*r10*x872))+(((-1.0)*r10*x876)));
evalcond[2]=(((r02*sj4*x870))+(((-1.0)*r01*x872))+((x871*x874))+((cj4*cj5*r01*x870))+((cj5*r00*x869)));
evalcond[3]=((1.0)+((x871*x872))+((r01*x874))+((r01*x875))+(((-1.0)*r00*x876))+((r02*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x877=((0.76056338028169)*sj4);
IkReal x878=((0.211267605633803)*sj5);
IkReal x879=((0.76056338028169)*cj4);
IkReal x880=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r12*x879))+((cj5*r11*x877))+((r11*x878))+((r10*sj5*x877))+(((-1.40845070422535)*py))+(((-1.0)*r10*x880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x877))+((r20*x880))+((r22*x879))+(((-1.0)*cj5*r21*x877))+(((1.40845070422535)*pz))+(((-1.0)*r21*x878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x879))+((cj5*r11*x877))+((r11*x878))+((r10*sj5*x877))+(((-1.40845070422535)*py))+(((-1.0)*r10*x880))))+IKsqr(((((-1.0)*r20*sj5*x877))+((r20*x880))+((r22*x879))+(((-1.0)*cj5*r21*x877))+(((1.40845070422535)*pz))+(((-1.0)*r21*x878))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x879))+((cj5*r11*x877))+((r11*x878))+((r10*sj5*x877))+(((-1.40845070422535)*py))+(((-1.0)*r10*x880))), ((((-1.0)*r20*sj5*x877))+((r20*x880))+((r22*x879))+(((-1.0)*cj5*r21*x877))+(((1.40845070422535)*pz))+(((-1.0)*r21*x878))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x881=(r21*sj5);
IkReal x882=((0.54)*sj3);
IkReal x883=(cj5*r10);
IkReal x884=((0.54)*sj4);
IkReal x885=(cj5*r11);
IkReal x886=(r20*sj5);
IkReal x887=(cj5*r20);
IkReal x888=(cj5*r21);
IkReal x889=((0.54)*cj4);
IkReal x890=(r11*sj5);
IkReal x891=(r10*sj5);
IkReal x892=((0.15)*x887);
IkReal x893=((0.15)*x881);
IkReal x894=((0.71)*(IKcos(j1)));
IkReal x895=((0.15)*x890);
IkReal x896=((0.71)*(IKsin(j1)));
IkReal x897=((0.15)*x883);
IkReal x898=(pz+x892);
IkReal x899=(x894+x893);
IkReal x900=(x896+x897);
evalcond[0]=((((-1.0)*x899))+x898+((r22*x889))+(((-1.0)*x884*x888))+(((-1.0)*x884*x886)));
evalcond[1]=((((-1.0)*x884*x891))+(((-1.0)*x895))+py+x900+(((-1.0)*x884*x885))+((r12*x889)));
evalcond[2]=((((-1.0)*x882*x890))+((cj3*x889*x891))+((x882*x883))+(((-1.0)*x899))+((cj3*r12*x884))+((cj3*x885*x889))+x898);
evalcond[3]=((((-1.0)*x900))+((x882*x887))+((cj3*x888*x889))+((cj3*x886*x889))+(((-1.0)*x881*x882))+(((-1.0)*py))+((cj3*r22*x884))+x895);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x901=(cj1*cj4);
IkReal x902=(r20*sj5);
IkReal x903=(cj4*sj1);
IkReal x904=(cj5*r21);
IkReal x905=(cj1*sj4);
IkReal x906=(cj5*r11);
IkReal x907=(r10*sj5);
IkReal x908=((1.0)*sj1*sj4);
if( IKabs((((x902*x905))+((r12*x903))+(((-1.0)*x907*x908))+(((-1.0)*r22*x901))+((x904*x905))+(((-1.0)*x906*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x902*x908))+((r22*x903))+((r12*x901))+(((-1.0)*x905*x907))+(((-1.0)*x905*x906))+(((-1.0)*x904*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x902*x905))+((r12*x903))+(((-1.0)*x907*x908))+(((-1.0)*r22*x901))+((x904*x905))+(((-1.0)*x906*x908))))+IKsqr(((((-1.0)*x902*x908))+((r22*x903))+((r12*x901))+(((-1.0)*x905*x907))+(((-1.0)*x905*x906))+(((-1.0)*x904*x908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x902*x905))+((r12*x903))+(((-1.0)*x907*x908))+(((-1.0)*r22*x901))+((x904*x905))+(((-1.0)*x906*x908))), ((((-1.0)*x902*x908))+((r22*x903))+((r12*x901))+(((-1.0)*x905*x907))+(((-1.0)*x905*x906))+(((-1.0)*x904*x908))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x909=IKcos(j2);
IkReal x910=IKsin(j2);
IkReal x911=((0.15)*sj5);
IkReal x912=((0.15)*cj5);
IkReal x913=(r10*sj5);
IkReal x914=(cj5*sj4);
IkReal x915=(cj3*cj4);
IkReal x916=(r20*sj5);
IkReal x917=(cj3*sj4);
IkReal x918=((1.0)*cj4);
IkReal x919=(cj5*sj3);
IkReal x920=(cj1*x909);
IkReal x921=(sj1*x910);
IkReal x922=(cj1*x910);
IkReal x923=(sj1*x909);
IkReal x924=((1.0)*sj3*sj5);
IkReal x925=(x920+x921);
evalcond[0]=(((r11*x914))+(((-1.0)*r12*x918))+x925+((sj4*x913)));
evalcond[1]=((((-1.0)*r22*x918))+(((-1.0)*x922))+((r21*x914))+x923+((sj4*x916)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x923))+(((-1.0)*r20*x912))+(((-1.0)*pz))+(((0.54)*x922))+((r21*x911)));
evalcond[3]=((((-0.54)*x920))+(((-0.54)*x921))+(((-0.71)*sj1))+((r11*x911))+(((-1.0)*py))+(((-1.0)*r10*x912)));
evalcond[4]=((((-1.0)*r21*x924))+((r20*x919))+((cj5*r21*x915))+((r22*x917))+((x915*x916))+x925);
evalcond[5]=((((-1.0)*r11*x924))+((r12*x917))+((r10*x919))+(((-1.0)*x923))+((cj5*r11*x915))+((x913*x915))+x922);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x926=((1.0)*sj5);
IkReal x927=((1.0)*cj5);
CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x927))+((r21*sj5)))),IkReal(((((-1.0)*cj4*r20*x926))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x928.valid){
continue;
}
CheckValue<IkReal> x929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x926))+(((-1.0)*r11*sj4*x927))+((cj4*r12)))),-1);
if(!x929.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x928.value)+(((1.5707963267949)*(x929.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x930=IKsin(j3);
IkReal x931=IKcos(j3);
IkReal x932=(cj4*r00);
IkReal x933=(sj5*x930);
IkReal x934=(sj4*x930);
IkReal x935=(sj5*x931);
IkReal x936=(cj4*cj5*x930);
IkReal x937=((1.0)*cj5*x931);
evalcond[0]=(((cj4*r20*x933))+(((-1.0)*r20*x937))+((r22*x934))+((r21*x936))+((r21*x935)));
evalcond[1]=((((-1.0)*r10*x937))+((r11*x936))+((r11*x935))+((cj4*r10*x933))+((r12*x934)));
evalcond[2]=(((cj5*r00*x930))+((cj4*cj5*r01*x931))+(((-1.0)*r01*x933))+((r02*sj4*x931))+((x932*x935)));
evalcond[3]=((1.0)+((r01*x936))+((r01*x935))+(((-1.0)*r00*x937))+((r02*x934))+((x932*x933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x938=((0.76056338028169)*sj4);
IkReal x939=((0.211267605633803)*sj5);
IkReal x940=((0.76056338028169)*cj4);
IkReal x941=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r12*x940))+((r10*sj5*x938))+(((-1.40845070422535)*py))+((cj5*r11*x938))+((r11*x939))+(((-1.0)*r10*x941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x939))+(((-1.0)*cj5*r21*x938))+((r22*x940))+(((-1.0)*r20*sj5*x938))+(((1.40845070422535)*pz))+((r20*x941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x940))+((r10*sj5*x938))+(((-1.40845070422535)*py))+((cj5*r11*x938))+((r11*x939))+(((-1.0)*r10*x941))))+IKsqr(((((-1.0)*r21*x939))+(((-1.0)*cj5*r21*x938))+((r22*x940))+(((-1.0)*r20*sj5*x938))+(((1.40845070422535)*pz))+((r20*x941))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x940))+((r10*sj5*x938))+(((-1.40845070422535)*py))+((cj5*r11*x938))+((r11*x939))+(((-1.0)*r10*x941))), ((((-1.0)*r21*x939))+(((-1.0)*cj5*r21*x938))+((r22*x940))+(((-1.0)*r20*sj5*x938))+(((1.40845070422535)*pz))+((r20*x941))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x942=(r21*sj5);
IkReal x943=((0.54)*sj3);
IkReal x944=(cj5*r10);
IkReal x945=((0.54)*sj4);
IkReal x946=(cj5*r11);
IkReal x947=(r20*sj5);
IkReal x948=(cj5*r20);
IkReal x949=(cj5*r21);
IkReal x950=((0.54)*cj4);
IkReal x951=(r11*sj5);
IkReal x952=(r10*sj5);
IkReal x953=((0.15)*x948);
IkReal x954=((0.15)*x942);
IkReal x955=((0.71)*(IKcos(j1)));
IkReal x956=((0.15)*x951);
IkReal x957=((0.71)*(IKsin(j1)));
IkReal x958=((0.15)*x944);
IkReal x959=(pz+x953);
IkReal x960=(x955+x954);
IkReal x961=(x958+x957);
evalcond[0]=(((r22*x950))+(((-1.0)*x945*x947))+(((-1.0)*x945*x949))+x959+(((-1.0)*x960)));
evalcond[1]=((((-1.0)*x945*x946))+py+((r12*x950))+(((-1.0)*x945*x952))+(((-1.0)*x956))+x961);
evalcond[2]=(((cj3*x950*x952))+(((-1.0)*x943*x951))+((cj3*x946*x950))+((x943*x944))+((cj3*r12*x945))+x959+(((-1.0)*x960)));
evalcond[3]=(((cj3*x947*x950))+(((-1.0)*x942*x943))+((x943*x948))+(((-1.0)*py))+((cj3*r22*x945))+((cj3*x949*x950))+x956+(((-1.0)*x961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x962=(cj1*cj4);
IkReal x963=(r20*sj5);
IkReal x964=(cj4*sj1);
IkReal x965=(cj5*r21);
IkReal x966=(cj1*sj4);
IkReal x967=(cj5*r11);
IkReal x968=(r10*sj5);
IkReal x969=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*r22*x962))+(((-1.0)*x967*x969))+((x965*x966))+((x963*x966))+(((-1.0)*x968*x969))+((r12*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x965*x969))+(((-1.0)*x963*x969))+((r12*x962))+(((-1.0)*x966*x968))+(((-1.0)*x966*x967))+((r22*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x962))+(((-1.0)*x967*x969))+((x965*x966))+((x963*x966))+(((-1.0)*x968*x969))+((r12*x964))))+IKsqr(((((-1.0)*x965*x969))+(((-1.0)*x963*x969))+((r12*x962))+(((-1.0)*x966*x968))+(((-1.0)*x966*x967))+((r22*x964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x962))+(((-1.0)*x967*x969))+((x965*x966))+((x963*x966))+(((-1.0)*x968*x969))+((r12*x964))), ((((-1.0)*x965*x969))+(((-1.0)*x963*x969))+((r12*x962))+(((-1.0)*x966*x968))+(((-1.0)*x966*x967))+((r22*x964))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x970=IKcos(j2);
IkReal x971=IKsin(j2);
IkReal x972=((0.15)*sj5);
IkReal x973=((0.15)*cj5);
IkReal x974=(r10*sj5);
IkReal x975=(cj5*sj4);
IkReal x976=(cj3*cj4);
IkReal x977=(r20*sj5);
IkReal x978=(cj3*sj4);
IkReal x979=((1.0)*cj4);
IkReal x980=(cj5*sj3);
IkReal x981=(cj1*x970);
IkReal x982=(sj1*x971);
IkReal x983=(cj1*x971);
IkReal x984=(sj1*x970);
IkReal x985=((1.0)*sj3*sj5);
IkReal x986=(x981+x982);
evalcond[0]=(((sj4*x974))+((r11*x975))+(((-1.0)*r12*x979))+x986);
evalcond[1]=((((-1.0)*x983))+((r21*x975))+((sj4*x977))+x984+(((-1.0)*r22*x979)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x973))+(((-0.54)*x984))+(((0.54)*x983))+((r21*x972))+(((-1.0)*pz)));
evalcond[3]=((((-0.54)*x981))+(((-0.54)*x982))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x972))+(((-1.0)*r10*x973)));
evalcond[4]=((((-1.0)*r21*x985))+((r22*x978))+((x976*x977))+((cj5*r21*x976))+((r20*x980))+x986);
evalcond[5]=((((-1.0)*x984))+((cj5*r11*x976))+((r12*x978))+((x974*x976))+((r10*x980))+(((-1.0)*r11*x985))+x983);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x987=((1.0)*cj5);
IkReal x988=((1.0)*cj4);
CheckValue<IkReal> x989 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x987))+((r11*sj5)))),IkReal(((((-1.0)*cj4*r11*x987))+(((-1.0)*r10*sj5*x988))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
CheckValue<IkReal> x990=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x988)))),-1);
if(!x990.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x989.value)+(((1.5707963267949)*(x990.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x991=IKsin(j3);
IkReal x992=IKcos(j3);
IkReal x993=(cj4*r00);
IkReal x994=(sj5*x991);
IkReal x995=(sj4*x991);
IkReal x996=(sj5*x992);
IkReal x997=(cj4*cj5*x991);
IkReal x998=((1.0)*cj5*x992);
evalcond[0]=(((cj4*r20*x994))+((r21*x996))+((r21*x997))+((r22*x995))+(((-1.0)*r20*x998)));
evalcond[1]=(((r12*x995))+((cj4*r10*x994))+(((-1.0)*r10*x998))+((r11*x997))+((r11*x996)));
evalcond[2]=(((x993*x996))+((cj5*r00*x991))+((r02*sj4*x992))+(((-1.0)*r01*x994))+((cj4*cj5*r01*x992)));
evalcond[3]=((1.0)+((x993*x994))+((r01*x997))+((r01*x996))+((r02*x995))+(((-1.0)*r00*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x999=((0.76056338028169)*sj4);
IkReal x1000=((0.211267605633803)*sj5);
IkReal x1001=((0.76056338028169)*cj4);
IkReal x1002=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*x1002))+((cj5*r11*x999))+(((-1.40845070422535)*py))+((r10*sj5*x999))+(((-1.0)*r12*x1001))+((r11*x1000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x999))+(((-1.0)*r21*x1000))+(((-1.0)*r20*sj5*x999))+(((1.40845070422535)*pz))+((r20*x1002))+((r22*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1002))+((cj5*r11*x999))+(((-1.40845070422535)*py))+((r10*sj5*x999))+(((-1.0)*r12*x1001))+((r11*x1000))))+IKsqr(((((-1.0)*cj5*r21*x999))+(((-1.0)*r21*x1000))+(((-1.0)*r20*sj5*x999))+(((1.40845070422535)*pz))+((r20*x1002))+((r22*x1001))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x1002))+((cj5*r11*x999))+(((-1.40845070422535)*py))+((r10*sj5*x999))+(((-1.0)*r12*x1001))+((r11*x1000))), ((((-1.0)*cj5*r21*x999))+(((-1.0)*r21*x1000))+(((-1.0)*r20*sj5*x999))+(((1.40845070422535)*pz))+((r20*x1002))+((r22*x1001))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1003=(r21*sj5);
IkReal x1004=((0.54)*sj3);
IkReal x1005=(cj5*r10);
IkReal x1006=((0.54)*sj4);
IkReal x1007=(cj5*r11);
IkReal x1008=(r20*sj5);
IkReal x1009=(cj5*r20);
IkReal x1010=(cj5*r21);
IkReal x1011=((0.54)*cj4);
IkReal x1012=(r11*sj5);
IkReal x1013=(r10*sj5);
IkReal x1014=((0.15)*x1009);
IkReal x1015=((0.15)*x1003);
IkReal x1016=((0.71)*(IKcos(j1)));
IkReal x1017=((0.15)*x1012);
IkReal x1018=((0.71)*(IKsin(j1)));
IkReal x1019=((0.15)*x1005);
IkReal x1020=(x1014+pz);
IkReal x1021=(x1015+x1016);
IkReal x1022=(x1018+x1019);
evalcond[0]=(x1020+((r22*x1011))+(((-1.0)*x1006*x1010))+(((-1.0)*x1006*x1008))+(((-1.0)*x1021)));
evalcond[1]=(x1022+(((-1.0)*x1017))+(((-1.0)*x1006*x1013))+(((-1.0)*x1006*x1007))+py+((r12*x1011)));
evalcond[2]=(x1020+(((-1.0)*x1004*x1012))+(((-1.0)*x1021))+((cj3*r12*x1006))+((x1004*x1005))+((cj3*x1011*x1013))+((cj3*x1007*x1011)));
evalcond[3]=(x1017+((cj3*x1008*x1011))+((cj3*r22*x1006))+(((-1.0)*x1022))+(((-1.0)*py))+((x1004*x1009))+((cj3*x1010*x1011))+(((-1.0)*x1003*x1004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1023=(cj1*cj4);
IkReal x1024=(r20*sj5);
IkReal x1025=(cj4*sj1);
IkReal x1026=(cj5*r21);
IkReal x1027=(cj1*sj4);
IkReal x1028=(cj5*r11);
IkReal x1029=(r10*sj5);
IkReal x1030=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1028*x1030))+(((-1.0)*r22*x1023))+(((-1.0)*x1029*x1030))+((r12*x1025))+((x1026*x1027))+((x1024*x1027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1024*x1030))+(((-1.0)*x1026*x1030))+((r22*x1025))+((r12*x1023))+(((-1.0)*x1027*x1029))+(((-1.0)*x1027*x1028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1028*x1030))+(((-1.0)*r22*x1023))+(((-1.0)*x1029*x1030))+((r12*x1025))+((x1026*x1027))+((x1024*x1027))))+IKsqr(((((-1.0)*x1024*x1030))+(((-1.0)*x1026*x1030))+((r22*x1025))+((r12*x1023))+(((-1.0)*x1027*x1029))+(((-1.0)*x1027*x1028))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1028*x1030))+(((-1.0)*r22*x1023))+(((-1.0)*x1029*x1030))+((r12*x1025))+((x1026*x1027))+((x1024*x1027))), ((((-1.0)*x1024*x1030))+(((-1.0)*x1026*x1030))+((r22*x1025))+((r12*x1023))+(((-1.0)*x1027*x1029))+(((-1.0)*x1027*x1028))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1031=IKcos(j2);
IkReal x1032=IKsin(j2);
IkReal x1033=((0.15)*sj5);
IkReal x1034=((0.15)*cj5);
IkReal x1035=(r10*sj5);
IkReal x1036=(cj5*sj4);
IkReal x1037=(cj3*cj4);
IkReal x1038=(r20*sj5);
IkReal x1039=(cj3*sj4);
IkReal x1040=((1.0)*cj4);
IkReal x1041=(cj5*sj3);
IkReal x1042=(cj1*x1031);
IkReal x1043=(sj1*x1032);
IkReal x1044=(cj1*x1032);
IkReal x1045=(sj1*x1031);
IkReal x1046=((1.0)*sj3*sj5);
IkReal x1047=(x1043+x1042);
evalcond[0]=(((sj4*x1035))+x1047+(((-1.0)*r12*x1040))+((r11*x1036)));
evalcond[1]=(((sj4*x1038))+x1045+(((-1.0)*r22*x1040))+((r21*x1036))+(((-1.0)*x1044)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x1034))+((r21*x1033))+(((-1.0)*pz))+(((0.54)*x1044))+(((-0.54)*x1045)));
evalcond[3]=((((-1.0)*r10*x1034))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1033))+(((-0.54)*x1043))+(((-0.54)*x1042)));
evalcond[4]=(((r22*x1039))+x1047+((r20*x1041))+((cj5*r21*x1037))+((x1037*x1038))+(((-1.0)*r21*x1046)));
evalcond[5]=(x1044+(((-1.0)*r11*x1046))+((r10*x1041))+((cj5*r11*x1037))+(((-1.0)*x1045))+((x1035*x1037))+((r12*x1039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1048=((1.0)*sj4);
IkReal x1049=(cj0*r01);
IkReal x1050=(cj4*sj5);
IkReal x1051=(r11*sj0);
IkReal x1052=((1.0)*cj0*r00);
IkReal x1053=((1.0)*cj4*cj5);
IkReal x1054=((1.0)*r10*sj0);
CheckValue<IkReal> x1055 = IKatan2WithCheck(IkReal((((sj5*x1049))+((sj5*x1051))+(((-1.0)*cj5*x1054))+(((-1.0)*cj5*x1052)))),IkReal(((((-1.0)*cj0*r02*x1048))+(((-1.0)*r12*sj0*x1048))+(((-1.0)*x1050*x1052))+(((-1.0)*x1050*x1054))+(((-1.0)*x1049*x1053))+(((-1.0)*x1051*x1053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1055.valid){
continue;
}
CheckValue<IkReal> x1056=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj5*x1048))+(((-1.0)*cj5*r21*x1048)))),-1);
if(!x1056.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1055.value)+(((1.5707963267949)*(x1056.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1057=IKsin(j3);
IkReal x1058=IKcos(j3);
IkReal x1059=(sj4*x1057);
IkReal x1060=(sj5*x1058);
IkReal x1061=(cj4*cj5*x1057);
IkReal x1062=(cj4*sj5*x1057);
IkReal x1063=((1.0)*cj5*x1058);
evalcond[0]=((((-1.0)*r20*x1063))+((r20*x1062))+((r21*x1060))+((r21*x1061))+((r22*x1059)));
evalcond[1]=(((r12*x1059))+cj0+(((-1.0)*r10*x1063))+((r10*x1062))+((r11*x1061))+((r11*x1060)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1059))+(((-1.0)*r00*x1063))+((r01*x1060))+((r01*x1061))+((r00*x1062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1064=((0.76056338028169)*sj4);
IkReal x1065=((0.211267605633803)*sj5);
IkReal x1066=((0.76056338028169)*cj4);
IkReal x1067=((0.211267605633803)*cj5);
if( IKabs((((r12*x1066))+(((-1.0)*r11*x1065))+(((1.40845070422535)*py))+((r10*x1067))+(((-1.0)*cj5*r11*x1064))+(((-1.0)*r10*sj5*x1064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1065))+((r20*x1067))+(((-1.0)*r20*sj5*x1064))+(((-1.0)*cj5*r21*x1064))+(((1.40845070422535)*pz))+((r22*x1066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1066))+(((-1.0)*r11*x1065))+(((1.40845070422535)*py))+((r10*x1067))+(((-1.0)*cj5*r11*x1064))+(((-1.0)*r10*sj5*x1064))))+IKsqr(((((-1.0)*r21*x1065))+((r20*x1067))+(((-1.0)*r20*sj5*x1064))+(((-1.0)*cj5*r21*x1064))+(((1.40845070422535)*pz))+((r22*x1066))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x1066))+(((-1.0)*r11*x1065))+(((1.40845070422535)*py))+((r10*x1067))+(((-1.0)*cj5*r11*x1064))+(((-1.0)*r10*sj5*x1064))), ((((-1.0)*r21*x1065))+((r20*x1067))+(((-1.0)*r20*sj5*x1064))+(((-1.0)*cj5*r21*x1064))+(((1.40845070422535)*pz))+((r22*x1066))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1068=((1.0)*py);
IkReal x1069=((0.54)*sj5);
IkReal x1070=((0.15)*sj5);
IkReal x1071=(cj5*r10);
IkReal x1072=((0.54)*cj5);
IkReal x1073=(cj3*cj4);
IkReal x1074=((0.54)*r12);
IkReal x1075=(cj3*sj4);
IkReal x1076=((0.54)*r22);
IkReal x1077=((0.71)*(IKsin(j1)));
IkReal x1078=(r11*x1070);
IkReal x1079=((0.15)*x1071);
IkReal x1080=(r21*x1070);
IkReal x1081=((0.71)*(IKcos(j1)));
IkReal x1082=((0.15)*cj5*r20);
IkReal x1083=(x1079+x1068);
IkReal x1084=(x1081+x1080);
IkReal x1085=(x1078+x1077);
evalcond[0]=(x1082+(((-1.0)*r21*sj4*x1072))+pz+((cj4*x1076))+(((-1.0)*x1084))+(((-1.0)*r20*sj4*x1069)));
evalcond[1]=(x1085+((r10*sj4*x1069))+((r11*sj4*x1072))+(((-1.0)*cj4*x1074))+(((-1.0)*x1083)));
evalcond[2]=((((-1.0)*x1075*x1076))+x1085+(((-1.0)*r20*sj3*x1072))+(((-1.0)*r21*x1072*x1073))+((r21*sj3*x1069))+(((-1.0)*x1083))+(((-1.0)*r20*x1069*x1073)));
evalcond[3]=(((x1074*x1075))+x1084+((r11*x1072*x1073))+(((0.54)*sj3*x1071))+(((-1.0)*pz))+(((-1.0)*r11*sj3*x1069))+(((-1.0)*x1082))+((r10*x1069*x1073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1086=((1.0)*cj4);
IkReal x1087=(r20*sj5);
IkReal x1088=((1.0)*sj1*sj4);
IkReal x1089=(cj1*cj5*sj4);
IkReal x1090=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((sj1*x1090))+(((-1.0)*r12*sj1*x1086))+((cj1*sj4*x1087))+(((-1.0)*cj1*r22*x1086))+((r21*x1089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x1086))+((cj1*x1090))+((cj4*r22*sj1))+((r11*x1089))+(((-1.0)*cj5*r21*x1088))+(((-1.0)*x1087*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((sj1*x1090))+(((-1.0)*r12*sj1*x1086))+((cj1*sj4*x1087))+(((-1.0)*cj1*r22*x1086))+((r21*x1089))))+IKsqr(((((-1.0)*cj1*r12*x1086))+((cj1*x1090))+((cj4*r22*sj1))+((r11*x1089))+(((-1.0)*cj5*r21*x1088))+(((-1.0)*x1087*x1088))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((sj1*x1090))+(((-1.0)*r12*sj1*x1086))+((cj1*sj4*x1087))+(((-1.0)*cj1*r22*x1086))+((r21*x1089))), ((((-1.0)*cj1*r12*x1086))+((cj1*x1090))+((cj4*r22*sj1))+((r11*x1089))+(((-1.0)*cj5*r21*x1088))+(((-1.0)*x1087*x1088))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1091=IKsin(j2);
IkReal x1092=IKcos(j2);
IkReal x1093=((0.15)*sj5);
IkReal x1094=((0.15)*cj5);
IkReal x1095=(cj5*sj4);
IkReal x1096=(cj3*cj4);
IkReal x1097=(r20*sj5);
IkReal x1098=(cj3*sj4);
IkReal x1099=(r10*sj5);
IkReal x1100=((1.0)*cj4);
IkReal x1101=(cj5*sj3);
IkReal x1102=(sj1*x1092);
IkReal x1103=(cj1*x1092);
IkReal x1104=((0.54)*x1091);
IkReal x1105=((1.0)*sj3*sj5);
IkReal x1106=(sj1*x1091);
IkReal x1107=((1.0)*cj1*x1091);
evalcond[0]=(x1102+(((-1.0)*r22*x1100))+((r21*x1095))+((sj4*x1097))+(((-1.0)*x1107)));
evalcond[1]=((((-1.0)*r12*x1100))+(((-1.0)*x1103))+(((-1.0)*x1106))+((sj4*x1099))+((r11*x1095)));
evalcond[2]=((((0.71)*cj1))+((r21*x1093))+((cj1*x1104))+(((-1.0)*pz))+(((-0.54)*x1102))+(((-1.0)*r20*x1094)));
evalcond[3]=((((-1.0)*py))+((r11*x1093))+(((-1.0)*r10*x1094))+((sj1*x1104))+(((0.71)*sj1))+(((0.54)*x1103)));
evalcond[4]=(x1106+x1103+((r20*x1101))+((cj5*r21*x1096))+((r22*x1098))+(((-1.0)*r21*x1105))+((x1096*x1097)));
evalcond[5]=((((-1.0)*r11*x1105))+x1102+((cj5*r11*x1096))+((r12*x1098))+((x1096*x1099))+(((-1.0)*x1107))+((r10*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1108=((0.76056338028169)*sj4);
IkReal x1109=((0.211267605633803)*sj5);
IkReal x1110=((0.76056338028169)*cj4);
IkReal x1111=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r12*x1110))+((cj5*r11*x1108))+((r10*sj5*x1108))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1111))+((r11*x1109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1111))+(((-1.0)*r20*sj5*x1108))+(((-1.0)*r21*x1109))+((r22*x1110))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1110))+((cj5*r11*x1108))+((r10*sj5*x1108))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1111))+((r11*x1109))))+IKsqr((((r20*x1111))+(((-1.0)*r20*sj5*x1108))+(((-1.0)*r21*x1109))+((r22*x1110))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1108))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1110))+((cj5*r11*x1108))+((r10*sj5*x1108))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1111))+((r11*x1109))), (((r20*x1111))+(((-1.0)*r20*sj5*x1108))+(((-1.0)*r21*x1109))+((r22*x1110))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1108))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1112=(r21*sj5);
IkReal x1113=((0.54)*sj3);
IkReal x1114=(cj5*r10);
IkReal x1115=((0.54)*sj4);
IkReal x1116=(cj5*r11);
IkReal x1117=(r20*sj5);
IkReal x1118=(cj5*r20);
IkReal x1119=(cj5*r21);
IkReal x1120=((0.54)*cj4);
IkReal x1121=(r11*sj5);
IkReal x1122=(r10*sj5);
IkReal x1123=((0.15)*x1118);
IkReal x1124=((0.15)*x1112);
IkReal x1125=((0.71)*(IKcos(j1)));
IkReal x1126=((0.15)*x1121);
IkReal x1127=((0.71)*(IKsin(j1)));
IkReal x1128=((0.15)*x1114);
IkReal x1129=(x1123+pz);
IkReal x1130=(x1124+x1125);
IkReal x1131=(x1128+x1127);
evalcond[0]=(x1129+((r22*x1120))+(((-1.0)*x1130))+(((-1.0)*x1115*x1117))+(((-1.0)*x1115*x1119)));
evalcond[1]=(x1131+py+(((-1.0)*x1126))+((r12*x1120))+(((-1.0)*x1115*x1122))+(((-1.0)*x1115*x1116)));
evalcond[2]=(x1129+(((-1.0)*x1113*x1121))+((x1113*x1114))+((cj3*x1116*x1120))+(((-1.0)*x1130))+((cj3*r12*x1115))+((cj3*x1120*x1122)));
evalcond[3]=(x1126+((x1113*x1118))+(((-1.0)*x1112*x1113))+((cj3*x1117*x1120))+(((-1.0)*py))+(((-1.0)*x1131))+((cj3*r22*x1115))+((cj3*x1119*x1120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1132=(cj1*cj4);
IkReal x1133=(r20*sj5);
IkReal x1134=(cj4*sj1);
IkReal x1135=(cj5*r21);
IkReal x1136=(cj1*sj4);
IkReal x1137=(cj5*r11);
IkReal x1138=(r10*sj5);
IkReal x1139=((1.0)*sj1*sj4);
if( IKabs((((x1135*x1136))+(((-1.0)*x1138*x1139))+((r12*x1134))+(((-1.0)*x1137*x1139))+((x1133*x1136))+(((-1.0)*r22*x1132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1134))+((r12*x1132))+(((-1.0)*x1135*x1139))+(((-1.0)*x1136*x1138))+(((-1.0)*x1136*x1137))+(((-1.0)*x1133*x1139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1135*x1136))+(((-1.0)*x1138*x1139))+((r12*x1134))+(((-1.0)*x1137*x1139))+((x1133*x1136))+(((-1.0)*r22*x1132))))+IKsqr((((r22*x1134))+((r12*x1132))+(((-1.0)*x1135*x1139))+(((-1.0)*x1136*x1138))+(((-1.0)*x1136*x1137))+(((-1.0)*x1133*x1139))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1135*x1136))+(((-1.0)*x1138*x1139))+((r12*x1134))+(((-1.0)*x1137*x1139))+((x1133*x1136))+(((-1.0)*r22*x1132))), (((r22*x1134))+((r12*x1132))+(((-1.0)*x1135*x1139))+(((-1.0)*x1136*x1138))+(((-1.0)*x1136*x1137))+(((-1.0)*x1133*x1139))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1140=IKcos(j2);
IkReal x1141=IKsin(j2);
IkReal x1142=((0.15)*sj5);
IkReal x1143=((0.15)*cj5);
IkReal x1144=(r10*sj5);
IkReal x1145=(cj5*sj4);
IkReal x1146=(cj3*cj4);
IkReal x1147=(r20*sj5);
IkReal x1148=(cj3*sj4);
IkReal x1149=((1.0)*cj4);
IkReal x1150=(cj5*sj3);
IkReal x1151=(cj1*x1140);
IkReal x1152=(sj1*x1141);
IkReal x1153=(cj1*x1141);
IkReal x1154=(sj1*x1140);
IkReal x1155=((1.0)*sj3*sj5);
IkReal x1156=(x1151+x1152);
evalcond[0]=(((sj4*x1144))+x1156+((r11*x1145))+(((-1.0)*r12*x1149)));
evalcond[1]=(((sj4*x1147))+x1154+(((-1.0)*x1153))+((r21*x1145))+(((-1.0)*r22*x1149)));
evalcond[2]=((((-0.54)*x1154))+(((0.71)*cj1))+(((0.54)*x1153))+(((-1.0)*pz))+(((-1.0)*r20*x1143))+((r21*x1142)));
evalcond[3]=((((-0.54)*x1151))+(((-0.54)*x1152))+((r11*x1142))+(((-0.71)*sj1))+(((-1.0)*r10*x1143))+(((-1.0)*py)));
evalcond[4]=(x1156+((x1146*x1147))+((r22*x1148))+((r20*x1150))+(((-1.0)*r21*x1155))+((cj5*r21*x1146)));
evalcond[5]=(x1153+(((-1.0)*x1154))+(((-1.0)*r11*x1155))+((x1144*x1146))+((cj5*r11*x1146))+((r12*x1148))+((r10*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1157=((0.76056338028169)*sj4);
IkReal x1158=((0.211267605633803)*sj5);
IkReal x1159=((0.76056338028169)*cj4);
IkReal x1160=((0.211267605633803)*cj5);
if( IKabs((((r00*x1160))+(((-1.0)*r01*x1158))+((r02*x1159))+(((-1.0)*cj5*r01*x1157))+(((-1.0)*r00*sj5*x1157))+(((1.40845070422535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1159))+((r20*x1160))+(((-1.0)*r21*x1158))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1157))+(((-1.0)*cj5*r21*x1157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1160))+(((-1.0)*r01*x1158))+((r02*x1159))+(((-1.0)*cj5*r01*x1157))+(((-1.0)*r00*sj5*x1157))+(((1.40845070422535)*px))))+IKsqr((((r22*x1159))+((r20*x1160))+(((-1.0)*r21*x1158))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1157))+(((-1.0)*cj5*r21*x1157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x1160))+(((-1.0)*r01*x1158))+((r02*x1159))+(((-1.0)*cj5*r01*x1157))+(((-1.0)*r00*sj5*x1157))+(((1.40845070422535)*px))), (((r22*x1159))+((r20*x1160))+(((-1.0)*r21*x1158))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1157))+(((-1.0)*cj5*r21*x1157))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1161=((1.0)*px);
IkReal x1162=((0.54)*sj5);
IkReal x1163=((0.15)*sj5);
IkReal x1164=((0.54)*cj5);
IkReal x1165=(cj3*cj4);
IkReal x1166=((0.15)*cj5);
IkReal x1167=((0.54)*r02);
IkReal x1168=(cj3*sj4);
IkReal x1169=((0.54)*r22);
IkReal x1170=(r01*x1163);
IkReal x1171=((0.71)*(IKsin(j1)));
IkReal x1172=(r00*x1166);
IkReal x1173=(r21*x1163);
IkReal x1174=((0.71)*(IKcos(j1)));
IkReal x1175=(r20*x1166);
IkReal x1176=(x1161+x1172);
IkReal x1177=(x1174+x1173);
IkReal x1178=(x1171+x1170);
evalcond[0]=(x1175+((cj4*x1169))+pz+(((-1.0)*r21*sj4*x1164))+(((-1.0)*x1177))+(((-1.0)*r20*sj4*x1162)));
evalcond[1]=((((-1.0)*cj4*x1167))+x1178+((r01*sj4*x1164))+(((-1.0)*x1176))+((r00*sj4*x1162)));
evalcond[2]=(x1178+(((-1.0)*x1168*x1169))+(((-1.0)*r21*x1164*x1165))+(((-1.0)*r20*sj3*x1164))+(((-1.0)*x1176))+((r21*sj3*x1162))+(((-1.0)*r20*x1162*x1165)));
evalcond[3]=(x1177+(((-1.0)*r01*sj3*x1162))+((r00*sj3*x1164))+(((-1.0)*pz))+((r00*x1162*x1165))+(((-1.0)*x1175))+((x1167*x1168))+((r01*x1164*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1179=((1.0)*cj4);
IkReal x1180=(sj1*sj4);
IkReal x1181=(r20*sj5);
IkReal x1182=(cj5*r01);
IkReal x1183=(cj5*r21);
IkReal x1184=(cj1*sj4);
IkReal x1185=(r00*sj5);
if( IKabs((((x1183*x1184))+((x1180*x1185))+((x1180*x1182))+((x1181*x1184))+(((-1.0)*cj1*r22*x1179))+(((-1.0)*r02*sj1*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1184*x1185))+((x1182*x1184))+((cj4*r22*sj1))+(((-1.0)*x1180*x1181))+(((-1.0)*x1180*x1183))+(((-1.0)*cj1*r02*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1183*x1184))+((x1180*x1185))+((x1180*x1182))+((x1181*x1184))+(((-1.0)*cj1*r22*x1179))+(((-1.0)*r02*sj1*x1179))))+IKsqr((((x1184*x1185))+((x1182*x1184))+((cj4*r22*sj1))+(((-1.0)*x1180*x1181))+(((-1.0)*x1180*x1183))+(((-1.0)*cj1*r02*x1179))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1183*x1184))+((x1180*x1185))+((x1180*x1182))+((x1181*x1184))+(((-1.0)*cj1*r22*x1179))+(((-1.0)*r02*sj1*x1179))), (((x1184*x1185))+((x1182*x1184))+((cj4*r22*sj1))+(((-1.0)*x1180*x1181))+(((-1.0)*x1180*x1183))+(((-1.0)*cj1*r02*x1179))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1186=IKsin(j2);
IkReal x1187=IKcos(j2);
IkReal x1188=(cj3*sj4);
IkReal x1189=(r21*sj5);
IkReal x1190=(cj5*sj4);
IkReal x1191=((0.15)*cj5);
IkReal x1192=((1.0)*cj4);
IkReal x1193=(sj4*sj5);
IkReal x1194=((1.0)*sj3);
IkReal x1195=(cj5*sj3);
IkReal x1196=(r01*sj5);
IkReal x1197=(sj1*x1187);
IkReal x1198=(cj1*x1187);
IkReal x1199=(cj3*cj4*sj5);
IkReal x1200=((0.54)*x1186);
IkReal x1201=(sj1*x1186);
IkReal x1202=(cj3*cj4*cj5);
IkReal x1203=((1.0)*cj1*x1186);
evalcond[0]=(x1197+(((-1.0)*r22*x1192))+((r21*x1190))+(((-1.0)*x1203))+((r20*x1193)));
evalcond[1]=(((r01*x1190))+((r00*x1193))+(((-1.0)*x1201))+(((-1.0)*x1198))+(((-1.0)*r02*x1192)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x1197))+((cj1*x1200))+(((-1.0)*pz))+(((0.15)*x1189))+(((-1.0)*r20*x1191)));
evalcond[3]=((((-1.0)*r00*x1191))+(((-1.0)*px))+((sj1*x1200))+(((0.71)*sj1))+(((0.54)*x1198))+(((0.15)*x1196)));
evalcond[4]=(x1198+x1201+(((-1.0)*x1189*x1194))+((r22*x1188))+((r21*x1202))+((r20*x1195))+((r20*x1199)));
evalcond[5]=(x1197+((r00*x1195))+((r00*x1199))+(((-1.0)*x1194*x1196))+((r01*x1202))+((r02*x1188))+(((-1.0)*x1203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1204=((0.76056338028169)*sj4);
IkReal x1205=((0.211267605633803)*sj5);
IkReal x1206=((0.76056338028169)*cj4);
IkReal x1207=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r02*x1206))+((cj5*r01*x1204))+(((-1.0)*r00*x1207))+(((-1.40845070422535)*px))+((r00*sj5*x1204))+((r01*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1204))+((r20*x1207))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1204))+(((-1.0)*r21*x1205))+((r22*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1206))+((cj5*r01*x1204))+(((-1.0)*r00*x1207))+(((-1.40845070422535)*px))+((r00*sj5*x1204))+((r01*x1205))))+IKsqr(((((-1.0)*cj5*r21*x1204))+((r20*x1207))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1204))+(((-1.0)*r21*x1205))+((r22*x1206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x1206))+((cj5*r01*x1204))+(((-1.0)*r00*x1207))+(((-1.40845070422535)*px))+((r00*sj5*x1204))+((r01*x1205))), ((((-1.0)*cj5*r21*x1204))+((r20*x1207))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1204))+(((-1.0)*r21*x1205))+((r22*x1206))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1208=((0.54)*sj5);
IkReal x1209=((0.15)*sj5);
IkReal x1210=((0.54)*cj5);
IkReal x1211=(cj3*cj4);
IkReal x1212=((0.15)*cj5);
IkReal x1213=((0.54)*r02);
IkReal x1214=(cj3*sj4);
IkReal x1215=((0.54)*r22);
IkReal x1216=(r20*x1212);
IkReal x1217=(r21*x1209);
IkReal x1218=((0.71)*(IKcos(j1)));
IkReal x1219=(r01*x1209);
IkReal x1220=((0.71)*(IKsin(j1)));
IkReal x1221=(r00*x1212);
IkReal x1222=(x1216+pz);
IkReal x1223=(x1217+x1218);
IkReal x1224=(x1221+x1220);
evalcond[0]=(x1222+(((-1.0)*r20*sj4*x1208))+(((-1.0)*x1223))+((cj4*x1215))+(((-1.0)*r21*sj4*x1210)));
evalcond[1]=(x1224+(((-1.0)*r00*sj4*x1208))+((cj4*x1213))+(((-1.0)*r01*sj4*x1210))+px+(((-1.0)*x1219)));
evalcond[2]=(((r01*x1210*x1211))+x1222+((x1213*x1214))+(((-1.0)*x1223))+((r00*x1208*x1211))+((r00*sj3*x1210))+(((-1.0)*r01*sj3*x1208)));
evalcond[3]=(((x1214*x1215))+x1219+(((-1.0)*x1224))+((r20*sj3*x1210))+(((-1.0)*px))+(((-1.0)*r21*sj3*x1208))+((r21*x1210*x1211))+((r20*x1208*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1225=(cj4*r22);
IkReal x1226=((1.0)*cj1);
IkReal x1227=(r20*sj5);
IkReal x1228=(cj4*r02);
IkReal x1229=(cj5*r21);
IkReal x1230=(cj1*sj4);
IkReal x1231=(cj5*r01);
IkReal x1232=(r00*sj5);
IkReal x1233=((1.0)*sj1*sj4);
if( IKabs((((sj1*x1228))+(((-1.0)*x1225*x1226))+((x1227*x1230))+(((-1.0)*x1231*x1233))+((x1229*x1230))+(((-1.0)*x1232*x1233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1225))+(((-1.0)*sj4*x1226*x1232))+(((-1.0)*sj4*x1226*x1231))+(((-1.0)*x1227*x1233))+(((-1.0)*x1229*x1233))+((cj1*x1228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1228))+(((-1.0)*x1225*x1226))+((x1227*x1230))+(((-1.0)*x1231*x1233))+((x1229*x1230))+(((-1.0)*x1232*x1233))))+IKsqr((((sj1*x1225))+(((-1.0)*sj4*x1226*x1232))+(((-1.0)*sj4*x1226*x1231))+(((-1.0)*x1227*x1233))+(((-1.0)*x1229*x1233))+((cj1*x1228))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1228))+(((-1.0)*x1225*x1226))+((x1227*x1230))+(((-1.0)*x1231*x1233))+((x1229*x1230))+(((-1.0)*x1232*x1233))), (((sj1*x1225))+(((-1.0)*sj4*x1226*x1232))+(((-1.0)*sj4*x1226*x1231))+(((-1.0)*x1227*x1233))+(((-1.0)*x1229*x1233))+((cj1*x1228))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1234=IKcos(j2);
IkReal x1235=IKsin(j2);
IkReal x1236=(cj3*sj4);
IkReal x1237=(r21*sj5);
IkReal x1238=(cj5*sj4);
IkReal x1239=((0.15)*cj5);
IkReal x1240=((1.0)*cj4);
IkReal x1241=(sj4*sj5);
IkReal x1242=((1.0)*sj3);
IkReal x1243=(cj5*sj3);
IkReal x1244=(r01*sj5);
IkReal x1245=(cj1*x1234);
IkReal x1246=(sj1*x1235);
IkReal x1247=(cj3*cj4*sj5);
IkReal x1248=(cj1*x1235);
IkReal x1249=(sj1*x1234);
IkReal x1250=(cj3*cj4*cj5);
IkReal x1251=(x1245+x1246);
evalcond[0]=((((-1.0)*r02*x1240))+x1251+((r01*x1238))+((r00*x1241)));
evalcond[1]=(x1249+(((-1.0)*x1248))+((r20*x1241))+(((-1.0)*r22*x1240))+((r21*x1238)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1237))+(((0.54)*x1248))+(((-1.0)*r20*x1239))+(((-1.0)*pz))+(((-0.54)*x1249)));
evalcond[3]=((((-1.0)*r00*x1239))+(((0.15)*x1244))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x1246))+(((-0.54)*x1245)));
evalcond[4]=(x1251+((r21*x1250))+((r20*x1247))+((r20*x1243))+((r22*x1236))+(((-1.0)*x1237*x1242)));
evalcond[5]=(x1248+(((-1.0)*x1249))+((r00*x1247))+((r00*x1243))+(((-1.0)*x1242*x1244))+((r02*x1236))+((r01*x1250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1252=(cj5*sj4);
IkReal x1253=(cj0*r01);
IkReal x1254=((0.54)*cj0);
IkReal x1255=(sj4*sj5);
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(cj0,-2);
if(!x1256.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1256.value)*(((((0.54)*x1252*x1253))+(((0.15)*sj5*x1253))+((r00*x1254*x1255))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj4*r02*x1254))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x1252))+(((-0.76056338028169)*r20*x1255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1256.value)*(((((0.54)*x1252*x1253))+(((0.15)*sj5*x1253))+((r00*x1254*x1255))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj4*r02*x1254))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x1252))+(((-0.76056338028169)*r20*x1255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1256.value)*(((((0.54)*x1252*x1253))+(((0.15)*sj5*x1253))+((r00*x1254*x1255))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj4*r02*x1254))+(((-1.0)*cj0*px))))), ((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x1252))+(((-0.76056338028169)*r20*x1255))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1257=IKsin(j1);
IkReal x1258=IKcos(j1);
IkReal x1259=((0.15)*sj5);
IkReal x1260=(r21*sj0);
IkReal x1261=((0.54)*r20);
IkReal x1262=(sj4*sj5);
IkReal x1263=(cj5*sj3);
IkReal x1264=(cj3*cj5);
IkReal x1265=((0.15)*cj5);
IkReal x1266=(r11*sj0);
IkReal x1267=((0.54)*r01);
IkReal x1268=((0.54)*r00);
IkReal x1269=(cj3*sj0);
IkReal x1270=(cj4*sj5);
IkReal x1271=((1.0)*py);
IkReal x1272=(cj0*r21);
IkReal x1273=((0.54)*sj4);
IkReal x1274=((0.54)*r10);
IkReal x1275=(cj0*r11);
IkReal x1276=(cj5*sj4);
IkReal x1277=((1.0)*px);
IkReal x1278=((0.54)*cj4);
IkReal x1279=(cj0*cj3);
IkReal x1280=((1.0)*pz);
IkReal x1281=((0.71)*x1257);
IkReal x1282=(cj0*x1278);
IkReal x1283=((0.54)*sj3*sj5);
IkReal x1284=((0.71)*x1258);
IkReal x1285=(cj0*sj0*x1281);
evalcond[0]=((((-1.0)*x1261*x1262))+(((-1.0)*r21*x1259))+((r22*x1278))+pz+(((-1.0)*x1284))+((r20*x1265))+(((-1.0)*cj5*r21*x1273)));
evalcond[1]=((((-1.0)*r12*sj0*x1278))+(((-1.0)*r10*sj0*x1265))+((sj0*x1262*x1274))+((x1259*x1266))+((cj5*x1266*x1273))+(((-1.0)*sj0*x1271))+((x1281*(sj0*sj0))));
evalcond[2]=((((-1.0)*cj0*x1277))+(((-1.0)*r02*x1282))+((cj0*x1267*x1276))+((cj0*r01*x1259))+(((-1.0)*cj0*r00*x1265))+((x1281*(cj0*cj0)))+((cj0*x1262*x1268)));
evalcond[3]=(((x1259*x1260))+((cj3*x1270*x1274))+((x1263*x1274))+((cj3*r12*x1273))+((sj0*x1284))+(((-1.0)*r20*sj0*x1265))+(((-1.0)*r11*x1283))+(((-1.0)*sj0*x1280))+((r11*x1264*x1278)));
evalcond[4]=(((cj3*x1268*x1270))+((cj3*r02*x1273))+((cj0*x1284))+((x1259*x1272))+(((-1.0)*cj0*r20*x1265))+((cj4*x1264*x1267))+(((-1.0)*sj3*sj5*x1267))+((x1263*x1268))+(((-1.0)*cj0*x1280)));
evalcond[5]=((((-1.0)*r10*x1265))+(((-1.0)*x1260*x1264*x1278))+((r11*x1259))+(((-1.0)*x1271))+((sj0*x1281))+(((-1.0)*sj0*x1261*x1263))+((x1260*x1283))+(((-1.0)*x1261*x1269*x1270))+(((-1.0)*r22*x1269*x1273)));
evalcond[6]=((((-1.0)*x1277))+(((-1.0)*cj0*x1261*x1263))+(((-1.0)*x1264*x1272*x1278))+((cj0*x1281))+(((-1.0)*r22*x1273*x1279))+(((-1.0)*r00*x1265))+(((-1.0)*x1261*x1270*x1279))+((x1272*x1283))+((r01*x1259)));
evalcond[7]=(x1285+((r01*sj0*x1259))+(((-1.0)*r00*sj0*x1265))+(((-1.0)*sj0*x1277))+(((-1.0)*r12*x1282))+((cj0*x1262*x1274))+((cj5*x1273*x1275)));
evalcond[8]=((((-1.0)*cj0*x1271))+x1285+((x1259*x1275))+((sj0*x1262*x1268))+((sj0*x1267*x1276))+(((-1.0)*r02*sj0*x1278))+(((-1.0)*cj0*r10*x1265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1286=((1.0)*cj4);
IkReal x1287=(sj1*sj4);
IkReal x1288=(r20*sj5);
IkReal x1289=(cj5*r01);
IkReal x1290=(cj5*r21);
IkReal x1291=(cj1*sj4);
IkReal x1292=(r00*sj5);
if( IKabs(((((-1.0)*r02*sj1*x1286))+((x1287*x1292))+((x1290*x1291))+((x1288*x1291))+((x1287*x1289))+(((-1.0)*cj1*r22*x1286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1287*x1290))+(((-1.0)*cj1*r02*x1286))+((cj4*r22*sj1))+((x1291*x1292))+(((-1.0)*x1287*x1288))+((x1289*x1291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x1286))+((x1287*x1292))+((x1290*x1291))+((x1288*x1291))+((x1287*x1289))+(((-1.0)*cj1*r22*x1286))))+IKsqr(((((-1.0)*x1287*x1290))+(((-1.0)*cj1*r02*x1286))+((cj4*r22*sj1))+((x1291*x1292))+(((-1.0)*x1287*x1288))+((x1289*x1291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*sj1*x1286))+((x1287*x1292))+((x1290*x1291))+((x1288*x1291))+((x1287*x1289))+(((-1.0)*cj1*r22*x1286))), ((((-1.0)*x1287*x1290))+(((-1.0)*cj1*r02*x1286))+((cj4*r22*sj1))+((x1291*x1292))+(((-1.0)*x1287*x1288))+((x1289*x1291))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1293=IKsin(j2);
IkReal x1294=IKcos(j2);
IkReal x1295=(cj3*sj4);
IkReal x1296=(r21*sj5);
IkReal x1297=(cj5*sj4);
IkReal x1298=((0.15)*cj5);
IkReal x1299=((1.0)*cj4);
IkReal x1300=(sj4*sj5);
IkReal x1301=((1.0)*sj3);
IkReal x1302=(cj5*sj3);
IkReal x1303=(r01*sj5);
IkReal x1304=(sj1*x1294);
IkReal x1305=(cj1*x1294);
IkReal x1306=(cj3*cj4*sj5);
IkReal x1307=((0.54)*x1293);
IkReal x1308=(sj1*x1293);
IkReal x1309=(cj3*cj4*cj5);
IkReal x1310=((1.0)*cj1*x1293);
evalcond[0]=(x1304+((r21*x1297))+(((-1.0)*x1310))+(((-1.0)*r22*x1299))+((r20*x1300)));
evalcond[1]=((((-1.0)*x1308))+(((-1.0)*x1305))+(((-1.0)*r02*x1299))+((r01*x1297))+((r00*x1300)));
evalcond[2]=((((-0.54)*x1304))+(((0.71)*cj1))+(((-1.0)*r20*x1298))+(((-1.0)*pz))+((cj1*x1307))+(((0.15)*x1296)));
evalcond[3]=((((-1.0)*r00*x1298))+(((-1.0)*px))+(((0.15)*x1303))+(((0.71)*sj1))+((sj1*x1307))+(((0.54)*x1305)));
evalcond[4]=(x1305+x1308+((r21*x1309))+(((-1.0)*x1296*x1301))+((r22*x1295))+((r20*x1306))+((r20*x1302)));
evalcond[5]=(x1304+(((-1.0)*x1310))+((r02*x1295))+(((-1.0)*x1301*x1303))+((r01*x1309))+((r00*x1306))+((r00*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1311=(cj4*r22);
IkReal x1312=((1.0)*cj1);
IkReal x1313=(r20*sj5);
IkReal x1314=(cj4*r02);
IkReal x1315=(cj5*r21);
IkReal x1316=(cj1*sj4);
IkReal x1317=(cj5*r01);
IkReal x1318=(r00*sj5);
IkReal x1319=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1311*x1312))+(((-1.0)*x1318*x1319))+(((-1.0)*x1317*x1319))+((x1313*x1316))+((x1315*x1316))+((sj1*x1314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x1312*x1317))+(((-1.0)*sj4*x1312*x1318))+(((-1.0)*x1315*x1319))+(((-1.0)*x1313*x1319))+((cj1*x1314))+((sj1*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1311*x1312))+(((-1.0)*x1318*x1319))+(((-1.0)*x1317*x1319))+((x1313*x1316))+((x1315*x1316))+((sj1*x1314))))+IKsqr(((((-1.0)*sj4*x1312*x1317))+(((-1.0)*sj4*x1312*x1318))+(((-1.0)*x1315*x1319))+(((-1.0)*x1313*x1319))+((cj1*x1314))+((sj1*x1311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1311*x1312))+(((-1.0)*x1318*x1319))+(((-1.0)*x1317*x1319))+((x1313*x1316))+((x1315*x1316))+((sj1*x1314))), ((((-1.0)*sj4*x1312*x1317))+(((-1.0)*sj4*x1312*x1318))+(((-1.0)*x1315*x1319))+(((-1.0)*x1313*x1319))+((cj1*x1314))+((sj1*x1311))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1320=IKcos(j2);
IkReal x1321=IKsin(j2);
IkReal x1322=(cj3*sj4);
IkReal x1323=(r21*sj5);
IkReal x1324=(cj5*sj4);
IkReal x1325=((0.15)*cj5);
IkReal x1326=((1.0)*cj4);
IkReal x1327=(sj4*sj5);
IkReal x1328=((1.0)*sj3);
IkReal x1329=(cj5*sj3);
IkReal x1330=(r01*sj5);
IkReal x1331=(cj1*x1320);
IkReal x1332=(sj1*x1321);
IkReal x1333=(cj3*cj4*sj5);
IkReal x1334=(cj1*x1321);
IkReal x1335=(sj1*x1320);
IkReal x1336=(cj3*cj4*cj5);
IkReal x1337=(x1331+x1332);
evalcond[0]=(x1337+((r01*x1324))+((r00*x1327))+(((-1.0)*r02*x1326)));
evalcond[1]=(x1335+(((-1.0)*r22*x1326))+(((-1.0)*x1334))+((r21*x1324))+((r20*x1327)));
evalcond[2]=((((0.54)*x1334))+(((0.71)*cj1))+(((-0.54)*x1335))+(((-1.0)*pz))+(((-1.0)*r20*x1325))+(((0.15)*x1323)));
evalcond[3]=((((-1.0)*r00*x1325))+(((-0.54)*x1331))+(((-0.54)*x1332))+(((-0.71)*sj1))+(((-1.0)*px))+(((0.15)*x1330)));
evalcond[4]=(x1337+(((-1.0)*x1323*x1328))+((r20*x1333))+((r21*x1336))+((r22*x1322))+((r20*x1329)));
evalcond[5]=(x1334+((r00*x1329))+(((-1.0)*x1335))+(((-1.0)*x1328*x1330))+((r00*x1333))+((r01*x1336))+((r02*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1338=((1.0)*cj4);
IkReal x1339=(r20*sj5);
IkReal x1340=((1.0)*sj1*sj4);
IkReal x1341=(cj1*cj5*sj4);
IkReal x1342=(r10*sj4*sj5);
if( IKabs((((sj1*x1342))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x1338))+(((-1.0)*r12*sj1*x1338))+((r21*x1341))+((cj1*sj4*x1339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1342))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x1340))+(((-1.0)*x1339*x1340))+((r11*x1341))+(((-1.0)*cj1*r12*x1338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1342))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x1338))+(((-1.0)*r12*sj1*x1338))+((r21*x1341))+((cj1*sj4*x1339))))+IKsqr((((cj1*x1342))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x1340))+(((-1.0)*x1339*x1340))+((r11*x1341))+(((-1.0)*cj1*r12*x1338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1342))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x1338))+(((-1.0)*r12*sj1*x1338))+((r21*x1341))+((cj1*sj4*x1339))), (((cj1*x1342))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x1340))+(((-1.0)*x1339*x1340))+((r11*x1341))+(((-1.0)*cj1*r12*x1338))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1343=IKsin(j2);
IkReal x1344=IKcos(j2);
IkReal x1345=((0.15)*sj5);
IkReal x1346=((0.15)*cj5);
IkReal x1347=(cj5*sj4);
IkReal x1348=(cj3*cj4);
IkReal x1349=(r20*sj5);
IkReal x1350=(cj3*sj4);
IkReal x1351=(r10*sj5);
IkReal x1352=((1.0)*cj4);
IkReal x1353=(cj5*sj3);
IkReal x1354=(sj1*x1344);
IkReal x1355=(cj1*x1344);
IkReal x1356=((0.54)*x1343);
IkReal x1357=((1.0)*sj3*sj5);
IkReal x1358=(sj1*x1343);
IkReal x1359=((1.0)*cj1*x1343);
evalcond[0]=(x1354+(((-1.0)*x1359))+((sj4*x1349))+(((-1.0)*r22*x1352))+((r21*x1347)));
evalcond[1]=((((-1.0)*x1355))+(((-1.0)*x1358))+(((-1.0)*r12*x1352))+((sj4*x1351))+((r11*x1347)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x1346))+((cj1*x1356))+(((-1.0)*pz))+((r21*x1345))+(((-0.54)*x1354)));
evalcond[3]=(((sj1*x1356))+(((0.54)*x1355))+(((-1.0)*py))+((r11*x1345))+(((0.71)*sj1))+(((-1.0)*r10*x1346)));
evalcond[4]=(x1358+x1355+((r22*x1350))+(((-1.0)*r21*x1357))+((r20*x1353))+((cj5*r21*x1348))+((x1348*x1349)));
evalcond[5]=(x1354+(((-1.0)*x1359))+((r10*x1353))+(((-1.0)*r11*x1357))+((x1348*x1351))+((r12*x1350))+((cj5*r11*x1348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1360=(cj1*cj4);
IkReal x1361=(r20*sj5);
IkReal x1362=(cj4*sj1);
IkReal x1363=(cj5*r21);
IkReal x1364=(cj1*sj4);
IkReal x1365=(cj5*r11);
IkReal x1366=(r10*sj5);
IkReal x1367=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1366*x1367))+((x1361*x1364))+((x1363*x1364))+(((-1.0)*r22*x1360))+(((-1.0)*x1365*x1367))+((r12*x1362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1362))+((r12*x1360))+(((-1.0)*x1364*x1365))+(((-1.0)*x1364*x1366))+(((-1.0)*x1361*x1367))+(((-1.0)*x1363*x1367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1366*x1367))+((x1361*x1364))+((x1363*x1364))+(((-1.0)*r22*x1360))+(((-1.0)*x1365*x1367))+((r12*x1362))))+IKsqr((((r22*x1362))+((r12*x1360))+(((-1.0)*x1364*x1365))+(((-1.0)*x1364*x1366))+(((-1.0)*x1361*x1367))+(((-1.0)*x1363*x1367))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1366*x1367))+((x1361*x1364))+((x1363*x1364))+(((-1.0)*r22*x1360))+(((-1.0)*x1365*x1367))+((r12*x1362))), (((r22*x1362))+((r12*x1360))+(((-1.0)*x1364*x1365))+(((-1.0)*x1364*x1366))+(((-1.0)*x1361*x1367))+(((-1.0)*x1363*x1367))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1368=IKcos(j2);
IkReal x1369=IKsin(j2);
IkReal x1370=((0.15)*sj5);
IkReal x1371=((0.15)*cj5);
IkReal x1372=(r10*sj5);
IkReal x1373=(cj5*sj4);
IkReal x1374=(cj3*cj4);
IkReal x1375=(r20*sj5);
IkReal x1376=(cj3*sj4);
IkReal x1377=((1.0)*cj4);
IkReal x1378=(cj5*sj3);
IkReal x1379=(cj1*x1368);
IkReal x1380=(sj1*x1369);
IkReal x1381=(cj1*x1369);
IkReal x1382=(sj1*x1368);
IkReal x1383=((1.0)*sj3*sj5);
IkReal x1384=(x1379+x1380);
evalcond[0]=(x1384+((r11*x1373))+(((-1.0)*r12*x1377))+((sj4*x1372)));
evalcond[1]=(x1382+(((-1.0)*r22*x1377))+((r21*x1373))+((sj4*x1375))+(((-1.0)*x1381)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x1371))+(((-1.0)*pz))+((r21*x1370))+(((0.54)*x1381))+(((-0.54)*x1382)));
evalcond[3]=((((-0.54)*x1379))+((r11*x1370))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x1371))+(((-0.54)*x1380)));
evalcond[4]=(x1384+(((-1.0)*r21*x1383))+((cj5*r21*x1374))+((x1374*x1375))+((r22*x1376))+((r20*x1378)));
evalcond[5]=(x1381+(((-1.0)*r11*x1383))+((x1372*x1374))+((cj5*r11*x1374))+((r10*x1378))+((r12*x1376))+(((-1.0)*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1385=(cj5*sj4);
IkReal x1386=((1.0)*sj0);
IkReal x1387=(cj4*r22);
IkReal x1388=(cj1*sj4*sj5);
IkReal x1389=((1.0)*cj4*r12);
IkReal x1390=(sj1*sj4*sj5);
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392 = IKatan2WithCheck(IkReal((((r10*x1390))+(((-1.0)*cj1*x1386*x1387))+((r20*sj0*x1388))+((r11*sj1*x1385))+((cj1*r21*sj0*x1385))+(((-1.0)*sj1*x1389)))),IkReal((((r10*x1388))+((cj1*r11*x1385))+(((-1.0)*r21*sj1*x1385*x1386))+(((-1.0)*r20*x1386*x1390))+(((-1.0)*cj1*x1389))+((sj0*sj1*x1387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1392.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1391.value)))+(x1392.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1393=IKsin(j2);
IkReal x1394=IKcos(j2);
IkReal x1395=(cj3*sj4);
IkReal x1396=(cj0*sj1);
IkReal x1397=((0.15)*sj5);
IkReal x1398=((0.15)*cj5);
IkReal x1399=(cj5*r01);
IkReal x1400=(cj3*cj4);
IkReal x1401=(cj5*sj4);
IkReal x1402=((1.0)*cj0);
IkReal x1403=(r20*sj5);
IkReal x1404=(sj0*sj1);
IkReal x1405=(r10*sj5);
IkReal x1406=((1.0)*cj4);
IkReal x1407=(cj5*sj3);
IkReal x1408=(r00*sj5);
IkReal x1409=(cj1*x1394);
IkReal x1410=((0.54)*x1393);
IkReal x1411=((1.0)*x1393);
IkReal x1412=((1.0)*sj3*sj5);
IkReal x1413=(sj1*x1394);
IkReal x1414=(sj0*x1411);
evalcond[0]=((((-1.0)*cj1*x1411))+(((-1.0)*r22*x1406))+((r21*x1401))+x1413+((sj4*x1403)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*r20*x1398))+((r21*x1397))+(((-1.0)*pz))+((cj1*x1410))+(((-0.54)*x1413)));
evalcond[2]=(((sj4*x1399))+(((-1.0)*r02*x1406))+(((-1.0)*x1402*x1409))+((sj4*x1408))+(((-1.0)*x1396*x1411)));
evalcond[3]=((((-1.0)*sj0*x1409))+(((-1.0)*r12*x1406))+((r11*x1401))+(((-1.0)*x1404*x1411))+((sj4*x1405)));
evalcond[4]=((((-1.0)*px))+(((-1.0)*r00*x1398))+((x1396*x1410))+((r01*x1397))+(((0.71)*x1396))+(((0.54)*cj0*x1409)));
evalcond[5]=((((0.54)*sj0*x1409))+(((-1.0)*r10*x1398))+(((-1.0)*py))+((x1404*x1410))+((r11*x1397))+(((0.71)*x1404)));
evalcond[6]=(((r20*x1407))+((sj1*x1393))+x1409+((cj5*r21*x1400))+((r22*x1395))+(((-1.0)*r21*x1412))+((x1400*x1403)));
evalcond[7]=((((-1.0)*cj1*x1393*x1402))+((x1394*x1396))+((r00*x1407))+((x1399*x1400))+(((-1.0)*r01*x1412))+((r02*x1395))+((x1400*x1408)));
evalcond[8]=(((cj5*r11*x1400))+(((-1.0)*cj1*x1414))+((x1394*x1404))+(((-1.0)*r11*x1412))+((r12*x1395))+((r10*x1407))+((x1400*x1405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1415=(sj1*sj4);
IkReal x1416=(cj5*r01);
IkReal x1417=((1.0)*cj0);
IkReal x1418=(r20*sj5);
IkReal x1419=(cj4*r22);
IkReal x1420=(r00*sj5);
IkReal x1421=(cj1*sj4);
IkReal x1422=(cj5*r21);
IkReal x1423=((1.0)*cj4*r02);
CheckValue<IkReal> x1424 = IKatan2WithCheck(IkReal((((x1415*x1416))+((x1415*x1420))+(((-1.0)*cj1*x1417*x1419))+((cj0*x1421*x1422))+(((-1.0)*sj1*x1423))+((cj0*x1418*x1421)))),IkReal((((x1420*x1421))+(((-1.0)*x1415*x1417*x1422))+((cj0*sj1*x1419))+(((-1.0)*cj1*x1423))+(((-1.0)*x1415*x1417*x1418))+((x1416*x1421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1424.valid){
continue;
}
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1425.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1424.value)+(((1.5707963267949)*(x1425.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1426=IKsin(j2);
IkReal x1427=IKcos(j2);
IkReal x1428=(cj3*sj4);
IkReal x1429=(cj0*sj1);
IkReal x1430=((0.15)*sj5);
IkReal x1431=((0.15)*cj5);
IkReal x1432=(cj5*r01);
IkReal x1433=(cj3*cj4);
IkReal x1434=(cj5*sj4);
IkReal x1435=((1.0)*cj0);
IkReal x1436=(r20*sj5);
IkReal x1437=(sj0*sj1);
IkReal x1438=(r10*sj5);
IkReal x1439=((1.0)*cj4);
IkReal x1440=(cj5*sj3);
IkReal x1441=(r00*sj5);
IkReal x1442=(cj1*x1427);
IkReal x1443=((0.54)*x1426);
IkReal x1444=((1.0)*x1426);
IkReal x1445=((1.0)*sj3*sj5);
IkReal x1446=(sj1*x1427);
IkReal x1447=(sj0*x1444);
evalcond[0]=((((-1.0)*r22*x1439))+((r21*x1434))+(((-1.0)*cj1*x1444))+x1446+((sj4*x1436)));
evalcond[1]=((((0.71)*cj1))+((cj1*x1443))+(((-0.54)*x1446))+(((-1.0)*pz))+((r21*x1430))+(((-1.0)*r20*x1431)));
evalcond[2]=(((sj4*x1441))+(((-1.0)*r02*x1439))+(((-1.0)*x1435*x1442))+(((-1.0)*x1429*x1444))+((sj4*x1432)));
evalcond[3]=((((-1.0)*r12*x1439))+(((-1.0)*x1437*x1444))+((r11*x1434))+(((-1.0)*sj0*x1442))+((sj4*x1438)));
evalcond[4]=((((0.54)*cj0*x1442))+(((0.71)*x1429))+(((-1.0)*px))+(((-1.0)*r00*x1431))+((r01*x1430))+((x1429*x1443)));
evalcond[5]=(((x1437*x1443))+(((0.54)*sj0*x1442))+(((-1.0)*py))+((r11*x1430))+(((-1.0)*r10*x1431))+(((0.71)*x1437)));
evalcond[6]=(((sj1*x1426))+(((-1.0)*r21*x1445))+((x1433*x1436))+((r22*x1428))+x1442+((r20*x1440))+((cj5*r21*x1433)));
evalcond[7]=(((x1432*x1433))+(((-1.0)*r01*x1445))+((x1433*x1441))+((r02*x1428))+(((-1.0)*cj1*x1426*x1435))+((r00*x1440))+((x1427*x1429)));
evalcond[8]=(((r10*x1440))+((x1433*x1438))+((cj5*r11*x1433))+((x1427*x1437))+(((-1.0)*r11*x1445))+(((-1.0)*cj1*x1447))+((r12*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1448=(cj5*sj4);
IkReal x1449=((0.54)*sj0);
IkReal x1450=(sj4*sj5);
IkReal x1451=((0.15)*sj0);
CheckValue<IkReal> x1452=IKPowWithIntegerCheck(sj0,-2);
if(!x1452.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1452.value)*(((((-1.0)*cj4*r12*x1449))+(((-1.0)*cj5*r10*x1451))+((r11*x1448*x1449))+(((-1.0)*py*sj0))+((r11*sj5*x1451))+((r10*x1449*x1450)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r20*x1450))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x1448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1452.value)*(((((-1.0)*cj4*r12*x1449))+(((-1.0)*cj5*r10*x1451))+((r11*x1448*x1449))+(((-1.0)*py*sj0))+((r11*sj5*x1451))+((r10*x1449*x1450))))))+IKsqr(((((-0.76056338028169)*r20*x1450))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x1448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1452.value)*(((((-1.0)*cj4*r12*x1449))+(((-1.0)*cj5*r10*x1451))+((r11*x1448*x1449))+(((-1.0)*py*sj0))+((r11*sj5*x1451))+((r10*x1449*x1450))))), ((((-0.76056338028169)*r20*x1450))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x1448))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1453=IKsin(j1);
IkReal x1454=IKcos(j1);
IkReal x1455=((0.15)*sj5);
IkReal x1456=(r21*sj0);
IkReal x1457=((0.54)*r20);
IkReal x1458=(sj4*sj5);
IkReal x1459=(cj5*sj3);
IkReal x1460=(cj3*cj5);
IkReal x1461=((0.15)*cj5);
IkReal x1462=(r11*sj0);
IkReal x1463=((0.54)*r01);
IkReal x1464=((0.54)*r00);
IkReal x1465=(cj3*sj0);
IkReal x1466=(cj4*sj5);
IkReal x1467=((1.0)*py);
IkReal x1468=(cj0*r21);
IkReal x1469=((0.54)*sj4);
IkReal x1470=((0.54)*r10);
IkReal x1471=(cj0*r11);
IkReal x1472=(cj5*sj4);
IkReal x1473=((1.0)*px);
IkReal x1474=((0.54)*cj4);
IkReal x1475=(cj0*cj3);
IkReal x1476=((1.0)*pz);
IkReal x1477=((0.71)*x1453);
IkReal x1478=(cj0*x1474);
IkReal x1479=((0.54)*sj3*sj5);
IkReal x1480=((0.71)*x1454);
IkReal x1481=(cj0*sj0*x1477);
evalcond[0]=((((-1.0)*x1457*x1458))+(((-1.0)*cj5*r21*x1469))+(((-1.0)*x1480))+((r22*x1474))+((r20*x1461))+pz+(((-1.0)*r21*x1455)));
evalcond[1]=(((sj0*x1458*x1470))+(((-1.0)*r12*sj0*x1474))+((cj5*x1462*x1469))+((x1477*(sj0*sj0)))+(((-1.0)*sj0*x1467))+((x1455*x1462))+(((-1.0)*r10*sj0*x1461)));
evalcond[2]=((((-1.0)*cj0*x1473))+((cj0*r01*x1455))+((x1477*(cj0*cj0)))+(((-1.0)*cj0*r00*x1461))+((cj0*x1458*x1464))+(((-1.0)*r02*x1478))+((cj0*x1463*x1472)));
evalcond[3]=(((x1455*x1456))+((r11*x1460*x1474))+((sj0*x1480))+((cj3*r12*x1469))+(((-1.0)*r11*x1479))+((cj3*x1466*x1470))+(((-1.0)*sj0*x1476))+(((-1.0)*r20*sj0*x1461))+((x1459*x1470)));
evalcond[4]=((((-1.0)*cj0*x1476))+((x1459*x1464))+(((-1.0)*sj3*sj5*x1463))+((x1455*x1468))+((cj3*r02*x1469))+((cj3*x1464*x1466))+((cj4*x1460*x1463))+((cj0*x1480))+(((-1.0)*cj0*r20*x1461)));
evalcond[5]=(((x1456*x1479))+((sj0*x1477))+(((-1.0)*x1457*x1465*x1466))+(((-1.0)*x1467))+((r11*x1455))+(((-1.0)*sj0*x1457*x1459))+(((-1.0)*r22*x1465*x1469))+(((-1.0)*x1456*x1460*x1474))+(((-1.0)*r10*x1461)));
evalcond[6]=((((-1.0)*cj0*x1457*x1459))+(((-1.0)*r22*x1469*x1475))+(((-1.0)*r00*x1461))+((r01*x1455))+(((-1.0)*x1473))+((cj0*x1477))+(((-1.0)*x1460*x1468*x1474))+((x1468*x1479))+(((-1.0)*x1457*x1466*x1475)));
evalcond[7]=(((cj5*x1469*x1471))+(((-1.0)*r12*x1478))+x1481+(((-1.0)*sj0*x1473))+((r01*sj0*x1455))+(((-1.0)*r00*sj0*x1461))+((cj0*x1458*x1470)));
evalcond[8]=((((-1.0)*cj0*r10*x1461))+((sj0*x1458*x1464))+((sj0*x1463*x1472))+(((-1.0)*cj0*x1467))+x1481+(((-1.0)*r02*sj0*x1474))+((x1455*x1471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1482=((1.0)*cj4);
IkReal x1483=(sj1*sj4);
IkReal x1484=(r20*sj5);
IkReal x1485=(cj5*r01);
IkReal x1486=(cj5*r21);
IkReal x1487=(cj1*sj4);
IkReal x1488=(r00*sj5);
if( IKabs((((x1486*x1487))+((x1483*x1485))+((x1483*x1488))+(((-1.0)*cj1*r22*x1482))+((x1484*x1487))+(((-1.0)*r02*sj1*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1483*x1484))+(((-1.0)*x1483*x1486))+((x1487*x1488))+((cj4*r22*sj1))+((x1485*x1487))+(((-1.0)*cj1*r02*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1486*x1487))+((x1483*x1485))+((x1483*x1488))+(((-1.0)*cj1*r22*x1482))+((x1484*x1487))+(((-1.0)*r02*sj1*x1482))))+IKsqr(((((-1.0)*x1483*x1484))+(((-1.0)*x1483*x1486))+((x1487*x1488))+((cj4*r22*sj1))+((x1485*x1487))+(((-1.0)*cj1*r02*x1482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1486*x1487))+((x1483*x1485))+((x1483*x1488))+(((-1.0)*cj1*r22*x1482))+((x1484*x1487))+(((-1.0)*r02*sj1*x1482))), ((((-1.0)*x1483*x1484))+(((-1.0)*x1483*x1486))+((x1487*x1488))+((cj4*r22*sj1))+((x1485*x1487))+(((-1.0)*cj1*r02*x1482))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1489=IKsin(j2);
IkReal x1490=IKcos(j2);
IkReal x1491=(cj3*sj4);
IkReal x1492=(r21*sj5);
IkReal x1493=(cj5*sj4);
IkReal x1494=((0.15)*cj5);
IkReal x1495=((1.0)*cj4);
IkReal x1496=(sj4*sj5);
IkReal x1497=((1.0)*sj3);
IkReal x1498=(cj5*sj3);
IkReal x1499=(r01*sj5);
IkReal x1500=(sj1*x1490);
IkReal x1501=(cj1*x1490);
IkReal x1502=(cj3*cj4*sj5);
IkReal x1503=((0.54)*x1489);
IkReal x1504=(sj1*x1489);
IkReal x1505=(cj3*cj4*cj5);
IkReal x1506=((1.0)*cj1*x1489);
evalcond[0]=((((-1.0)*x1506))+((r20*x1496))+((r21*x1493))+x1500+(((-1.0)*r22*x1495)));
evalcond[1]=(((r00*x1496))+(((-1.0)*x1501))+(((-1.0)*x1504))+((r01*x1493))+(((-1.0)*r02*x1495)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1492))+(((-1.0)*r20*x1494))+((cj1*x1503))+(((-1.0)*pz))+(((-0.54)*x1500)));
evalcond[3]=((((0.15)*x1499))+(((-1.0)*r00*x1494))+((sj1*x1503))+(((-1.0)*px))+(((0.71)*sj1))+(((0.54)*x1501)));
evalcond[4]=(((r20*x1498))+((r20*x1502))+(((-1.0)*x1492*x1497))+x1501+x1504+((r21*x1505))+((r22*x1491)));
evalcond[5]=((((-1.0)*x1506))+((r00*x1498))+((r01*x1505))+(((-1.0)*x1497*x1499))+((r00*x1502))+x1500+((r02*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1507=(cj4*r22);
IkReal x1508=((1.0)*cj1);
IkReal x1509=(r20*sj5);
IkReal x1510=(cj4*r02);
IkReal x1511=(cj5*r21);
IkReal x1512=(cj1*sj4);
IkReal x1513=(cj5*r01);
IkReal x1514=(r00*sj5);
IkReal x1515=((1.0)*sj1*sj4);
if( IKabs((((x1509*x1512))+(((-1.0)*x1507*x1508))+(((-1.0)*x1513*x1515))+((sj1*x1510))+(((-1.0)*x1514*x1515))+((x1511*x1512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1510))+((sj1*x1507))+(((-1.0)*sj4*x1508*x1513))+(((-1.0)*sj4*x1508*x1514))+(((-1.0)*x1509*x1515))+(((-1.0)*x1511*x1515)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1509*x1512))+(((-1.0)*x1507*x1508))+(((-1.0)*x1513*x1515))+((sj1*x1510))+(((-1.0)*x1514*x1515))+((x1511*x1512))))+IKsqr((((cj1*x1510))+((sj1*x1507))+(((-1.0)*sj4*x1508*x1513))+(((-1.0)*sj4*x1508*x1514))+(((-1.0)*x1509*x1515))+(((-1.0)*x1511*x1515))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1509*x1512))+(((-1.0)*x1507*x1508))+(((-1.0)*x1513*x1515))+((sj1*x1510))+(((-1.0)*x1514*x1515))+((x1511*x1512))), (((cj1*x1510))+((sj1*x1507))+(((-1.0)*sj4*x1508*x1513))+(((-1.0)*sj4*x1508*x1514))+(((-1.0)*x1509*x1515))+(((-1.0)*x1511*x1515))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1516=IKcos(j2);
IkReal x1517=IKsin(j2);
IkReal x1518=(cj3*sj4);
IkReal x1519=(r21*sj5);
IkReal x1520=(cj5*sj4);
IkReal x1521=((0.15)*cj5);
IkReal x1522=((1.0)*cj4);
IkReal x1523=(sj4*sj5);
IkReal x1524=((1.0)*sj3);
IkReal x1525=(cj5*sj3);
IkReal x1526=(r01*sj5);
IkReal x1527=(cj1*x1516);
IkReal x1528=(sj1*x1517);
IkReal x1529=(cj3*cj4*sj5);
IkReal x1530=(cj1*x1517);
IkReal x1531=(sj1*x1516);
IkReal x1532=(cj3*cj4*cj5);
IkReal x1533=(x1527+x1528);
evalcond[0]=(((r00*x1523))+((r01*x1520))+(((-1.0)*r02*x1522))+x1533);
evalcond[1]=((((-1.0)*x1530))+(((-1.0)*r22*x1522))+((r20*x1523))+x1531+((r21*x1520)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*pz))+(((-0.54)*x1531))+(((0.15)*x1519))+(((-1.0)*r20*x1521))+(((0.54)*x1530)));
evalcond[3]=((((-1.0)*r00*x1521))+(((0.15)*x1526))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x1528))+(((-0.54)*x1527)));
evalcond[4]=((((-1.0)*x1519*x1524))+((r20*x1525))+((r20*x1529))+((r21*x1532))+x1533+((r22*x1518)));
evalcond[5]=((((-1.0)*x1531))+(((-1.0)*x1524*x1526))+((r00*x1529))+((r00*x1525))+((r01*x1532))+x1530+((r02*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1534=((1.0)*cj4);
IkReal x1535=(r20*sj5);
IkReal x1536=((1.0)*sj1*sj4);
IkReal x1537=(cj1*cj5*sj4);
IkReal x1538=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((sj1*x1538))+((r21*x1537))+((cj1*sj4*x1535))+(((-1.0)*cj1*r22*x1534))+(((-1.0)*r12*sj1*x1534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1537))+((cj1*x1538))+((cj4*r22*sj1))+(((-1.0)*x1535*x1536))+(((-1.0)*cj5*r21*x1536))+(((-1.0)*cj1*r12*x1534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((sj1*x1538))+((r21*x1537))+((cj1*sj4*x1535))+(((-1.0)*cj1*r22*x1534))+(((-1.0)*r12*sj1*x1534))))+IKsqr((((r11*x1537))+((cj1*x1538))+((cj4*r22*sj1))+(((-1.0)*x1535*x1536))+(((-1.0)*cj5*r21*x1536))+(((-1.0)*cj1*r12*x1534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((sj1*x1538))+((r21*x1537))+((cj1*sj4*x1535))+(((-1.0)*cj1*r22*x1534))+(((-1.0)*r12*sj1*x1534))), (((r11*x1537))+((cj1*x1538))+((cj4*r22*sj1))+(((-1.0)*x1535*x1536))+(((-1.0)*cj5*r21*x1536))+(((-1.0)*cj1*r12*x1534))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1539=IKsin(j2);
IkReal x1540=IKcos(j2);
IkReal x1541=((0.15)*sj5);
IkReal x1542=((0.15)*cj5);
IkReal x1543=(cj5*sj4);
IkReal x1544=(cj3*cj4);
IkReal x1545=(r20*sj5);
IkReal x1546=(cj3*sj4);
IkReal x1547=(r10*sj5);
IkReal x1548=((1.0)*cj4);
IkReal x1549=(cj5*sj3);
IkReal x1550=(sj1*x1540);
IkReal x1551=(cj1*x1540);
IkReal x1552=((0.54)*x1539);
IkReal x1553=((1.0)*sj3*sj5);
IkReal x1554=(sj1*x1539);
IkReal x1555=((1.0)*cj1*x1539);
evalcond[0]=((((-1.0)*r22*x1548))+((sj4*x1545))+x1550+((r21*x1543))+(((-1.0)*x1555)));
evalcond[1]=((((-1.0)*x1554))+(((-1.0)*x1551))+((sj4*x1547))+((r11*x1543))+(((-1.0)*r12*x1548)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1552))+(((-1.0)*pz))+(((-0.54)*x1550))+((r21*x1541))+(((-1.0)*r20*x1542)));
evalcond[3]=((((-1.0)*py))+((r11*x1541))+((sj1*x1552))+(((-1.0)*r10*x1542))+(((0.71)*sj1))+(((0.54)*x1551)));
evalcond[4]=(((x1544*x1545))+x1551+x1554+((cj5*r21*x1544))+((r22*x1546))+(((-1.0)*r21*x1553))+((r20*x1549)));
evalcond[5]=(((x1544*x1547))+((r12*x1546))+((cj5*r11*x1544))+x1550+(((-1.0)*r11*x1553))+(((-1.0)*x1555))+((r10*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1556=(cj1*cj4);
IkReal x1557=(r20*sj5);
IkReal x1558=(cj4*sj1);
IkReal x1559=(cj5*r21);
IkReal x1560=(cj1*sj4);
IkReal x1561=(cj5*r11);
IkReal x1562=(r10*sj5);
IkReal x1563=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*r22*x1556))+(((-1.0)*x1562*x1563))+((r12*x1558))+((x1557*x1560))+((x1559*x1560))+(((-1.0)*x1561*x1563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1559*x1563))+(((-1.0)*x1557*x1563))+((r22*x1558))+((r12*x1556))+(((-1.0)*x1560*x1561))+(((-1.0)*x1560*x1562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1556))+(((-1.0)*x1562*x1563))+((r12*x1558))+((x1557*x1560))+((x1559*x1560))+(((-1.0)*x1561*x1563))))+IKsqr(((((-1.0)*x1559*x1563))+(((-1.0)*x1557*x1563))+((r22*x1558))+((r12*x1556))+(((-1.0)*x1560*x1561))+(((-1.0)*x1560*x1562))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1556))+(((-1.0)*x1562*x1563))+((r12*x1558))+((x1557*x1560))+((x1559*x1560))+(((-1.0)*x1561*x1563))), ((((-1.0)*x1559*x1563))+(((-1.0)*x1557*x1563))+((r22*x1558))+((r12*x1556))+(((-1.0)*x1560*x1561))+(((-1.0)*x1560*x1562))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1564=IKcos(j2);
IkReal x1565=IKsin(j2);
IkReal x1566=((0.15)*sj5);
IkReal x1567=((0.15)*cj5);
IkReal x1568=(r10*sj5);
IkReal x1569=(cj5*sj4);
IkReal x1570=(cj3*cj4);
IkReal x1571=(r20*sj5);
IkReal x1572=(cj3*sj4);
IkReal x1573=((1.0)*cj4);
IkReal x1574=(cj5*sj3);
IkReal x1575=(cj1*x1564);
IkReal x1576=(sj1*x1565);
IkReal x1577=(cj1*x1565);
IkReal x1578=(sj1*x1564);
IkReal x1579=((1.0)*sj3*sj5);
IkReal x1580=(x1576+x1575);
evalcond[0]=(((sj4*x1568))+((r11*x1569))+x1580+(((-1.0)*r12*x1573)));
evalcond[1]=((((-1.0)*r22*x1573))+((sj4*x1571))+x1578+((r21*x1569))+(((-1.0)*x1577)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x1578))+(((-1.0)*r20*x1567))+(((-1.0)*pz))+((r21*x1566))+(((0.54)*x1577)));
evalcond[3]=((((-0.54)*x1576))+(((-0.54)*x1575))+(((-0.71)*sj1))+((r11*x1566))+(((-1.0)*py))+(((-1.0)*r10*x1567)));
evalcond[4]=(((r20*x1574))+((x1570*x1571))+(((-1.0)*r21*x1579))+x1580+((cj5*r21*x1570))+((r22*x1572)));
evalcond[5]=(((r12*x1572))+((cj5*r11*x1570))+((x1568*x1570))+x1577+(((-1.0)*r11*x1579))+((r10*x1574))+(((-1.0)*x1578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1581=(cj5*sj4);
IkReal x1582=((1.0)*sj0);
IkReal x1583=(cj4*r22);
IkReal x1584=(cj1*sj4*sj5);
IkReal x1585=((1.0)*cj4*r12);
IkReal x1586=(sj1*sj4*sj5);
CheckValue<IkReal> x1587=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1587.valid){
continue;
}
CheckValue<IkReal> x1588 = IKatan2WithCheck(IkReal((((r20*sj0*x1584))+((cj1*r21*sj0*x1581))+(((-1.0)*cj1*x1582*x1583))+((r10*x1586))+(((-1.0)*sj1*x1585))+((r11*sj1*x1581)))),IkReal(((((-1.0)*r20*x1582*x1586))+(((-1.0)*r21*sj1*x1581*x1582))+(((-1.0)*cj1*x1585))+((sj0*sj1*x1583))+((cj1*r11*x1581))+((r10*x1584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1588.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1587.value)))+(x1588.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1589=IKsin(j2);
IkReal x1590=IKcos(j2);
IkReal x1591=(cj3*sj4);
IkReal x1592=(cj0*sj1);
IkReal x1593=((0.15)*sj5);
IkReal x1594=((0.15)*cj5);
IkReal x1595=(cj5*r01);
IkReal x1596=(cj3*cj4);
IkReal x1597=(cj5*sj4);
IkReal x1598=((1.0)*cj0);
IkReal x1599=(r20*sj5);
IkReal x1600=(sj0*sj1);
IkReal x1601=(r10*sj5);
IkReal x1602=((1.0)*cj4);
IkReal x1603=(cj5*sj3);
IkReal x1604=(r00*sj5);
IkReal x1605=(cj1*x1590);
IkReal x1606=((0.54)*x1589);
IkReal x1607=((1.0)*x1589);
IkReal x1608=((1.0)*sj3*sj5);
IkReal x1609=(sj1*x1590);
IkReal x1610=(sj0*x1607);
evalcond[0]=((((-1.0)*cj1*x1607))+x1609+((sj4*x1599))+(((-1.0)*r22*x1602))+((r21*x1597)));
evalcond[1]=((((0.71)*cj1))+((cj1*x1606))+(((-1.0)*pz))+(((-0.54)*x1609))+(((-1.0)*r20*x1594))+((r21*x1593)));
evalcond[2]=((((-1.0)*x1592*x1607))+((sj4*x1595))+((sj4*x1604))+(((-1.0)*r02*x1602))+(((-1.0)*x1598*x1605)));
evalcond[3]=(((r11*x1597))+((sj4*x1601))+(((-1.0)*x1600*x1607))+(((-1.0)*r12*x1602))+(((-1.0)*sj0*x1605)));
evalcond[4]=(((r01*x1593))+(((0.71)*x1592))+(((-1.0)*r00*x1594))+(((-1.0)*px))+((x1592*x1606))+(((0.54)*cj0*x1605)));
evalcond[5]=(((x1600*x1606))+(((0.71)*x1600))+((r11*x1593))+(((-1.0)*py))+(((0.54)*sj0*x1605))+(((-1.0)*r10*x1594)));
evalcond[6]=(((x1596*x1599))+x1605+(((-1.0)*r21*x1608))+((cj5*r21*x1596))+((r22*x1591))+((sj1*x1589))+((r20*x1603)));
evalcond[7]=(((x1590*x1592))+((r00*x1603))+(((-1.0)*cj1*x1589*x1598))+(((-1.0)*r01*x1608))+((r02*x1591))+((x1595*x1596))+((x1596*x1604)));
evalcond[8]=(((cj5*r11*x1596))+((r12*x1591))+((x1590*x1600))+((x1596*x1601))+((r10*x1603))+(((-1.0)*cj1*x1610))+(((-1.0)*r11*x1608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1611=(sj1*sj4);
IkReal x1612=(cj5*r01);
IkReal x1613=((1.0)*cj0);
IkReal x1614=(r20*sj5);
IkReal x1615=(cj4*r22);
IkReal x1616=(r00*sj5);
IkReal x1617=(cj1*sj4);
IkReal x1618=(cj5*r21);
IkReal x1619=((1.0)*cj4*r02);
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1620.valid){
continue;
}
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal((((cj0*x1614*x1617))+((x1611*x1612))+((x1611*x1616))+(((-1.0)*sj1*x1619))+(((-1.0)*cj1*x1613*x1615))+((cj0*x1617*x1618)))),IkReal(((((-1.0)*x1611*x1613*x1618))+(((-1.0)*x1611*x1613*x1614))+((cj0*sj1*x1615))+((x1612*x1617))+((x1616*x1617))+(((-1.0)*cj1*x1619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1620.value)))+(x1621.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1622=IKsin(j2);
IkReal x1623=IKcos(j2);
IkReal x1624=(cj3*sj4);
IkReal x1625=(cj0*sj1);
IkReal x1626=((0.15)*sj5);
IkReal x1627=((0.15)*cj5);
IkReal x1628=(cj5*r01);
IkReal x1629=(cj3*cj4);
IkReal x1630=(cj5*sj4);
IkReal x1631=((1.0)*cj0);
IkReal x1632=(r20*sj5);
IkReal x1633=(sj0*sj1);
IkReal x1634=(r10*sj5);
IkReal x1635=((1.0)*cj4);
IkReal x1636=(cj5*sj3);
IkReal x1637=(r00*sj5);
IkReal x1638=(cj1*x1623);
IkReal x1639=((0.54)*x1622);
IkReal x1640=((1.0)*x1622);
IkReal x1641=((1.0)*sj3*sj5);
IkReal x1642=(sj1*x1623);
IkReal x1643=(sj0*x1640);
evalcond[0]=(((r21*x1630))+(((-1.0)*r22*x1635))+x1642+(((-1.0)*cj1*x1640))+((sj4*x1632)));
evalcond[1]=((((-1.0)*r20*x1627))+(((0.71)*cj1))+((r21*x1626))+((cj1*x1639))+(((-1.0)*pz))+(((-0.54)*x1642)));
evalcond[2]=((((-1.0)*x1625*x1640))+((sj4*x1628))+((sj4*x1637))+(((-1.0)*x1631*x1638))+(((-1.0)*r02*x1635)));
evalcond[3]=(((r11*x1630))+(((-1.0)*r12*x1635))+(((-1.0)*x1633*x1640))+(((-1.0)*sj0*x1638))+((sj4*x1634)));
evalcond[4]=((((0.54)*cj0*x1638))+(((0.71)*x1625))+((r01*x1626))+(((-1.0)*r00*x1627))+((x1625*x1639))+(((-1.0)*px)));
evalcond[5]=((((0.54)*sj0*x1638))+(((0.71)*x1633))+(((-1.0)*py))+((r11*x1626))+(((-1.0)*r10*x1627))+((x1633*x1639)));
evalcond[6]=(((r20*x1636))+x1638+((sj1*x1622))+((x1629*x1632))+(((-1.0)*r21*x1641))+((cj5*r21*x1629))+((r22*x1624)));
evalcond[7]=(((r02*x1624))+(((-1.0)*r01*x1641))+((x1623*x1625))+((x1628*x1629))+((x1629*x1637))+((r00*x1636))+(((-1.0)*cj1*x1622*x1631)));
evalcond[8]=(((cj5*r11*x1629))+((r10*x1636))+(((-1.0)*r11*x1641))+(((-1.0)*cj1*x1643))+((x1629*x1634))+((r12*x1624))+((x1623*x1633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1644=(r21*sj0);
IkReal x1645=((1.0)*cj4);
IkReal x1646=((1.0)*r20*sj0);
CheckValue<IkReal> x1647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x1645))+((cj5*r11*sj4))+((r10*sj4*sj5)))),-1);
if(!x1647.valid){
continue;
}
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal((((sj5*x1644))+(((-1.0)*cj5*x1646)))),IkReal(((((-1.0)*r20*sj0*sj5*x1645))+(((-1.0)*cj5*x1644*x1645))+(((-1.0)*r22*sj0*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1647.value)))+(x1648.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1649=IKsin(j3);
IkReal x1650=IKcos(j3);
IkReal x1651=(sj4*x1649);
IkReal x1652=(sj5*x1650);
IkReal x1653=(cj4*cj5*x1649);
IkReal x1654=(cj4*sj5*x1649);
IkReal x1655=((1.0)*cj5*x1650);
evalcond[0]=(((r22*x1651))+((r20*x1654))+(((-1.0)*r20*x1655))+((r21*x1653))+((r21*x1652)));
evalcond[1]=(((r10*x1654))+((r12*x1651))+cj0+(((-1.0)*r10*x1655))+((r11*x1652))+((r11*x1653)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1655))+((r02*x1651))+((r01*x1652))+((r01*x1653))+((r00*x1654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1656=((0.76056338028169)*sj4);
IkReal x1657=((0.211267605633803)*sj5);
IkReal x1658=((0.76056338028169)*cj4);
IkReal x1659=((0.211267605633803)*cj5);
if( IKabs((((r10*x1659))+((r12*x1658))+(((-1.0)*r11*x1657))+(((-1.0)*cj5*r11*x1656))+(((-1.0)*r10*sj5*x1656))+(((1.40845070422535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1658))+(((-1.0)*cj5*r21*x1656))+((r20*x1659))+(((-1.0)*r20*sj5*x1656))+(((-1.0)*r21*x1657))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1659))+((r12*x1658))+(((-1.0)*r11*x1657))+(((-1.0)*cj5*r11*x1656))+(((-1.0)*r10*sj5*x1656))+(((1.40845070422535)*py))))+IKsqr((((r22*x1658))+(((-1.0)*cj5*r21*x1656))+((r20*x1659))+(((-1.0)*r20*sj5*x1656))+(((-1.0)*r21*x1657))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x1659))+((r12*x1658))+(((-1.0)*r11*x1657))+(((-1.0)*cj5*r11*x1656))+(((-1.0)*r10*sj5*x1656))+(((1.40845070422535)*py))), (((r22*x1658))+(((-1.0)*cj5*r21*x1656))+((r20*x1659))+(((-1.0)*r20*sj5*x1656))+(((-1.0)*r21*x1657))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1660=((1.0)*py);
IkReal x1661=((0.54)*sj5);
IkReal x1662=((0.15)*sj5);
IkReal x1663=(cj5*r10);
IkReal x1664=((0.54)*cj5);
IkReal x1665=(cj3*cj4);
IkReal x1666=((0.54)*r12);
IkReal x1667=(cj3*sj4);
IkReal x1668=((0.54)*r22);
IkReal x1669=((0.71)*(IKsin(j1)));
IkReal x1670=(r11*x1662);
IkReal x1671=((0.15)*x1663);
IkReal x1672=(r21*x1662);
IkReal x1673=((0.71)*(IKcos(j1)));
IkReal x1674=((0.15)*cj5*r20);
IkReal x1675=(x1660+x1671);
IkReal x1676=(x1672+x1673);
IkReal x1677=(x1669+x1670);
evalcond[0]=(((cj4*x1668))+(((-1.0)*r21*sj4*x1664))+x1674+pz+(((-1.0)*x1676))+(((-1.0)*r20*sj4*x1661)));
evalcond[1]=((((-1.0)*cj4*x1666))+((r11*sj4*x1664))+x1677+((r10*sj4*x1661))+(((-1.0)*x1675)));
evalcond[2]=(x1677+(((-1.0)*x1667*x1668))+(((-1.0)*r21*x1664*x1665))+(((-1.0)*r20*sj3*x1664))+((r21*sj3*x1661))+(((-1.0)*x1675))+(((-1.0)*r20*x1661*x1665)));
evalcond[3]=(((r10*x1661*x1665))+x1676+(((-1.0)*pz))+((x1666*x1667))+((r11*x1664*x1665))+(((-1.0)*x1674))+(((-1.0)*r11*sj3*x1661))+(((0.54)*sj3*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1678=((1.0)*cj4);
IkReal x1679=(r20*sj5);
IkReal x1680=((1.0)*sj1*sj4);
IkReal x1681=(cj1*cj5*sj4);
IkReal x1682=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((sj1*x1682))+((r21*x1681))+((cj1*sj4*x1679))+(((-1.0)*cj1*r22*x1678))+(((-1.0)*r12*sj1*x1678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1682))+((r11*x1681))+(((-1.0)*cj5*r21*x1680))+((cj4*r22*sj1))+(((-1.0)*x1679*x1680))+(((-1.0)*cj1*r12*x1678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((sj1*x1682))+((r21*x1681))+((cj1*sj4*x1679))+(((-1.0)*cj1*r22*x1678))+(((-1.0)*r12*sj1*x1678))))+IKsqr((((cj1*x1682))+((r11*x1681))+(((-1.0)*cj5*r21*x1680))+((cj4*r22*sj1))+(((-1.0)*x1679*x1680))+(((-1.0)*cj1*r12*x1678))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((sj1*x1682))+((r21*x1681))+((cj1*sj4*x1679))+(((-1.0)*cj1*r22*x1678))+(((-1.0)*r12*sj1*x1678))), (((cj1*x1682))+((r11*x1681))+(((-1.0)*cj5*r21*x1680))+((cj4*r22*sj1))+(((-1.0)*x1679*x1680))+(((-1.0)*cj1*r12*x1678))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1683=IKsin(j2);
IkReal x1684=IKcos(j2);
IkReal x1685=((0.15)*sj5);
IkReal x1686=((0.15)*cj5);
IkReal x1687=(cj5*sj4);
IkReal x1688=(cj3*cj4);
IkReal x1689=(r20*sj5);
IkReal x1690=(cj3*sj4);
IkReal x1691=(r10*sj5);
IkReal x1692=((1.0)*cj4);
IkReal x1693=(cj5*sj3);
IkReal x1694=(sj1*x1684);
IkReal x1695=(cj1*x1684);
IkReal x1696=((0.54)*x1683);
IkReal x1697=((1.0)*sj3*sj5);
IkReal x1698=(sj1*x1683);
IkReal x1699=((1.0)*cj1*x1683);
evalcond[0]=((((-1.0)*x1699))+x1694+((r21*x1687))+((sj4*x1689))+(((-1.0)*r22*x1692)));
evalcond[1]=(((r11*x1687))+(((-1.0)*r12*x1692))+(((-1.0)*x1698))+(((-1.0)*x1695))+((sj4*x1691)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x1694))+(((-1.0)*r20*x1686))+((r21*x1685))+(((-1.0)*pz))+((cj1*x1696)));
evalcond[3]=(((r11*x1685))+(((-1.0)*r10*x1686))+((sj1*x1696))+(((-1.0)*py))+(((0.71)*sj1))+(((0.54)*x1695)));
evalcond[4]=(((r20*x1693))+(((-1.0)*r21*x1697))+((cj5*r21*x1688))+x1695+x1698+((r22*x1690))+((x1688*x1689)));
evalcond[5]=(((r12*x1690))+((r10*x1693))+(((-1.0)*x1699))+(((-1.0)*r11*x1697))+x1694+((x1688*x1691))+((cj5*r11*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1700=((0.76056338028169)*sj4);
IkReal x1701=((0.211267605633803)*sj5);
IkReal x1702=((0.76056338028169)*cj4);
IkReal x1703=((0.211267605633803)*cj5);
if( IKabs((((r11*x1701))+(((-1.0)*r10*x1703))+(((-1.40845070422535)*py))+((r10*sj5*x1700))+((cj5*r11*x1700))+(((-1.0)*r12*x1702)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1702))+(((-1.0)*r21*x1701))+((r20*x1703))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1700))+(((-1.0)*r20*sj5*x1700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1701))+(((-1.0)*r10*x1703))+(((-1.40845070422535)*py))+((r10*sj5*x1700))+((cj5*r11*x1700))+(((-1.0)*r12*x1702))))+IKsqr((((r22*x1702))+(((-1.0)*r21*x1701))+((r20*x1703))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1700))+(((-1.0)*r20*sj5*x1700))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x1701))+(((-1.0)*r10*x1703))+(((-1.40845070422535)*py))+((r10*sj5*x1700))+((cj5*r11*x1700))+(((-1.0)*r12*x1702))), (((r22*x1702))+(((-1.0)*r21*x1701))+((r20*x1703))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1700))+(((-1.0)*r20*sj5*x1700))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1704=(r21*sj5);
IkReal x1705=((0.54)*sj3);
IkReal x1706=(cj5*r10);
IkReal x1707=((0.54)*sj4);
IkReal x1708=(cj5*r11);
IkReal x1709=(r20*sj5);
IkReal x1710=(cj5*r20);
IkReal x1711=(cj5*r21);
IkReal x1712=((0.54)*cj4);
IkReal x1713=(r11*sj5);
IkReal x1714=(r10*sj5);
IkReal x1715=((0.15)*x1710);
IkReal x1716=((0.15)*x1704);
IkReal x1717=((0.71)*(IKcos(j1)));
IkReal x1718=((0.15)*x1713);
IkReal x1719=((0.71)*(IKsin(j1)));
IkReal x1720=((0.15)*x1706);
IkReal x1721=(x1715+pz);
IkReal x1722=(x1717+x1716);
IkReal x1723=(x1720+x1719);
evalcond[0]=(((r22*x1712))+x1721+(((-1.0)*x1707*x1711))+(((-1.0)*x1707*x1709))+(((-1.0)*x1722)));
evalcond[1]=(x1723+(((-1.0)*x1707*x1714))+((r12*x1712))+(((-1.0)*x1718))+(((-1.0)*x1707*x1708))+py);
evalcond[2]=(((cj3*x1708*x1712))+x1721+((cj3*r12*x1707))+((x1705*x1706))+((cj3*x1712*x1714))+(((-1.0)*x1705*x1713))+(((-1.0)*x1722)));
evalcond[3]=(x1718+(((-1.0)*x1704*x1705))+(((-1.0)*py))+((cj3*x1711*x1712))+((x1705*x1710))+(((-1.0)*x1723))+((cj3*r22*x1707))+((cj3*x1709*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1724=(cj1*cj4);
IkReal x1725=(r20*sj5);
IkReal x1726=(cj4*sj1);
IkReal x1727=(cj5*r21);
IkReal x1728=(cj1*sj4);
IkReal x1729=(cj5*r11);
IkReal x1730=(r10*sj5);
IkReal x1731=((1.0)*sj1*sj4);
if( IKabs((((x1725*x1728))+(((-1.0)*x1729*x1731))+(((-1.0)*r22*x1724))+(((-1.0)*x1730*x1731))+((x1727*x1728))+((r12*x1726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1728*x1730))+(((-1.0)*x1728*x1729))+((r22*x1726))+(((-1.0)*x1725*x1731))+((r12*x1724))+(((-1.0)*x1727*x1731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1725*x1728))+(((-1.0)*x1729*x1731))+(((-1.0)*r22*x1724))+(((-1.0)*x1730*x1731))+((x1727*x1728))+((r12*x1726))))+IKsqr(((((-1.0)*x1728*x1730))+(((-1.0)*x1728*x1729))+((r22*x1726))+(((-1.0)*x1725*x1731))+((r12*x1724))+(((-1.0)*x1727*x1731))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1725*x1728))+(((-1.0)*x1729*x1731))+(((-1.0)*r22*x1724))+(((-1.0)*x1730*x1731))+((x1727*x1728))+((r12*x1726))), ((((-1.0)*x1728*x1730))+(((-1.0)*x1728*x1729))+((r22*x1726))+(((-1.0)*x1725*x1731))+((r12*x1724))+(((-1.0)*x1727*x1731))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1732=IKcos(j2);
IkReal x1733=IKsin(j2);
IkReal x1734=((0.15)*sj5);
IkReal x1735=((0.15)*cj5);
IkReal x1736=(r10*sj5);
IkReal x1737=(cj5*sj4);
IkReal x1738=(cj3*cj4);
IkReal x1739=(r20*sj5);
IkReal x1740=(cj3*sj4);
IkReal x1741=((1.0)*cj4);
IkReal x1742=(cj5*sj3);
IkReal x1743=(cj1*x1732);
IkReal x1744=(sj1*x1733);
IkReal x1745=(cj1*x1733);
IkReal x1746=(sj1*x1732);
IkReal x1747=((1.0)*sj3*sj5);
IkReal x1748=(x1744+x1743);
evalcond[0]=((((-1.0)*r12*x1741))+x1748+((sj4*x1736))+((r11*x1737)));
evalcond[1]=(x1746+((r21*x1737))+(((-1.0)*r22*x1741))+((sj4*x1739))+(((-1.0)*x1745)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x1746))+((r21*x1734))+(((0.54)*x1745))+(((-1.0)*pz))+(((-1.0)*r20*x1735)));
evalcond[3]=((((-1.0)*r10*x1735))+(((-0.54)*x1744))+(((-0.54)*x1743))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1734)));
evalcond[4]=(x1748+((r22*x1740))+((x1738*x1739))+((r20*x1742))+((cj5*r21*x1738))+(((-1.0)*r21*x1747)));
evalcond[5]=(((r12*x1740))+(((-1.0)*r11*x1747))+x1745+((x1736*x1738))+(((-1.0)*x1746))+((cj5*r11*x1738))+((r10*x1742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1749=((0.76056338028169)*sj4);
IkReal x1750=((0.211267605633803)*sj5);
IkReal x1751=((0.76056338028169)*cj4);
IkReal x1752=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x1749))+((r02*x1751))+(((-1.0)*cj5*r01*x1749))+(((-1.0)*r01*x1750))+(((1.40845070422535)*px))+((r00*x1752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1751))+(((-1.0)*cj5*r21*x1749))+((r20*x1752))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1750))+(((-1.0)*r20*sj5*x1749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x1749))+((r02*x1751))+(((-1.0)*cj5*r01*x1749))+(((-1.0)*r01*x1750))+(((1.40845070422535)*px))+((r00*x1752))))+IKsqr((((r22*x1751))+(((-1.0)*cj5*r21*x1749))+((r20*x1752))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1750))+(((-1.0)*r20*sj5*x1749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x1749))+((r02*x1751))+(((-1.0)*cj5*r01*x1749))+(((-1.0)*r01*x1750))+(((1.40845070422535)*px))+((r00*x1752))), (((r22*x1751))+(((-1.0)*cj5*r21*x1749))+((r20*x1752))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1750))+(((-1.0)*r20*sj5*x1749))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1753=((1.0)*px);
IkReal x1754=((0.54)*sj5);
IkReal x1755=((0.15)*sj5);
IkReal x1756=((0.54)*cj5);
IkReal x1757=(cj3*cj4);
IkReal x1758=((0.15)*cj5);
IkReal x1759=((0.54)*r02);
IkReal x1760=(cj3*sj4);
IkReal x1761=((0.54)*r22);
IkReal x1762=(r01*x1755);
IkReal x1763=((0.71)*(IKsin(j1)));
IkReal x1764=(r00*x1758);
IkReal x1765=(r21*x1755);
IkReal x1766=((0.71)*(IKcos(j1)));
IkReal x1767=(r20*x1758);
IkReal x1768=(x1764+x1753);
IkReal x1769=(x1766+x1765);
IkReal x1770=(x1762+x1763);
evalcond[0]=((((-1.0)*x1769))+x1767+((cj4*x1761))+pz+(((-1.0)*r21*sj4*x1756))+(((-1.0)*r20*sj4*x1754)));
evalcond[1]=((((-1.0)*cj4*x1759))+(((-1.0)*x1768))+x1770+((r00*sj4*x1754))+((r01*sj4*x1756)));
evalcond[2]=((((-1.0)*x1768))+x1770+(((-1.0)*r21*x1756*x1757))+(((-1.0)*x1760*x1761))+(((-1.0)*r20*sj3*x1756))+(((-1.0)*r20*x1754*x1757))+((r21*sj3*x1754)));
evalcond[3]=((((-1.0)*x1767))+x1769+((x1759*x1760))+((r00*x1754*x1757))+((r01*x1756*x1757))+(((-1.0)*pz))+(((-1.0)*r01*sj3*x1754))+((r00*sj3*x1756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1771=((1.0)*cj4);
IkReal x1772=(sj1*sj4);
IkReal x1773=(r20*sj5);
IkReal x1774=(cj5*r01);
IkReal x1775=(cj5*r21);
IkReal x1776=(cj1*sj4);
IkReal x1777=(r00*sj5);
if( IKabs(((((-1.0)*r02*sj1*x1771))+((x1773*x1776))+((x1775*x1776))+((x1772*x1777))+((x1772*x1774))+(((-1.0)*cj1*r22*x1771)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1772*x1773))+(((-1.0)*x1772*x1775))+((x1776*x1777))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1771))+((x1774*x1776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x1771))+((x1773*x1776))+((x1775*x1776))+((x1772*x1777))+((x1772*x1774))+(((-1.0)*cj1*r22*x1771))))+IKsqr(((((-1.0)*x1772*x1773))+(((-1.0)*x1772*x1775))+((x1776*x1777))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1771))+((x1774*x1776))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*sj1*x1771))+((x1773*x1776))+((x1775*x1776))+((x1772*x1777))+((x1772*x1774))+(((-1.0)*cj1*r22*x1771))), ((((-1.0)*x1772*x1773))+(((-1.0)*x1772*x1775))+((x1776*x1777))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1771))+((x1774*x1776))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1778=IKsin(j2);
IkReal x1779=IKcos(j2);
IkReal x1780=(cj3*sj4);
IkReal x1781=(r21*sj5);
IkReal x1782=(cj5*sj4);
IkReal x1783=((0.15)*cj5);
IkReal x1784=((1.0)*cj4);
IkReal x1785=(sj4*sj5);
IkReal x1786=((1.0)*sj3);
IkReal x1787=(cj5*sj3);
IkReal x1788=(r01*sj5);
IkReal x1789=(sj1*x1779);
IkReal x1790=(cj1*x1779);
IkReal x1791=(cj3*cj4*sj5);
IkReal x1792=((0.54)*x1778);
IkReal x1793=(sj1*x1778);
IkReal x1794=(cj3*cj4*cj5);
IkReal x1795=((1.0)*cj1*x1778);
evalcond[0]=((((-1.0)*x1795))+((r20*x1785))+x1789+(((-1.0)*r22*x1784))+((r21*x1782)));
evalcond[1]=((((-1.0)*x1790))+(((-1.0)*x1793))+(((-1.0)*r02*x1784))+((r00*x1785))+((r01*x1782)));
evalcond[2]=((((0.15)*x1781))+(((0.71)*cj1))+(((-0.54)*x1789))+((cj1*x1792))+(((-1.0)*pz))+(((-1.0)*r20*x1783)));
evalcond[3]=((((0.15)*x1788))+(((-1.0)*r00*x1783))+((sj1*x1792))+(((0.54)*x1790))+(((-1.0)*px))+(((0.71)*sj1)));
evalcond[4]=(((r20*x1787))+((r21*x1794))+x1793+x1790+((r22*x1780))+(((-1.0)*x1781*x1786))+((r20*x1791)));
evalcond[5]=(((r00*x1791))+(((-1.0)*x1795))+x1789+((r02*x1780))+(((-1.0)*x1786*x1788))+((r01*x1794))+((r00*x1787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1796=((0.76056338028169)*sj4);
IkReal x1797=((0.211267605633803)*sj5);
IkReal x1798=((0.76056338028169)*cj4);
IkReal x1799=((0.211267605633803)*cj5);
if( IKabs((((r00*sj5*x1796))+((cj5*r01*x1796))+(((-1.0)*r00*x1799))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1798))+((r01*x1797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1796))+((r22*x1798))+(((-1.0)*cj5*r21*x1796))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1797))+((r20*x1799)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5*x1796))+((cj5*r01*x1796))+(((-1.0)*r00*x1799))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1798))+((r01*x1797))))+IKsqr(((((-1.0)*r20*sj5*x1796))+((r22*x1798))+(((-1.0)*cj5*r21*x1796))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1797))+((r20*x1799))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj5*x1796))+((cj5*r01*x1796))+(((-1.0)*r00*x1799))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1798))+((r01*x1797))), ((((-1.0)*r20*sj5*x1796))+((r22*x1798))+(((-1.0)*cj5*r21*x1796))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1797))+((r20*x1799))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1800=((0.54)*sj5);
IkReal x1801=((0.15)*sj5);
IkReal x1802=((0.54)*cj5);
IkReal x1803=(cj3*cj4);
IkReal x1804=((0.15)*cj5);
IkReal x1805=((0.54)*r02);
IkReal x1806=(cj3*sj4);
IkReal x1807=((0.54)*r22);
IkReal x1808=(r20*x1804);
IkReal x1809=(r21*x1801);
IkReal x1810=((0.71)*(IKcos(j1)));
IkReal x1811=(r01*x1801);
IkReal x1812=((0.71)*(IKsin(j1)));
IkReal x1813=(r00*x1804);
IkReal x1814=(pz+x1808);
IkReal x1815=(x1810+x1809);
IkReal x1816=(x1812+x1813);
evalcond[0]=((((-1.0)*x1815))+(((-1.0)*r20*sj4*x1800))+(((-1.0)*r21*sj4*x1802))+x1814+((cj4*x1807)));
evalcond[1]=((((-1.0)*x1811))+(((-1.0)*r00*sj4*x1800))+px+x1816+((cj4*x1805))+(((-1.0)*r01*sj4*x1802)));
evalcond[2]=((((-1.0)*x1815))+(((-1.0)*r01*sj3*x1800))+x1814+((r00*sj3*x1802))+((r01*x1802*x1803))+((r00*x1800*x1803))+((x1805*x1806)));
evalcond[3]=((((-1.0)*x1816))+((r21*x1802*x1803))+((x1806*x1807))+((r20*sj3*x1802))+(((-1.0)*r21*sj3*x1800))+(((-1.0)*px))+x1811+((r20*x1800*x1803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1817=(cj4*r22);
IkReal x1818=((1.0)*cj1);
IkReal x1819=(r20*sj5);
IkReal x1820=(cj4*r02);
IkReal x1821=(cj5*r21);
IkReal x1822=(cj1*sj4);
IkReal x1823=(cj5*r01);
IkReal x1824=(r00*sj5);
IkReal x1825=((1.0)*sj1*sj4);
if( IKabs((((x1819*x1822))+((sj1*x1820))+((x1821*x1822))+(((-1.0)*x1823*x1825))+(((-1.0)*x1824*x1825))+(((-1.0)*x1817*x1818)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1821*x1825))+(((-1.0)*x1819*x1825))+((cj1*x1820))+(((-1.0)*sj4*x1818*x1824))+(((-1.0)*sj4*x1818*x1823))+((sj1*x1817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1819*x1822))+((sj1*x1820))+((x1821*x1822))+(((-1.0)*x1823*x1825))+(((-1.0)*x1824*x1825))+(((-1.0)*x1817*x1818))))+IKsqr(((((-1.0)*x1821*x1825))+(((-1.0)*x1819*x1825))+((cj1*x1820))+(((-1.0)*sj4*x1818*x1824))+(((-1.0)*sj4*x1818*x1823))+((sj1*x1817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1819*x1822))+((sj1*x1820))+((x1821*x1822))+(((-1.0)*x1823*x1825))+(((-1.0)*x1824*x1825))+(((-1.0)*x1817*x1818))), ((((-1.0)*x1821*x1825))+(((-1.0)*x1819*x1825))+((cj1*x1820))+(((-1.0)*sj4*x1818*x1824))+(((-1.0)*sj4*x1818*x1823))+((sj1*x1817))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1826=IKcos(j2);
IkReal x1827=IKsin(j2);
IkReal x1828=(cj3*sj4);
IkReal x1829=(r21*sj5);
IkReal x1830=(cj5*sj4);
IkReal x1831=((0.15)*cj5);
IkReal x1832=((1.0)*cj4);
IkReal x1833=(sj4*sj5);
IkReal x1834=((1.0)*sj3);
IkReal x1835=(cj5*sj3);
IkReal x1836=(r01*sj5);
IkReal x1837=(cj1*x1826);
IkReal x1838=(sj1*x1827);
IkReal x1839=(cj3*cj4*sj5);
IkReal x1840=(cj1*x1827);
IkReal x1841=(sj1*x1826);
IkReal x1842=(cj3*cj4*cj5);
IkReal x1843=(x1837+x1838);
evalcond[0]=(((r01*x1830))+x1843+(((-1.0)*r02*x1832))+((r00*x1833)));
evalcond[1]=(((r21*x1830))+x1841+(((-1.0)*x1840))+((r20*x1833))+(((-1.0)*r22*x1832)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x1831))+(((0.54)*x1840))+(((-0.54)*x1841))+(((-1.0)*pz))+(((0.15)*x1829)));
evalcond[3]=((((-1.0)*r00*x1831))+(((0.15)*x1836))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x1838))+(((-0.54)*x1837)));
evalcond[4]=(((r22*x1828))+x1843+((r21*x1842))+((r20*x1835))+((r20*x1839))+(((-1.0)*x1829*x1834)));
evalcond[5]=((((-1.0)*x1834*x1836))+((r01*x1842))+x1840+((r02*x1828))+(((-1.0)*x1841))+((r00*x1835))+((r00*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1844=(cj5*sj4);
IkReal x1845=(cj0*r01);
IkReal x1846=((0.54)*cj0);
IkReal x1847=(sj4*sj5);
CheckValue<IkReal> x1848=IKPowWithIntegerCheck(cj0,-2);
if(!x1848.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1848.value)*((((r00*x1846*x1847))+(((0.15)*sj5*x1845))+(((-0.15)*cj0*cj5*r00))+(((0.54)*x1844*x1845))+(((-1.0)*cj4*r02*x1846))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r21*x1844))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x1847))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1848.value)*((((r00*x1846*x1847))+(((0.15)*sj5*x1845))+(((-0.15)*cj0*cj5*r00))+(((0.54)*x1844*x1845))+(((-1.0)*cj4*r02*x1846))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.76056338028169)*r21*x1844))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x1847))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1848.value)*((((r00*x1846*x1847))+(((0.15)*sj5*x1845))+(((-0.15)*cj0*cj5*r00))+(((0.54)*x1844*x1845))+(((-1.0)*cj4*r02*x1846))+(((-1.0)*cj0*px))))), ((((-0.76056338028169)*r21*x1844))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x1847))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1849=IKsin(j1);
IkReal x1850=IKcos(j1);
IkReal x1851=((0.15)*sj5);
IkReal x1852=(r21*sj0);
IkReal x1853=((0.54)*r20);
IkReal x1854=(sj4*sj5);
IkReal x1855=(cj5*sj3);
IkReal x1856=(cj3*cj5);
IkReal x1857=((0.15)*cj5);
IkReal x1858=(r11*sj0);
IkReal x1859=((0.54)*r01);
IkReal x1860=((0.54)*r00);
IkReal x1861=(cj3*sj0);
IkReal x1862=(cj4*sj5);
IkReal x1863=((1.0)*py);
IkReal x1864=(cj0*r21);
IkReal x1865=((0.54)*sj4);
IkReal x1866=((0.54)*r10);
IkReal x1867=(cj0*r11);
IkReal x1868=(cj5*sj4);
IkReal x1869=((1.0)*px);
IkReal x1870=((0.54)*cj4);
IkReal x1871=(cj0*cj3);
IkReal x1872=((1.0)*pz);
IkReal x1873=((0.71)*x1849);
IkReal x1874=(cj0*x1870);
IkReal x1875=((0.54)*sj3*sj5);
IkReal x1876=((0.71)*x1850);
IkReal x1877=(cj0*sj0*x1873);
evalcond[0]=(((r22*x1870))+(((-1.0)*x1876))+(((-1.0)*cj5*r21*x1865))+pz+(((-1.0)*x1853*x1854))+((r20*x1857))+(((-1.0)*r21*x1851)));
evalcond[1]=(((x1851*x1858))+((x1873*(sj0*sj0)))+((sj0*x1854*x1866))+((cj5*x1858*x1865))+(((-1.0)*r12*sj0*x1870))+(((-1.0)*r10*sj0*x1857))+(((-1.0)*sj0*x1863)));
evalcond[2]=((((-1.0)*cj0*x1869))+(((-1.0)*r02*x1874))+((cj0*x1859*x1868))+(((-1.0)*cj0*r00*x1857))+((x1873*(cj0*cj0)))+((cj0*r01*x1851))+((cj0*x1854*x1860)));
evalcond[3]=(((cj3*r12*x1865))+((x1851*x1852))+((sj0*x1876))+(((-1.0)*sj0*x1872))+(((-1.0)*r11*x1875))+((cj3*x1862*x1866))+((r11*x1856*x1870))+((x1855*x1866))+(((-1.0)*r20*sj0*x1857)));
evalcond[4]=(((cj3*r02*x1865))+((x1851*x1864))+(((-1.0)*sj3*sj5*x1859))+(((-1.0)*cj0*r20*x1857))+((cj4*x1856*x1859))+((cj3*x1860*x1862))+((x1855*x1860))+(((-1.0)*cj0*x1872))+((cj0*x1876)));
evalcond[5]=((((-1.0)*sj0*x1853*x1855))+((sj0*x1873))+(((-1.0)*x1852*x1856*x1870))+(((-1.0)*x1853*x1861*x1862))+(((-1.0)*r22*x1861*x1865))+((x1852*x1875))+((r11*x1851))+(((-1.0)*x1863))+(((-1.0)*r10*x1857)));
evalcond[6]=((((-1.0)*cj0*x1853*x1855))+(((-1.0)*r22*x1865*x1871))+((r01*x1851))+(((-1.0)*r00*x1857))+(((-1.0)*x1853*x1862*x1871))+(((-1.0)*x1869))+(((-1.0)*x1856*x1864*x1870))+((x1864*x1875))+((cj0*x1873)));
evalcond[7]=(((r01*sj0*x1851))+(((-1.0)*r00*sj0*x1857))+x1877+(((-1.0)*r12*x1874))+((cj5*x1865*x1867))+(((-1.0)*sj0*x1869))+((cj0*x1854*x1866)));
evalcond[8]=((((-1.0)*cj0*r10*x1857))+((x1851*x1867))+(((-1.0)*cj0*x1863))+((sj0*x1854*x1860))+((sj0*x1859*x1868))+(((-1.0)*r02*sj0*x1870))+x1877);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1878=((1.0)*cj4);
IkReal x1879=(sj1*sj4);
IkReal x1880=(r20*sj5);
IkReal x1881=(cj5*r01);
IkReal x1882=(cj5*r21);
IkReal x1883=(cj1*sj4);
IkReal x1884=(r00*sj5);
if( IKabs((((x1879*x1881))+((x1879*x1884))+((x1880*x1883))+((x1882*x1883))+(((-1.0)*r02*sj1*x1878))+(((-1.0)*cj1*r22*x1878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1881*x1883))+(((-1.0)*x1879*x1880))+(((-1.0)*x1879*x1882))+((x1883*x1884))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1879*x1881))+((x1879*x1884))+((x1880*x1883))+((x1882*x1883))+(((-1.0)*r02*sj1*x1878))+(((-1.0)*cj1*r22*x1878))))+IKsqr((((x1881*x1883))+(((-1.0)*x1879*x1880))+(((-1.0)*x1879*x1882))+((x1883*x1884))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1878))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1879*x1881))+((x1879*x1884))+((x1880*x1883))+((x1882*x1883))+(((-1.0)*r02*sj1*x1878))+(((-1.0)*cj1*r22*x1878))), (((x1881*x1883))+(((-1.0)*x1879*x1880))+(((-1.0)*x1879*x1882))+((x1883*x1884))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1878))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1885=IKsin(j2);
IkReal x1886=IKcos(j2);
IkReal x1887=(cj3*sj4);
IkReal x1888=(r21*sj5);
IkReal x1889=(cj5*sj4);
IkReal x1890=((0.15)*cj5);
IkReal x1891=((1.0)*cj4);
IkReal x1892=(sj4*sj5);
IkReal x1893=((1.0)*sj3);
IkReal x1894=(cj5*sj3);
IkReal x1895=(r01*sj5);
IkReal x1896=(sj1*x1886);
IkReal x1897=(cj1*x1886);
IkReal x1898=(cj3*cj4*sj5);
IkReal x1899=((0.54)*x1885);
IkReal x1900=(sj1*x1885);
IkReal x1901=(cj3*cj4*cj5);
IkReal x1902=((1.0)*cj1*x1885);
evalcond[0]=(((r21*x1889))+((r20*x1892))+(((-1.0)*r22*x1891))+x1896+(((-1.0)*x1902)));
evalcond[1]=((((-1.0)*r02*x1891))+((r00*x1892))+((r01*x1889))+(((-1.0)*x1900))+(((-1.0)*x1897)));
evalcond[2]=((((0.15)*x1888))+(((0.71)*cj1))+(((-0.54)*x1896))+((cj1*x1899))+(((-1.0)*pz))+(((-1.0)*r20*x1890)));
evalcond[3]=((((0.54)*x1897))+(((-1.0)*px))+(((-1.0)*r00*x1890))+(((0.71)*sj1))+((sj1*x1899))+(((0.15)*x1895)));
evalcond[4]=(((r20*x1898))+((r20*x1894))+(((-1.0)*x1888*x1893))+((r21*x1901))+x1900+x1897+((r22*x1887)));
evalcond[5]=((((-1.0)*x1893*x1895))+((r01*x1901))+((r00*x1894))+((r00*x1898))+x1896+(((-1.0)*x1902))+((r02*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1903=(cj4*r22);
IkReal x1904=((1.0)*cj1);
IkReal x1905=(r20*sj5);
IkReal x1906=(cj4*r02);
IkReal x1907=(cj5*r21);
IkReal x1908=(cj1*sj4);
IkReal x1909=(cj5*r01);
IkReal x1910=(r00*sj5);
IkReal x1911=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1910*x1911))+((x1905*x1908))+(((-1.0)*x1903*x1904))+((sj1*x1906))+(((-1.0)*x1909*x1911))+((x1907*x1908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x1904*x1909))+((cj1*x1906))+(((-1.0)*x1905*x1911))+(((-1.0)*sj4*x1904*x1910))+(((-1.0)*x1907*x1911))+((sj1*x1903)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1910*x1911))+((x1905*x1908))+(((-1.0)*x1903*x1904))+((sj1*x1906))+(((-1.0)*x1909*x1911))+((x1907*x1908))))+IKsqr(((((-1.0)*sj4*x1904*x1909))+((cj1*x1906))+(((-1.0)*x1905*x1911))+(((-1.0)*sj4*x1904*x1910))+(((-1.0)*x1907*x1911))+((sj1*x1903))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1910*x1911))+((x1905*x1908))+(((-1.0)*x1903*x1904))+((sj1*x1906))+(((-1.0)*x1909*x1911))+((x1907*x1908))), ((((-1.0)*sj4*x1904*x1909))+((cj1*x1906))+(((-1.0)*x1905*x1911))+(((-1.0)*sj4*x1904*x1910))+(((-1.0)*x1907*x1911))+((sj1*x1903))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1912=IKcos(j2);
IkReal x1913=IKsin(j2);
IkReal x1914=(cj3*sj4);
IkReal x1915=(r21*sj5);
IkReal x1916=(cj5*sj4);
IkReal x1917=((0.15)*cj5);
IkReal x1918=((1.0)*cj4);
IkReal x1919=(sj4*sj5);
IkReal x1920=((1.0)*sj3);
IkReal x1921=(cj5*sj3);
IkReal x1922=(r01*sj5);
IkReal x1923=(cj1*x1912);
IkReal x1924=(sj1*x1913);
IkReal x1925=(cj3*cj4*sj5);
IkReal x1926=(cj1*x1913);
IkReal x1927=(sj1*x1912);
IkReal x1928=(cj3*cj4*cj5);
IkReal x1929=(x1923+x1924);
evalcond[0]=((((-1.0)*r02*x1918))+((r00*x1919))+((r01*x1916))+x1929);
evalcond[1]=((((-1.0)*r22*x1918))+(((-1.0)*x1926))+x1927+((r21*x1916))+((r20*x1919)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x1926))+(((0.15)*x1915))+(((-0.54)*x1927))+(((-1.0)*pz))+(((-1.0)*r20*x1917)));
evalcond[3]=((((0.15)*x1922))+(((-1.0)*r00*x1917))+(((-0.54)*x1923))+(((-0.54)*x1924))+(((-0.71)*sj1))+(((-1.0)*px)));
evalcond[4]=(((r22*x1914))+(((-1.0)*x1915*x1920))+((r20*x1921))+((r20*x1925))+x1929+((r21*x1928)));
evalcond[5]=(((r01*x1928))+((r00*x1921))+((r00*x1925))+(((-1.0)*x1927))+x1926+((r02*x1914))+(((-1.0)*x1920*x1922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1930=((1.0)*cj4);
IkReal x1931=(r20*sj5);
IkReal x1932=((1.0)*sj1*sj4);
IkReal x1933=(cj1*cj5*sj4);
IkReal x1934=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x1930))+((r21*x1933))+((sj1*x1934))+((cj1*sj4*x1931))+(((-1.0)*cj1*r22*x1930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1932))+((cj1*x1934))+((cj4*r22*sj1))+(((-1.0)*x1931*x1932))+((r11*x1933))+(((-1.0)*cj1*r12*x1930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x1930))+((r21*x1933))+((sj1*x1934))+((cj1*sj4*x1931))+(((-1.0)*cj1*r22*x1930))))+IKsqr(((((-1.0)*cj5*r21*x1932))+((cj1*x1934))+((cj4*r22*sj1))+(((-1.0)*x1931*x1932))+((r11*x1933))+(((-1.0)*cj1*r12*x1930))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x1930))+((r21*x1933))+((sj1*x1934))+((cj1*sj4*x1931))+(((-1.0)*cj1*r22*x1930))), ((((-1.0)*cj5*r21*x1932))+((cj1*x1934))+((cj4*r22*sj1))+(((-1.0)*x1931*x1932))+((r11*x1933))+(((-1.0)*cj1*r12*x1930))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1935=IKsin(j2);
IkReal x1936=IKcos(j2);
IkReal x1937=((0.15)*sj5);
IkReal x1938=((0.15)*cj5);
IkReal x1939=(cj5*sj4);
IkReal x1940=(cj3*cj4);
IkReal x1941=(r20*sj5);
IkReal x1942=(cj3*sj4);
IkReal x1943=(r10*sj5);
IkReal x1944=((1.0)*cj4);
IkReal x1945=(cj5*sj3);
IkReal x1946=(sj1*x1936);
IkReal x1947=(cj1*x1936);
IkReal x1948=((0.54)*x1935);
IkReal x1949=((1.0)*sj3*sj5);
IkReal x1950=(sj1*x1935);
IkReal x1951=((1.0)*cj1*x1935);
evalcond[0]=((((-1.0)*x1951))+(((-1.0)*r22*x1944))+((r21*x1939))+x1946+((sj4*x1941)));
evalcond[1]=((((-1.0)*x1947))+(((-1.0)*r12*x1944))+(((-1.0)*x1950))+((r11*x1939))+((sj4*x1943)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1948))+(((-1.0)*r20*x1938))+((r21*x1937))+(((-1.0)*pz))+(((-0.54)*x1946)));
evalcond[3]=(((sj1*x1948))+(((-1.0)*py))+(((-1.0)*r10*x1938))+((r11*x1937))+(((0.71)*sj1))+(((0.54)*x1947)));
evalcond[4]=((((-1.0)*r21*x1949))+((cj5*r21*x1940))+((r20*x1945))+((x1940*x1941))+((r22*x1942))+x1947+x1950);
evalcond[5]=((((-1.0)*x1951))+((r10*x1945))+((r12*x1942))+((x1940*x1943))+x1946+((cj5*r11*x1940))+(((-1.0)*r11*x1949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1952=(cj1*cj4);
IkReal x1953=(r20*sj5);
IkReal x1954=(cj4*sj1);
IkReal x1955=(cj5*r21);
IkReal x1956=(cj1*sj4);
IkReal x1957=(cj5*r11);
IkReal x1958=(r10*sj5);
IkReal x1959=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1957*x1959))+(((-1.0)*x1958*x1959))+((r12*x1954))+((x1955*x1956))+((x1953*x1956))+(((-1.0)*r22*x1952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1956*x1957))+(((-1.0)*x1956*x1958))+((r12*x1952))+((r22*x1954))+(((-1.0)*x1953*x1959))+(((-1.0)*x1955*x1959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1957*x1959))+(((-1.0)*x1958*x1959))+((r12*x1954))+((x1955*x1956))+((x1953*x1956))+(((-1.0)*r22*x1952))))+IKsqr(((((-1.0)*x1956*x1957))+(((-1.0)*x1956*x1958))+((r12*x1952))+((r22*x1954))+(((-1.0)*x1953*x1959))+(((-1.0)*x1955*x1959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1957*x1959))+(((-1.0)*x1958*x1959))+((r12*x1954))+((x1955*x1956))+((x1953*x1956))+(((-1.0)*r22*x1952))), ((((-1.0)*x1956*x1957))+(((-1.0)*x1956*x1958))+((r12*x1952))+((r22*x1954))+(((-1.0)*x1953*x1959))+(((-1.0)*x1955*x1959))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1960=IKcos(j2);
IkReal x1961=IKsin(j2);
IkReal x1962=((0.15)*sj5);
IkReal x1963=((0.15)*cj5);
IkReal x1964=(r10*sj5);
IkReal x1965=(cj5*sj4);
IkReal x1966=(cj3*cj4);
IkReal x1967=(r20*sj5);
IkReal x1968=(cj3*sj4);
IkReal x1969=((1.0)*cj4);
IkReal x1970=(cj5*sj3);
IkReal x1971=(cj1*x1960);
IkReal x1972=(sj1*x1961);
IkReal x1973=(cj1*x1961);
IkReal x1974=(sj1*x1960);
IkReal x1975=((1.0)*sj3*sj5);
IkReal x1976=(x1972+x1971);
evalcond[0]=(((r11*x1965))+x1976+(((-1.0)*r12*x1969))+((sj4*x1964)));
evalcond[1]=((((-1.0)*r22*x1969))+(((-1.0)*x1973))+((r21*x1965))+x1974+((sj4*x1967)));
evalcond[2]=((((0.71)*cj1))+((r21*x1962))+(((-1.0)*pz))+(((-0.54)*x1974))+(((-1.0)*r20*x1963))+(((0.54)*x1973)));
evalcond[3]=(((r11*x1962))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x1963))+(((-0.54)*x1972))+(((-0.54)*x1971)));
evalcond[4]=(((r20*x1970))+((cj5*r21*x1966))+x1976+((r22*x1968))+((x1966*x1967))+(((-1.0)*r21*x1975)));
evalcond[5]=(((r10*x1970))+((x1964*x1966))+((r12*x1968))+((cj5*r11*x1966))+(((-1.0)*x1974))+x1973+(((-1.0)*r11*x1975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1977=(cj5*sj4);
IkReal x1978=((1.0)*sj0);
IkReal x1979=(cj4*r22);
IkReal x1980=(cj1*sj4*sj5);
IkReal x1981=((1.0)*cj4*r12);
IkReal x1982=(sj1*sj4*sj5);
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal((((r11*sj1*x1977))+((r20*sj0*x1980))+(((-1.0)*cj1*x1978*x1979))+(((-1.0)*sj1*x1981))+((cj1*r21*sj0*x1977))+((r10*x1982)))),IkReal((((r10*x1980))+(((-1.0)*r20*x1978*x1982))+((sj0*sj1*x1979))+(((-1.0)*r21*sj1*x1977*x1978))+(((-1.0)*cj1*x1981))+((cj1*r11*x1977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
CheckValue<IkReal> x1984=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1984.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1983.value)+(((1.5707963267949)*(x1984.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1985=IKsin(j2);
IkReal x1986=IKcos(j2);
IkReal x1987=(cj3*sj4);
IkReal x1988=(cj0*sj1);
IkReal x1989=((0.15)*sj5);
IkReal x1990=((0.15)*cj5);
IkReal x1991=(cj5*r01);
IkReal x1992=(cj3*cj4);
IkReal x1993=(cj5*sj4);
IkReal x1994=((1.0)*cj0);
IkReal x1995=(r20*sj5);
IkReal x1996=(sj0*sj1);
IkReal x1997=(r10*sj5);
IkReal x1998=((1.0)*cj4);
IkReal x1999=(cj5*sj3);
IkReal x2000=(r00*sj5);
IkReal x2001=(cj1*x1986);
IkReal x2002=((0.54)*x1985);
IkReal x2003=((1.0)*x1985);
IkReal x2004=((1.0)*sj3*sj5);
IkReal x2005=(sj1*x1986);
IkReal x2006=(sj0*x2003);
evalcond[0]=(((r21*x1993))+x2005+(((-1.0)*cj1*x2003))+(((-1.0)*r22*x1998))+((sj4*x1995)));
evalcond[1]=((((0.71)*cj1))+((r21*x1989))+(((-1.0)*pz))+(((-1.0)*r20*x1990))+((cj1*x2002))+(((-0.54)*x2005)));
evalcond[2]=((((-1.0)*x1994*x2001))+(((-1.0)*r02*x1998))+(((-1.0)*x1988*x2003))+((sj4*x2000))+((sj4*x1991)));
evalcond[3]=(((r11*x1993))+(((-1.0)*sj0*x2001))+(((-1.0)*x1996*x2003))+(((-1.0)*r12*x1998))+((sj4*x1997)));
evalcond[4]=((((0.54)*cj0*x2001))+(((-1.0)*r00*x1990))+(((-1.0)*px))+((r01*x1989))+(((0.71)*x1988))+((x1988*x2002)));
evalcond[5]=((((-1.0)*r10*x1990))+(((0.54)*sj0*x2001))+((r11*x1989))+(((-1.0)*py))+((x1996*x2002))+(((0.71)*x1996)));
evalcond[6]=(((cj5*r21*x1992))+x2001+((r20*x1999))+((sj1*x1985))+((r22*x1987))+(((-1.0)*r21*x2004))+((x1992*x1995)));
evalcond[7]=((((-1.0)*cj1*x1985*x1994))+((x1992*x2000))+((x1991*x1992))+(((-1.0)*r01*x2004))+((r00*x1999))+((x1986*x1988))+((r02*x1987)));
evalcond[8]=((((-1.0)*r11*x2004))+((x1986*x1996))+((r12*x1987))+((r10*x1999))+(((-1.0)*cj1*x2006))+((cj5*r11*x1992))+((x1992*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2007=(sj1*sj4);
IkReal x2008=(cj5*r01);
IkReal x2009=((1.0)*cj0);
IkReal x2010=(r20*sj5);
IkReal x2011=(cj4*r22);
IkReal x2012=(r00*sj5);
IkReal x2013=(cj1*sj4);
IkReal x2014=(cj5*r21);
IkReal x2015=((1.0)*cj4*r02);
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal((((cj0*x2013*x2014))+((x2007*x2008))+(((-1.0)*cj1*x2009*x2011))+((cj0*x2010*x2013))+((x2007*x2012))+(((-1.0)*sj1*x2015)))),IkReal((((cj0*sj1*x2011))+(((-1.0)*x2007*x2009*x2010))+(((-1.0)*x2007*x2009*x2014))+(((-1.0)*cj1*x2015))+((x2008*x2013))+((x2012*x2013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2017.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2016.value)+(((1.5707963267949)*(x2017.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2018=IKsin(j2);
IkReal x2019=IKcos(j2);
IkReal x2020=(cj3*sj4);
IkReal x2021=(cj0*sj1);
IkReal x2022=((0.15)*sj5);
IkReal x2023=((0.15)*cj5);
IkReal x2024=(cj5*r01);
IkReal x2025=(cj3*cj4);
IkReal x2026=(cj5*sj4);
IkReal x2027=((1.0)*cj0);
IkReal x2028=(r20*sj5);
IkReal x2029=(sj0*sj1);
IkReal x2030=(r10*sj5);
IkReal x2031=((1.0)*cj4);
IkReal x2032=(cj5*sj3);
IkReal x2033=(r00*sj5);
IkReal x2034=(cj1*x2019);
IkReal x2035=((0.54)*x2018);
IkReal x2036=((1.0)*x2018);
IkReal x2037=((1.0)*sj3*sj5);
IkReal x2038=(sj1*x2019);
IkReal x2039=(sj0*x2036);
evalcond[0]=((((-1.0)*r22*x2031))+x2038+(((-1.0)*cj1*x2036))+((r21*x2026))+((sj4*x2028)));
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2038))+(((-1.0)*pz))+(((-1.0)*r20*x2023))+((cj1*x2035))+((r21*x2022)));
evalcond[2]=((((-1.0)*r02*x2031))+((sj4*x2033))+(((-1.0)*x2021*x2036))+((sj4*x2024))+(((-1.0)*x2027*x2034)));
evalcond[3]=(((r11*x2026))+(((-1.0)*r12*x2031))+(((-1.0)*x2029*x2036))+(((-1.0)*sj0*x2034))+((sj4*x2030)));
evalcond[4]=(((r01*x2022))+(((0.54)*cj0*x2034))+(((0.71)*x2021))+(((-1.0)*r00*x2023))+(((-1.0)*px))+((x2021*x2035)));
evalcond[5]=((((-1.0)*r10*x2023))+(((0.71)*x2029))+((r11*x2022))+(((0.54)*sj0*x2034))+(((-1.0)*py))+((x2029*x2035)));
evalcond[6]=(((sj1*x2018))+((r22*x2020))+x2034+((x2025*x2028))+((cj5*r21*x2025))+((r20*x2032))+(((-1.0)*r21*x2037)));
evalcond[7]=(((x2025*x2033))+((x2024*x2025))+((x2019*x2021))+((r00*x2032))+(((-1.0)*r01*x2037))+((r02*x2020))+(((-1.0)*cj1*x2018*x2027)));
evalcond[8]=(((x2025*x2030))+((r10*x2032))+((x2019*x2029))+(((-1.0)*r11*x2037))+(((-1.0)*cj1*x2039))+((cj5*r11*x2025))+((r12*x2020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2040=(cj5*sj4);
IkReal x2041=((0.54)*sj0);
IkReal x2042=(sj4*sj5);
IkReal x2043=((0.15)*sj0);
CheckValue<IkReal> x2044=IKPowWithIntegerCheck(sj0,-2);
if(!x2044.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2044.value)*(((((-1.0)*cj5*r10*x2043))+((r11*x2040*x2041))+((r10*x2041*x2042))+(((-1.0)*py*sj0))+(((-1.0)*cj4*r12*x2041))+((r11*sj5*x2043)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r21*x2040))+(((-0.76056338028169)*r20*x2042))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2044.value)*(((((-1.0)*cj5*r10*x2043))+((r11*x2040*x2041))+((r10*x2041*x2042))+(((-1.0)*py*sj0))+(((-1.0)*cj4*r12*x2041))+((r11*sj5*x2043))))))+IKsqr(((((-0.76056338028169)*r21*x2040))+(((-0.76056338028169)*r20*x2042))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2044.value)*(((((-1.0)*cj5*r10*x2043))+((r11*x2040*x2041))+((r10*x2041*x2042))+(((-1.0)*py*sj0))+(((-1.0)*cj4*r12*x2041))+((r11*sj5*x2043))))), ((((-0.76056338028169)*r21*x2040))+(((-0.76056338028169)*r20*x2042))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2045=IKsin(j1);
IkReal x2046=IKcos(j1);
IkReal x2047=((0.15)*sj5);
IkReal x2048=(r21*sj0);
IkReal x2049=((0.54)*r20);
IkReal x2050=(sj4*sj5);
IkReal x2051=(cj5*sj3);
IkReal x2052=(cj3*cj5);
IkReal x2053=((0.15)*cj5);
IkReal x2054=(r11*sj0);
IkReal x2055=((0.54)*r01);
IkReal x2056=((0.54)*r00);
IkReal x2057=(cj3*sj0);
IkReal x2058=(cj4*sj5);
IkReal x2059=((1.0)*py);
IkReal x2060=(cj0*r21);
IkReal x2061=((0.54)*sj4);
IkReal x2062=((0.54)*r10);
IkReal x2063=(cj0*r11);
IkReal x2064=(cj5*sj4);
IkReal x2065=((1.0)*px);
IkReal x2066=((0.54)*cj4);
IkReal x2067=(cj0*cj3);
IkReal x2068=((1.0)*pz);
IkReal x2069=((0.71)*x2045);
IkReal x2070=(cj0*x2066);
IkReal x2071=((0.54)*sj3*sj5);
IkReal x2072=((0.71)*x2046);
IkReal x2073=(cj0*sj0*x2069);
evalcond[0]=(((r22*x2066))+(((-1.0)*cj5*r21*x2061))+(((-1.0)*x2072))+(((-1.0)*x2049*x2050))+(((-1.0)*r21*x2047))+pz+((r20*x2053)));
evalcond[1]=(((x2069*(sj0*sj0)))+((cj5*x2054*x2061))+((x2047*x2054))+(((-1.0)*sj0*x2059))+(((-1.0)*r10*sj0*x2053))+(((-1.0)*r12*sj0*x2066))+((sj0*x2050*x2062)));
evalcond[2]=((((-1.0)*r02*x2070))+((x2069*(cj0*cj0)))+((cj0*x2055*x2064))+((cj0*x2050*x2056))+(((-1.0)*cj0*x2065))+(((-1.0)*cj0*r00*x2053))+((cj0*r01*x2047)));
evalcond[3]=((((-1.0)*sj0*x2068))+(((-1.0)*r11*x2071))+((cj3*x2058*x2062))+((cj3*r12*x2061))+((r11*x2052*x2066))+(((-1.0)*r20*sj0*x2053))+((sj0*x2072))+((x2047*x2048))+((x2051*x2062)));
evalcond[4]=((((-1.0)*sj3*sj5*x2055))+((cj3*r02*x2061))+((cj3*x2056*x2058))+(((-1.0)*cj0*x2068))+((x2047*x2060))+((cj4*x2052*x2055))+((x2051*x2056))+(((-1.0)*cj0*r20*x2053))+((cj0*x2072)));
evalcond[5]=((((-1.0)*x2048*x2052*x2066))+(((-1.0)*r10*x2053))+(((-1.0)*x2049*x2057*x2058))+((r11*x2047))+(((-1.0)*sj0*x2049*x2051))+(((-1.0)*r22*x2057*x2061))+((sj0*x2069))+(((-1.0)*x2059))+((x2048*x2071)));
evalcond[6]=(((cj0*x2069))+(((-1.0)*x2049*x2058*x2067))+(((-1.0)*r00*x2053))+(((-1.0)*x2065))+((x2060*x2071))+(((-1.0)*r22*x2061*x2067))+(((-1.0)*x2052*x2060*x2066))+(((-1.0)*cj0*x2049*x2051))+((r01*x2047)));
evalcond[7]=((((-1.0)*sj0*x2065))+(((-1.0)*r12*x2070))+x2073+(((-1.0)*r00*sj0*x2053))+((cj0*x2050*x2062))+((r01*sj0*x2047))+((cj5*x2061*x2063)));
evalcond[8]=((((-1.0)*r02*sj0*x2066))+x2073+((sj0*x2050*x2056))+(((-1.0)*cj0*r10*x2053))+((x2047*x2063))+(((-1.0)*cj0*x2059))+((sj0*x2055*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2074=((1.0)*cj4);
IkReal x2075=(sj1*sj4);
IkReal x2076=(r20*sj5);
IkReal x2077=(cj5*r01);
IkReal x2078=(cj5*r21);
IkReal x2079=(cj1*sj4);
IkReal x2080=(r00*sj5);
if( IKabs((((x2075*x2077))+(((-1.0)*r02*sj1*x2074))+(((-1.0)*cj1*r22*x2074))+((x2076*x2079))+((x2075*x2080))+((x2078*x2079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2075*x2076))+(((-1.0)*x2075*x2078))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2074))+((x2077*x2079))+((x2079*x2080)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2075*x2077))+(((-1.0)*r02*sj1*x2074))+(((-1.0)*cj1*r22*x2074))+((x2076*x2079))+((x2075*x2080))+((x2078*x2079))))+IKsqr(((((-1.0)*x2075*x2076))+(((-1.0)*x2075*x2078))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2074))+((x2077*x2079))+((x2079*x2080))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2075*x2077))+(((-1.0)*r02*sj1*x2074))+(((-1.0)*cj1*r22*x2074))+((x2076*x2079))+((x2075*x2080))+((x2078*x2079))), ((((-1.0)*x2075*x2076))+(((-1.0)*x2075*x2078))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2074))+((x2077*x2079))+((x2079*x2080))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2081=IKsin(j2);
IkReal x2082=IKcos(j2);
IkReal x2083=(cj3*sj4);
IkReal x2084=(r21*sj5);
IkReal x2085=(cj5*sj4);
IkReal x2086=((0.15)*cj5);
IkReal x2087=((1.0)*cj4);
IkReal x2088=(sj4*sj5);
IkReal x2089=((1.0)*sj3);
IkReal x2090=(cj5*sj3);
IkReal x2091=(r01*sj5);
IkReal x2092=(sj1*x2082);
IkReal x2093=(cj1*x2082);
IkReal x2094=(cj3*cj4*sj5);
IkReal x2095=((0.54)*x2081);
IkReal x2096=(sj1*x2081);
IkReal x2097=(cj3*cj4*cj5);
IkReal x2098=((1.0)*cj1*x2081);
evalcond[0]=((((-1.0)*x2098))+(((-1.0)*r22*x2087))+x2092+((r20*x2088))+((r21*x2085)));
evalcond[1]=((((-1.0)*r02*x2087))+((r01*x2085))+((r00*x2088))+(((-1.0)*x2093))+(((-1.0)*x2096)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2095))+(((-0.54)*x2092))+(((-1.0)*r20*x2086))+(((0.15)*x2084))+(((-1.0)*pz)));
evalcond[3]=(((sj1*x2095))+(((0.54)*x2093))+(((-1.0)*px))+(((0.71)*sj1))+(((-1.0)*r00*x2086))+(((0.15)*x2091)));
evalcond[4]=(((r20*x2090))+((r20*x2094))+x2096+x2093+(((-1.0)*x2084*x2089))+((r21*x2097))+((r22*x2083)));
evalcond[5]=((((-1.0)*x2098))+((r02*x2083))+x2092+((r01*x2097))+((r00*x2090))+((r00*x2094))+(((-1.0)*x2089*x2091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2099=(cj4*r22);
IkReal x2100=((1.0)*cj1);
IkReal x2101=(r20*sj5);
IkReal x2102=(cj4*r02);
IkReal x2103=(cj5*r21);
IkReal x2104=(cj1*sj4);
IkReal x2105=(cj5*r01);
IkReal x2106=(r00*sj5);
IkReal x2107=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2106*x2107))+((x2103*x2104))+(((-1.0)*x2105*x2107))+(((-1.0)*x2099*x2100))+((x2101*x2104))+((sj1*x2102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2103*x2107))+((sj1*x2099))+(((-1.0)*x2101*x2107))+(((-1.0)*sj4*x2100*x2105))+(((-1.0)*sj4*x2100*x2106))+((cj1*x2102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2106*x2107))+((x2103*x2104))+(((-1.0)*x2105*x2107))+(((-1.0)*x2099*x2100))+((x2101*x2104))+((sj1*x2102))))+IKsqr(((((-1.0)*x2103*x2107))+((sj1*x2099))+(((-1.0)*x2101*x2107))+(((-1.0)*sj4*x2100*x2105))+(((-1.0)*sj4*x2100*x2106))+((cj1*x2102))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2106*x2107))+((x2103*x2104))+(((-1.0)*x2105*x2107))+(((-1.0)*x2099*x2100))+((x2101*x2104))+((sj1*x2102))), ((((-1.0)*x2103*x2107))+((sj1*x2099))+(((-1.0)*x2101*x2107))+(((-1.0)*sj4*x2100*x2105))+(((-1.0)*sj4*x2100*x2106))+((cj1*x2102))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2108=IKcos(j2);
IkReal x2109=IKsin(j2);
IkReal x2110=(cj3*sj4);
IkReal x2111=(r21*sj5);
IkReal x2112=(cj5*sj4);
IkReal x2113=((0.15)*cj5);
IkReal x2114=((1.0)*cj4);
IkReal x2115=(sj4*sj5);
IkReal x2116=((1.0)*sj3);
IkReal x2117=(cj5*sj3);
IkReal x2118=(r01*sj5);
IkReal x2119=(cj1*x2108);
IkReal x2120=(sj1*x2109);
IkReal x2121=(cj3*cj4*sj5);
IkReal x2122=(cj1*x2109);
IkReal x2123=(sj1*x2108);
IkReal x2124=(cj3*cj4*cj5);
IkReal x2125=(x2120+x2119);
evalcond[0]=(((r01*x2112))+((r00*x2115))+x2125+(((-1.0)*r02*x2114)));
evalcond[1]=(((r21*x2112))+x2123+(((-1.0)*x2122))+((r20*x2115))+(((-1.0)*r22*x2114)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x2113))+(((0.15)*x2111))+(((0.54)*x2122))+(((-1.0)*pz))+(((-0.54)*x2123)));
evalcond[3]=((((-0.54)*x2119))+(((-1.0)*r00*x2113))+(((0.15)*x2118))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x2120)));
evalcond[4]=(((r20*x2121))+x2125+((r21*x2124))+((r20*x2117))+(((-1.0)*x2111*x2116))+((r22*x2110)));
evalcond[5]=((((-1.0)*x2116*x2118))+((r00*x2117))+x2122+(((-1.0)*x2123))+((r02*x2110))+((r01*x2124))+((r00*x2121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2126=((1.0)*cj4);
IkReal x2127=(r20*sj5);
IkReal x2128=((1.0)*sj1*sj4);
IkReal x2129=(cj1*cj5*sj4);
IkReal x2130=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x2126))+((cj5*r11*sj1*sj4))+((r21*x2129))+(((-1.0)*cj1*r22*x2126))+((sj1*x2130))+((cj1*sj4*x2127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22*sj1))+((r11*x2129))+(((-1.0)*x2127*x2128))+((cj1*x2130))+(((-1.0)*cj1*r12*x2126))+(((-1.0)*cj5*r21*x2128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x2126))+((cj5*r11*sj1*sj4))+((r21*x2129))+(((-1.0)*cj1*r22*x2126))+((sj1*x2130))+((cj1*sj4*x2127))))+IKsqr((((cj4*r22*sj1))+((r11*x2129))+(((-1.0)*x2127*x2128))+((cj1*x2130))+(((-1.0)*cj1*r12*x2126))+(((-1.0)*cj5*r21*x2128))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x2126))+((cj5*r11*sj1*sj4))+((r21*x2129))+(((-1.0)*cj1*r22*x2126))+((sj1*x2130))+((cj1*sj4*x2127))), (((cj4*r22*sj1))+((r11*x2129))+(((-1.0)*x2127*x2128))+((cj1*x2130))+(((-1.0)*cj1*r12*x2126))+(((-1.0)*cj5*r21*x2128))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2131=IKsin(j2);
IkReal x2132=IKcos(j2);
IkReal x2133=((0.15)*sj5);
IkReal x2134=((0.15)*cj5);
IkReal x2135=(cj5*sj4);
IkReal x2136=(cj3*cj4);
IkReal x2137=(r20*sj5);
IkReal x2138=(cj3*sj4);
IkReal x2139=(r10*sj5);
IkReal x2140=((1.0)*cj4);
IkReal x2141=(cj5*sj3);
IkReal x2142=(sj1*x2132);
IkReal x2143=(cj1*x2132);
IkReal x2144=((0.54)*x2131);
IkReal x2145=((1.0)*sj3*sj5);
IkReal x2146=(sj1*x2131);
IkReal x2147=((1.0)*cj1*x2131);
evalcond[0]=(((r21*x2135))+((sj4*x2137))+x2142+(((-1.0)*x2147))+(((-1.0)*r22*x2140)));
evalcond[1]=((((-1.0)*x2143))+(((-1.0)*x2146))+((r11*x2135))+((sj4*x2139))+(((-1.0)*r12*x2140)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2144))+((r21*x2133))+(((-0.54)*x2142))+(((-1.0)*pz))+(((-1.0)*r20*x2134)));
evalcond[3]=(((r11*x2133))+(((0.54)*x2143))+(((-1.0)*py))+((sj1*x2144))+(((0.71)*sj1))+(((-1.0)*r10*x2134)));
evalcond[4]=(((x2136*x2137))+((r20*x2141))+x2146+x2143+((r22*x2138))+(((-1.0)*r21*x2145))+((cj5*r21*x2136)));
evalcond[5]=(((x2136*x2139))+((r12*x2138))+x2142+(((-1.0)*x2147))+(((-1.0)*r11*x2145))+((cj5*r11*x2136))+((r10*x2141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2148=(cj1*cj4);
IkReal x2149=(r20*sj5);
IkReal x2150=(cj4*sj1);
IkReal x2151=(cj5*r21);
IkReal x2152=(cj1*sj4);
IkReal x2153=(cj5*r11);
IkReal x2154=(r10*sj5);
IkReal x2155=((1.0)*sj1*sj4);
if( IKabs((((x2149*x2152))+(((-1.0)*x2153*x2155))+((x2151*x2152))+(((-1.0)*r22*x2148))+(((-1.0)*x2154*x2155))+((r12*x2150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2149*x2155))+(((-1.0)*x2152*x2154))+(((-1.0)*x2152*x2153))+((r22*x2150))+((r12*x2148))+(((-1.0)*x2151*x2155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2149*x2152))+(((-1.0)*x2153*x2155))+((x2151*x2152))+(((-1.0)*r22*x2148))+(((-1.0)*x2154*x2155))+((r12*x2150))))+IKsqr(((((-1.0)*x2149*x2155))+(((-1.0)*x2152*x2154))+(((-1.0)*x2152*x2153))+((r22*x2150))+((r12*x2148))+(((-1.0)*x2151*x2155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2149*x2152))+(((-1.0)*x2153*x2155))+((x2151*x2152))+(((-1.0)*r22*x2148))+(((-1.0)*x2154*x2155))+((r12*x2150))), ((((-1.0)*x2149*x2155))+(((-1.0)*x2152*x2154))+(((-1.0)*x2152*x2153))+((r22*x2150))+((r12*x2148))+(((-1.0)*x2151*x2155))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2156=IKcos(j2);
IkReal x2157=IKsin(j2);
IkReal x2158=((0.15)*sj5);
IkReal x2159=((0.15)*cj5);
IkReal x2160=(r10*sj5);
IkReal x2161=(cj5*sj4);
IkReal x2162=(cj3*cj4);
IkReal x2163=(r20*sj5);
IkReal x2164=(cj3*sj4);
IkReal x2165=((1.0)*cj4);
IkReal x2166=(cj5*sj3);
IkReal x2167=(cj1*x2156);
IkReal x2168=(sj1*x2157);
IkReal x2169=(cj1*x2157);
IkReal x2170=(sj1*x2156);
IkReal x2171=((1.0)*sj3*sj5);
IkReal x2172=(x2168+x2167);
evalcond[0]=(x2172+((sj4*x2160))+(((-1.0)*r12*x2165))+((r11*x2161)));
evalcond[1]=(x2170+((r21*x2161))+((sj4*x2163))+(((-1.0)*r22*x2165))+(((-1.0)*x2169)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x2169))+(((-1.0)*pz))+((r21*x2158))+(((-1.0)*r20*x2159))+(((-0.54)*x2170)));
evalcond[3]=((((-0.54)*x2167))+(((-0.54)*x2168))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x2159))+((r11*x2158)));
evalcond[4]=((((-1.0)*r21*x2171))+((cj5*r21*x2162))+x2172+((r20*x2166))+((x2162*x2163))+((r22*x2164)));
evalcond[5]=(((r12*x2164))+x2169+((cj5*r11*x2162))+((r10*x2166))+(((-1.0)*x2170))+((x2160*x2162))+(((-1.0)*r11*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2173=(cj5*sj4);
IkReal x2174=((1.0)*sj0);
IkReal x2175=(cj4*r22);
IkReal x2176=(cj1*sj4*sj5);
IkReal x2177=((1.0)*cj4*r12);
IkReal x2178=(sj1*sj4*sj5);
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x2174*x2175))+((cj1*r21*sj0*x2173))+(((-1.0)*sj1*x2177))+((r20*sj0*x2176))+((r10*x2178))+((r11*sj1*x2173)))),IkReal((((cj1*r11*x2173))+((sj0*sj1*x2175))+(((-1.0)*r21*sj1*x2173*x2174))+(((-1.0)*r20*x2174*x2178))+((r10*x2176))+(((-1.0)*cj1*x2177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
CheckValue<IkReal> x2180=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2180.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2179.value)+(((1.5707963267949)*(x2180.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2181=IKsin(j2);
IkReal x2182=IKcos(j2);
IkReal x2183=(cj3*sj4);
IkReal x2184=(cj0*sj1);
IkReal x2185=((0.15)*sj5);
IkReal x2186=((0.15)*cj5);
IkReal x2187=(cj5*r01);
IkReal x2188=(cj3*cj4);
IkReal x2189=(cj5*sj4);
IkReal x2190=((1.0)*cj0);
IkReal x2191=(r20*sj5);
IkReal x2192=(sj0*sj1);
IkReal x2193=(r10*sj5);
IkReal x2194=((1.0)*cj4);
IkReal x2195=(cj5*sj3);
IkReal x2196=(r00*sj5);
IkReal x2197=(cj1*x2182);
IkReal x2198=((0.54)*x2181);
IkReal x2199=((1.0)*x2181);
IkReal x2200=((1.0)*sj3*sj5);
IkReal x2201=(sj1*x2182);
IkReal x2202=(sj0*x2199);
evalcond[0]=(x2201+((r21*x2189))+((sj4*x2191))+(((-1.0)*r22*x2194))+(((-1.0)*cj1*x2199)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*r20*x2186))+((cj1*x2198))+(((-1.0)*pz))+((r21*x2185))+(((-0.54)*x2201)));
evalcond[2]=((((-1.0)*r02*x2194))+((sj4*x2196))+(((-1.0)*x2184*x2199))+((sj4*x2187))+(((-1.0)*x2190*x2197)));
evalcond[3]=((((-1.0)*x2192*x2199))+((sj4*x2193))+((r11*x2189))+(((-1.0)*sj0*x2197))+(((-1.0)*r12*x2194)));
evalcond[4]=((((0.71)*x2184))+(((0.54)*cj0*x2197))+(((-1.0)*px))+((r01*x2185))+((x2184*x2198))+(((-1.0)*r00*x2186)));
evalcond[5]=(((x2192*x2198))+(((0.71)*x2192))+(((-1.0)*r10*x2186))+(((-1.0)*py))+(((0.54)*sj0*x2197))+((r11*x2185)));
evalcond[6]=(((r22*x2183))+x2197+((cj5*r21*x2188))+((sj1*x2181))+((r20*x2195))+(((-1.0)*r21*x2200))+((x2188*x2191)));
evalcond[7]=(((x2182*x2184))+((x2187*x2188))+((r02*x2183))+((x2188*x2196))+(((-1.0)*cj1*x2181*x2190))+((r00*x2195))+(((-1.0)*r01*x2200)));
evalcond[8]=((((-1.0)*cj1*x2202))+(((-1.0)*r11*x2200))+((r12*x2183))+((x2182*x2192))+((x2188*x2193))+((r10*x2195))+((cj5*r11*x2188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2203=(sj1*sj4);
IkReal x2204=(cj5*r01);
IkReal x2205=((1.0)*cj0);
IkReal x2206=(r20*sj5);
IkReal x2207=(cj4*r22);
IkReal x2208=(r00*sj5);
IkReal x2209=(cj1*sj4);
IkReal x2210=(cj5*r21);
IkReal x2211=((1.0)*cj4*r02);
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2212.valid){
continue;
}
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2211))+((x2203*x2204))+((x2203*x2208))+((cj0*x2206*x2209))+((cj0*x2209*x2210))+(((-1.0)*cj1*x2205*x2207)))),IkReal((((cj0*sj1*x2207))+(((-1.0)*cj1*x2211))+((x2204*x2209))+(((-1.0)*x2203*x2205*x2210))+(((-1.0)*x2203*x2205*x2206))+((x2208*x2209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2212.value)))+(x2213.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2214=IKsin(j2);
IkReal x2215=IKcos(j2);
IkReal x2216=(cj3*sj4);
IkReal x2217=(cj0*sj1);
IkReal x2218=((0.15)*sj5);
IkReal x2219=((0.15)*cj5);
IkReal x2220=(cj5*r01);
IkReal x2221=(cj3*cj4);
IkReal x2222=(cj5*sj4);
IkReal x2223=((1.0)*cj0);
IkReal x2224=(r20*sj5);
IkReal x2225=(sj0*sj1);
IkReal x2226=(r10*sj5);
IkReal x2227=((1.0)*cj4);
IkReal x2228=(cj5*sj3);
IkReal x2229=(r00*sj5);
IkReal x2230=(cj1*x2215);
IkReal x2231=((0.54)*x2214);
IkReal x2232=((1.0)*x2214);
IkReal x2233=((1.0)*sj3*sj5);
IkReal x2234=(sj1*x2215);
IkReal x2235=(sj0*x2232);
evalcond[0]=((((-1.0)*cj1*x2232))+x2234+((r21*x2222))+(((-1.0)*r22*x2227))+((sj4*x2224)));
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2234))+(((-1.0)*pz))+(((-1.0)*r20*x2219))+((r21*x2218))+((cj1*x2231)));
evalcond[2]=((((-1.0)*x2217*x2232))+(((-1.0)*x2223*x2230))+(((-1.0)*r02*x2227))+((sj4*x2220))+((sj4*x2229)));
evalcond[3]=((((-1.0)*x2225*x2232))+(((-1.0)*r12*x2227))+(((-1.0)*sj0*x2230))+((r11*x2222))+((sj4*x2226)));
evalcond[4]=(((r01*x2218))+(((0.54)*cj0*x2230))+(((-1.0)*px))+((x2217*x2231))+(((0.71)*x2217))+(((-1.0)*r00*x2219)));
evalcond[5]=((((-1.0)*r10*x2219))+((x2225*x2231))+((r11*x2218))+(((0.71)*x2225))+(((-1.0)*py))+(((0.54)*sj0*x2230)));
evalcond[6]=((((-1.0)*r21*x2233))+x2230+((cj5*r21*x2221))+((r20*x2228))+((sj1*x2214))+((x2221*x2224))+((r22*x2216)));
evalcond[7]=((((-1.0)*cj1*x2214*x2223))+(((-1.0)*r01*x2233))+((x2220*x2221))+((r00*x2228))+((x2215*x2217))+((x2221*x2229))+((r02*x2216)));
evalcond[8]=((((-1.0)*cj1*x2235))+((x2215*x2225))+((cj5*r11*x2221))+((r12*x2216))+((r10*x2228))+(((-1.0)*r11*x2233))+((x2221*x2226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2236=(cj0*r21);
IkReal x2237=((1.0)*cj5);
IkReal x2238=((1.0)*cj0);
CheckValue<IkReal> x2239 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2237))+((sj5*x2236)))),IkReal(((((-1.0)*cj4*r20*sj5*x2238))+(((-1.0)*r22*sj4*x2238))+(((-1.0)*cj4*x2236*x2237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2239.valid){
continue;
}
CheckValue<IkReal> x2240=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((r00*sj4*sj5))+((cj5*r01*sj4)))),-1);
if(!x2240.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2239.value)+(((1.5707963267949)*(x2240.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2241=IKsin(j3);
IkReal x2242=IKcos(j3);
IkReal x2243=(sj4*x2241);
IkReal x2244=(sj5*x2242);
IkReal x2245=(cj4*cj5*x2241);
IkReal x2246=(cj4*sj5*x2241);
IkReal x2247=((1.0)*cj5*x2242);
evalcond[0]=(((r20*x2246))+((r21*x2245))+((r21*x2244))+(((-1.0)*r20*x2247))+((r22*x2243)));
evalcond[1]=(((r10*x2246))+cj0+((r11*x2245))+((r11*x2244))+(((-1.0)*r10*x2247))+((r12*x2243)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2247))+((r01*x2245))+((r01*x2244))+((r00*x2246))+((r02*x2243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2248=((0.76056338028169)*sj4);
IkReal x2249=((0.211267605633803)*sj5);
IkReal x2250=((0.76056338028169)*cj4);
IkReal x2251=((0.211267605633803)*cj5);
if( IKabs((((r10*x2251))+((r12*x2250))+(((-1.0)*r10*sj5*x2248))+(((-1.0)*r11*x2249))+(((-1.0)*cj5*r11*x2248))+(((1.40845070422535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x2248))+(((-1.0)*cj5*r21*x2248))+((r20*x2251))+(((1.40845070422535)*pz))+((r22*x2250))+(((-1.0)*r21*x2249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x2251))+((r12*x2250))+(((-1.0)*r10*sj5*x2248))+(((-1.0)*r11*x2249))+(((-1.0)*cj5*r11*x2248))+(((1.40845070422535)*py))))+IKsqr(((((-1.0)*r20*sj5*x2248))+(((-1.0)*cj5*r21*x2248))+((r20*x2251))+(((1.40845070422535)*pz))+((r22*x2250))+(((-1.0)*r21*x2249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x2251))+((r12*x2250))+(((-1.0)*r10*sj5*x2248))+(((-1.0)*r11*x2249))+(((-1.0)*cj5*r11*x2248))+(((1.40845070422535)*py))), ((((-1.0)*r20*sj5*x2248))+(((-1.0)*cj5*r21*x2248))+((r20*x2251))+(((1.40845070422535)*pz))+((r22*x2250))+(((-1.0)*r21*x2249))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2252=((1.0)*py);
IkReal x2253=((0.54)*sj5);
IkReal x2254=((0.15)*sj5);
IkReal x2255=(cj5*r10);
IkReal x2256=((0.54)*cj5);
IkReal x2257=(cj3*cj4);
IkReal x2258=((0.54)*r12);
IkReal x2259=(cj3*sj4);
IkReal x2260=((0.54)*r22);
IkReal x2261=((0.71)*(IKsin(j1)));
IkReal x2262=(r11*x2254);
IkReal x2263=((0.15)*x2255);
IkReal x2264=(r21*x2254);
IkReal x2265=((0.71)*(IKcos(j1)));
IkReal x2266=((0.15)*cj5*r20);
IkReal x2267=(x2263+x2252);
IkReal x2268=(x2264+x2265);
IkReal x2269=(x2262+x2261);
evalcond[0]=(x2266+((cj4*x2260))+pz+(((-1.0)*r20*sj4*x2253))+(((-1.0)*x2268))+(((-1.0)*r21*sj4*x2256)));
evalcond[1]=(((r10*sj4*x2253))+(((-1.0)*cj4*x2258))+x2269+((r11*sj4*x2256))+(((-1.0)*x2267)));
evalcond[2]=((((-1.0)*r20*x2253*x2257))+(((-1.0)*r20*sj3*x2256))+((r21*sj3*x2253))+x2269+(((-1.0)*r21*x2256*x2257))+(((-1.0)*x2259*x2260))+(((-1.0)*x2267)));
evalcond[3]=(((r11*x2256*x2257))+x2268+((x2258*x2259))+(((-1.0)*pz))+((r10*x2253*x2257))+(((-1.0)*x2266))+(((-1.0)*r11*sj3*x2253))+(((0.54)*sj3*x2255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2270=((1.0)*cj4);
IkReal x2271=(r20*sj5);
IkReal x2272=((1.0)*sj1*sj4);
IkReal x2273=(cj1*cj5*sj4);
IkReal x2274=(r10*sj4*sj5);
if( IKabs((((r21*x2273))+((sj1*x2274))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x2270))+(((-1.0)*r12*sj1*x2270))+((cj1*sj4*x2271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x2272))+((cj1*x2274))+((cj4*r22*sj1))+((r11*x2273))+(((-1.0)*cj1*r12*x2270))+(((-1.0)*x2271*x2272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x2273))+((sj1*x2274))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x2270))+(((-1.0)*r12*sj1*x2270))+((cj1*sj4*x2271))))+IKsqr(((((-1.0)*cj5*r21*x2272))+((cj1*x2274))+((cj4*r22*sj1))+((r11*x2273))+(((-1.0)*cj1*r12*x2270))+(((-1.0)*x2271*x2272))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x2273))+((sj1*x2274))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x2270))+(((-1.0)*r12*sj1*x2270))+((cj1*sj4*x2271))), ((((-1.0)*cj5*r21*x2272))+((cj1*x2274))+((cj4*r22*sj1))+((r11*x2273))+(((-1.0)*cj1*r12*x2270))+(((-1.0)*x2271*x2272))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2275=IKsin(j2);
IkReal x2276=IKcos(j2);
IkReal x2277=((0.15)*sj5);
IkReal x2278=((0.15)*cj5);
IkReal x2279=(cj5*sj4);
IkReal x2280=(cj3*cj4);
IkReal x2281=(r20*sj5);
IkReal x2282=(cj3*sj4);
IkReal x2283=(r10*sj5);
IkReal x2284=((1.0)*cj4);
IkReal x2285=(cj5*sj3);
IkReal x2286=(sj1*x2276);
IkReal x2287=(cj1*x2276);
IkReal x2288=((0.54)*x2275);
IkReal x2289=((1.0)*sj3*sj5);
IkReal x2290=(sj1*x2275);
IkReal x2291=((1.0)*cj1*x2275);
evalcond[0]=(((r21*x2279))+x2286+((sj4*x2281))+(((-1.0)*x2291))+(((-1.0)*r22*x2284)));
evalcond[1]=((((-1.0)*r12*x2284))+(((-1.0)*x2287))+(((-1.0)*x2290))+((r11*x2279))+((sj4*x2283)));
evalcond[2]=((((0.71)*cj1))+((r21*x2277))+(((-1.0)*r20*x2278))+(((-1.0)*pz))+((cj1*x2288))+(((-0.54)*x2286)));
evalcond[3]=((((-1.0)*py))+((sj1*x2288))+((r11*x2277))+(((-1.0)*r10*x2278))+(((0.71)*sj1))+(((0.54)*x2287)));
evalcond[4]=(x2287+x2290+((r20*x2285))+((x2280*x2281))+((cj5*r21*x2280))+(((-1.0)*r21*x2289))+((r22*x2282)));
evalcond[5]=(((r10*x2285))+x2286+((r12*x2282))+(((-1.0)*r11*x2289))+((x2280*x2283))+(((-1.0)*x2291))+((cj5*r11*x2280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2292=((0.76056338028169)*sj4);
IkReal x2293=((0.211267605633803)*sj5);
IkReal x2294=((0.76056338028169)*cj4);
IkReal x2295=((0.211267605633803)*cj5);
if( IKabs((((cj5*r11*x2292))+((r10*sj5*x2292))+(((-1.40845070422535)*py))+(((-1.0)*r12*x2294))+(((-1.0)*r10*x2295))+((r11*x2293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x2292))+((r22*x2294))+(((1.40845070422535)*pz))+((r20*x2295))+(((-1.0)*cj5*r21*x2292))+(((-1.0)*r21*x2293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*x2292))+((r10*sj5*x2292))+(((-1.40845070422535)*py))+(((-1.0)*r12*x2294))+(((-1.0)*r10*x2295))+((r11*x2293))))+IKsqr(((((-1.0)*r20*sj5*x2292))+((r22*x2294))+(((1.40845070422535)*pz))+((r20*x2295))+(((-1.0)*cj5*r21*x2292))+(((-1.0)*r21*x2293))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r11*x2292))+((r10*sj5*x2292))+(((-1.40845070422535)*py))+(((-1.0)*r12*x2294))+(((-1.0)*r10*x2295))+((r11*x2293))), ((((-1.0)*r20*sj5*x2292))+((r22*x2294))+(((1.40845070422535)*pz))+((r20*x2295))+(((-1.0)*cj5*r21*x2292))+(((-1.0)*r21*x2293))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2296=(r21*sj5);
IkReal x2297=((0.54)*sj3);
IkReal x2298=(cj5*r10);
IkReal x2299=((0.54)*sj4);
IkReal x2300=(cj5*r11);
IkReal x2301=(r20*sj5);
IkReal x2302=(cj5*r20);
IkReal x2303=(cj5*r21);
IkReal x2304=((0.54)*cj4);
IkReal x2305=(r11*sj5);
IkReal x2306=(r10*sj5);
IkReal x2307=((0.15)*x2302);
IkReal x2308=((0.15)*x2296);
IkReal x2309=((0.71)*(IKcos(j1)));
IkReal x2310=((0.15)*x2305);
IkReal x2311=((0.71)*(IKsin(j1)));
IkReal x2312=((0.15)*x2298);
IkReal x2313=(x2307+pz);
IkReal x2314=(x2309+x2308);
IkReal x2315=(x2312+x2311);
evalcond[0]=(x2313+((r22*x2304))+(((-1.0)*x2299*x2303))+(((-1.0)*x2299*x2301))+(((-1.0)*x2314)));
evalcond[1]=(((r12*x2304))+x2315+py+(((-1.0)*x2299*x2300))+(((-1.0)*x2299*x2306))+(((-1.0)*x2310)));
evalcond[2]=(((cj3*r12*x2299))+((cj3*x2300*x2304))+x2313+(((-1.0)*x2297*x2305))+((cj3*x2304*x2306))+(((-1.0)*x2314))+((x2297*x2298)));
evalcond[3]=(x2310+((cj3*x2303*x2304))+((x2297*x2302))+(((-1.0)*py))+((cj3*r22*x2299))+(((-1.0)*x2296*x2297))+((cj3*x2301*x2304))+(((-1.0)*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2316=(cj1*cj4);
IkReal x2317=(r20*sj5);
IkReal x2318=(cj4*sj1);
IkReal x2319=(cj5*r21);
IkReal x2320=(cj1*sj4);
IkReal x2321=(cj5*r11);
IkReal x2322=(r10*sj5);
IkReal x2323=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2321*x2323))+((x2317*x2320))+((x2319*x2320))+(((-1.0)*x2322*x2323))+((r12*x2318))+(((-1.0)*r22*x2316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2320*x2322))+(((-1.0)*x2320*x2321))+((r22*x2318))+(((-1.0)*x2319*x2323))+((r12*x2316))+(((-1.0)*x2317*x2323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2321*x2323))+((x2317*x2320))+((x2319*x2320))+(((-1.0)*x2322*x2323))+((r12*x2318))+(((-1.0)*r22*x2316))))+IKsqr(((((-1.0)*x2320*x2322))+(((-1.0)*x2320*x2321))+((r22*x2318))+(((-1.0)*x2319*x2323))+((r12*x2316))+(((-1.0)*x2317*x2323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2321*x2323))+((x2317*x2320))+((x2319*x2320))+(((-1.0)*x2322*x2323))+((r12*x2318))+(((-1.0)*r22*x2316))), ((((-1.0)*x2320*x2322))+(((-1.0)*x2320*x2321))+((r22*x2318))+(((-1.0)*x2319*x2323))+((r12*x2316))+(((-1.0)*x2317*x2323))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2324=IKcos(j2);
IkReal x2325=IKsin(j2);
IkReal x2326=((0.15)*sj5);
IkReal x2327=((0.15)*cj5);
IkReal x2328=(r10*sj5);
IkReal x2329=(cj5*sj4);
IkReal x2330=(cj3*cj4);
IkReal x2331=(r20*sj5);
IkReal x2332=(cj3*sj4);
IkReal x2333=((1.0)*cj4);
IkReal x2334=(cj5*sj3);
IkReal x2335=(cj1*x2324);
IkReal x2336=(sj1*x2325);
IkReal x2337=(cj1*x2325);
IkReal x2338=(sj1*x2324);
IkReal x2339=((1.0)*sj3*sj5);
IkReal x2340=(x2335+x2336);
evalcond[0]=(x2340+((r11*x2329))+((sj4*x2328))+(((-1.0)*r12*x2333)));
evalcond[1]=(x2338+((r21*x2329))+(((-1.0)*r22*x2333))+((sj4*x2331))+(((-1.0)*x2337)));
evalcond[2]=((((0.71)*cj1))+((r21*x2326))+(((0.54)*x2337))+(((-1.0)*pz))+(((-0.54)*x2338))+(((-1.0)*r20*x2327)));
evalcond[3]=(((r11*x2326))+(((-0.71)*sj1))+(((-1.0)*r10*x2327))+(((-1.0)*py))+(((-0.54)*x2335))+(((-0.54)*x2336)));
evalcond[4]=(x2340+((r22*x2332))+((cj5*r21*x2330))+(((-1.0)*r21*x2339))+((r20*x2334))+((x2330*x2331)));
evalcond[5]=(x2337+((r12*x2332))+(((-1.0)*r11*x2339))+((cj5*r11*x2330))+(((-1.0)*x2338))+((r10*x2334))+((x2328*x2330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2341=((0.76056338028169)*sj4);
IkReal x2342=((0.211267605633803)*sj5);
IkReal x2343=((0.76056338028169)*cj4);
IkReal x2344=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*cj5*r01*x2341))+(((-1.0)*r01*x2342))+((r00*x2344))+(((-1.0)*r00*sj5*x2341))+(((1.40845070422535)*px))+((r02*x2343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2342))+((r22*x2343))+((r20*x2344))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2341))+(((-1.0)*r20*sj5*x2341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r01*x2341))+(((-1.0)*r01*x2342))+((r00*x2344))+(((-1.0)*r00*sj5*x2341))+(((1.40845070422535)*px))+((r02*x2343))))+IKsqr(((((-1.0)*r21*x2342))+((r22*x2343))+((r20*x2344))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2341))+(((-1.0)*r20*sj5*x2341))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r01*x2341))+(((-1.0)*r01*x2342))+((r00*x2344))+(((-1.0)*r00*sj5*x2341))+(((1.40845070422535)*px))+((r02*x2343))), ((((-1.0)*r21*x2342))+((r22*x2343))+((r20*x2344))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2341))+(((-1.0)*r20*sj5*x2341))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2345=((1.0)*px);
IkReal x2346=((0.54)*sj5);
IkReal x2347=((0.15)*sj5);
IkReal x2348=((0.54)*cj5);
IkReal x2349=(cj3*cj4);
IkReal x2350=((0.15)*cj5);
IkReal x2351=((0.54)*r02);
IkReal x2352=(cj3*sj4);
IkReal x2353=((0.54)*r22);
IkReal x2354=(r01*x2347);
IkReal x2355=((0.71)*(IKsin(j1)));
IkReal x2356=(r00*x2350);
IkReal x2357=(r21*x2347);
IkReal x2358=((0.71)*(IKcos(j1)));
IkReal x2359=(r20*x2350);
IkReal x2360=(x2356+x2345);
IkReal x2361=(x2358+x2357);
IkReal x2362=(x2354+x2355);
evalcond[0]=(((cj4*x2353))+x2359+(((-1.0)*x2361))+(((-1.0)*r21*sj4*x2348))+pz+(((-1.0)*r20*sj4*x2346)));
evalcond[1]=(((r01*sj4*x2348))+x2362+(((-1.0)*x2360))+((r00*sj4*x2346))+(((-1.0)*cj4*x2351)));
evalcond[2]=((((-1.0)*r20*sj3*x2348))+((r21*sj3*x2346))+x2362+(((-1.0)*x2360))+(((-1.0)*r21*x2348*x2349))+(((-1.0)*x2352*x2353))+(((-1.0)*r20*x2346*x2349)));
evalcond[3]=(x2361+(((-1.0)*pz))+((r00*sj3*x2348))+((x2351*x2352))+((r01*x2348*x2349))+((r00*x2346*x2349))+(((-1.0)*x2359))+(((-1.0)*r01*sj3*x2346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2363=((1.0)*cj4);
IkReal x2364=(sj1*sj4);
IkReal x2365=(r20*sj5);
IkReal x2366=(cj5*r01);
IkReal x2367=(cj5*r21);
IkReal x2368=(cj1*sj4);
IkReal x2369=(r00*sj5);
if( IKabs((((x2364*x2369))+((x2364*x2366))+((x2365*x2368))+((x2367*x2368))+(((-1.0)*r02*sj1*x2363))+(((-1.0)*cj1*r22*x2363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2366*x2368))+((cj4*r22*sj1))+(((-1.0)*x2364*x2365))+(((-1.0)*x2364*x2367))+(((-1.0)*cj1*r02*x2363))+((x2368*x2369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2364*x2369))+((x2364*x2366))+((x2365*x2368))+((x2367*x2368))+(((-1.0)*r02*sj1*x2363))+(((-1.0)*cj1*r22*x2363))))+IKsqr((((x2366*x2368))+((cj4*r22*sj1))+(((-1.0)*x2364*x2365))+(((-1.0)*x2364*x2367))+(((-1.0)*cj1*r02*x2363))+((x2368*x2369))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2364*x2369))+((x2364*x2366))+((x2365*x2368))+((x2367*x2368))+(((-1.0)*r02*sj1*x2363))+(((-1.0)*cj1*r22*x2363))), (((x2366*x2368))+((cj4*r22*sj1))+(((-1.0)*x2364*x2365))+(((-1.0)*x2364*x2367))+(((-1.0)*cj1*r02*x2363))+((x2368*x2369))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2370=IKsin(j2);
IkReal x2371=IKcos(j2);
IkReal x2372=(cj3*sj4);
IkReal x2373=(r21*sj5);
IkReal x2374=(cj5*sj4);
IkReal x2375=((0.15)*cj5);
IkReal x2376=((1.0)*cj4);
IkReal x2377=(sj4*sj5);
IkReal x2378=((1.0)*sj3);
IkReal x2379=(cj5*sj3);
IkReal x2380=(r01*sj5);
IkReal x2381=(sj1*x2371);
IkReal x2382=(cj1*x2371);
IkReal x2383=(cj3*cj4*sj5);
IkReal x2384=((0.54)*x2370);
IkReal x2385=(sj1*x2370);
IkReal x2386=(cj3*cj4*cj5);
IkReal x2387=((1.0)*cj1*x2370);
evalcond[0]=(((r20*x2377))+x2381+(((-1.0)*x2387))+(((-1.0)*r22*x2376))+((r21*x2374)));
evalcond[1]=((((-1.0)*r02*x2376))+(((-1.0)*x2385))+(((-1.0)*x2382))+((r00*x2377))+((r01*x2374)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x2375))+(((-0.54)*x2381))+(((-1.0)*pz))+(((0.15)*x2373))+((cj1*x2384)));
evalcond[3]=((((0.15)*x2380))+(((-1.0)*r00*x2375))+(((-1.0)*px))+(((0.71)*sj1))+(((0.54)*x2382))+((sj1*x2384)));
evalcond[4]=(((r20*x2379))+x2382+x2385+((r20*x2383))+((r22*x2372))+((r21*x2386))+(((-1.0)*x2373*x2378)));
evalcond[5]=(((r01*x2386))+x2381+((r00*x2383))+((r02*x2372))+(((-1.0)*x2378*x2380))+(((-1.0)*x2387))+((r00*x2379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2388=((0.76056338028169)*sj4);
IkReal x2389=((0.211267605633803)*sj5);
IkReal x2390=((0.76056338028169)*cj4);
IkReal x2391=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x2391))+(((-1.0)*r02*x2390))+((r01*x2389))+((r00*sj5*x2388))+(((-1.40845070422535)*px))+((cj5*r01*x2388)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x2388))+(((-1.0)*r21*x2389))+((r20*x2391))+(((-1.0)*r20*sj5*x2388))+((r22*x2390))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2391))+(((-1.0)*r02*x2390))+((r01*x2389))+((r00*sj5*x2388))+(((-1.40845070422535)*px))+((cj5*r01*x2388))))+IKsqr(((((-1.0)*cj5*r21*x2388))+(((-1.0)*r21*x2389))+((r20*x2391))+(((-1.0)*r20*sj5*x2388))+((r22*x2390))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x2391))+(((-1.0)*r02*x2390))+((r01*x2389))+((r00*sj5*x2388))+(((-1.40845070422535)*px))+((cj5*r01*x2388))), ((((-1.0)*cj5*r21*x2388))+(((-1.0)*r21*x2389))+((r20*x2391))+(((-1.0)*r20*sj5*x2388))+((r22*x2390))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2392=((0.54)*sj5);
IkReal x2393=((0.15)*sj5);
IkReal x2394=((0.54)*cj5);
IkReal x2395=(cj3*cj4);
IkReal x2396=((0.15)*cj5);
IkReal x2397=((0.54)*r02);
IkReal x2398=(cj3*sj4);
IkReal x2399=((0.54)*r22);
IkReal x2400=(r20*x2396);
IkReal x2401=(r21*x2393);
IkReal x2402=((0.71)*(IKcos(j1)));
IkReal x2403=(r01*x2393);
IkReal x2404=((0.71)*(IKsin(j1)));
IkReal x2405=(r00*x2396);
IkReal x2406=(x2400+pz);
IkReal x2407=(x2402+x2401);
IkReal x2408=(x2404+x2405);
evalcond[0]=(x2406+(((-1.0)*x2407))+(((-1.0)*r21*sj4*x2394))+(((-1.0)*r20*sj4*x2392))+((cj4*x2399)));
evalcond[1]=(x2408+(((-1.0)*r01*sj4*x2394))+(((-1.0)*r00*sj4*x2392))+(((-1.0)*x2403))+px+((cj4*x2397)));
evalcond[2]=(x2406+(((-1.0)*x2407))+((r00*sj3*x2394))+(((-1.0)*r01*sj3*x2392))+((x2397*x2398))+((r01*x2394*x2395))+((r00*x2392*x2395)));
evalcond[3]=(x2403+(((-1.0)*x2408))+((x2398*x2399))+((r21*x2394*x2395))+(((-1.0)*px))+((r20*sj3*x2394))+(((-1.0)*r21*sj3*x2392))+((r20*x2392*x2395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2409=(cj4*r22);
IkReal x2410=((1.0)*cj1);
IkReal x2411=(r20*sj5);
IkReal x2412=(cj4*r02);
IkReal x2413=(cj5*r21);
IkReal x2414=(cj1*sj4);
IkReal x2415=(cj5*r01);
IkReal x2416=(r00*sj5);
IkReal x2417=((1.0)*sj1*sj4);
if( IKabs((((x2413*x2414))+(((-1.0)*x2416*x2417))+(((-1.0)*x2415*x2417))+((sj1*x2412))+((x2411*x2414))+(((-1.0)*x2409*x2410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x2410*x2416))+(((-1.0)*sj4*x2410*x2415))+(((-1.0)*x2411*x2417))+((cj1*x2412))+((sj1*x2409))+(((-1.0)*x2413*x2417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2413*x2414))+(((-1.0)*x2416*x2417))+(((-1.0)*x2415*x2417))+((sj1*x2412))+((x2411*x2414))+(((-1.0)*x2409*x2410))))+IKsqr(((((-1.0)*sj4*x2410*x2416))+(((-1.0)*sj4*x2410*x2415))+(((-1.0)*x2411*x2417))+((cj1*x2412))+((sj1*x2409))+(((-1.0)*x2413*x2417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2413*x2414))+(((-1.0)*x2416*x2417))+(((-1.0)*x2415*x2417))+((sj1*x2412))+((x2411*x2414))+(((-1.0)*x2409*x2410))), ((((-1.0)*sj4*x2410*x2416))+(((-1.0)*sj4*x2410*x2415))+(((-1.0)*x2411*x2417))+((cj1*x2412))+((sj1*x2409))+(((-1.0)*x2413*x2417))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2418=IKcos(j2);
IkReal x2419=IKsin(j2);
IkReal x2420=(cj3*sj4);
IkReal x2421=(r21*sj5);
IkReal x2422=(cj5*sj4);
IkReal x2423=((0.15)*cj5);
IkReal x2424=((1.0)*cj4);
IkReal x2425=(sj4*sj5);
IkReal x2426=((1.0)*sj3);
IkReal x2427=(cj5*sj3);
IkReal x2428=(r01*sj5);
IkReal x2429=(cj1*x2418);
IkReal x2430=(sj1*x2419);
IkReal x2431=(cj3*cj4*sj5);
IkReal x2432=(cj1*x2419);
IkReal x2433=(sj1*x2418);
IkReal x2434=(cj3*cj4*cj5);
IkReal x2435=(x2430+x2429);
evalcond[0]=((((-1.0)*r02*x2424))+x2435+((r00*x2425))+((r01*x2422)));
evalcond[1]=((((-1.0)*x2432))+x2433+((r21*x2422))+(((-1.0)*r22*x2424))+((r20*x2425)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x2421))+(((-1.0)*r20*x2423))+(((-0.54)*x2433))+(((-1.0)*pz))+(((0.54)*x2432)));
evalcond[3]=((((0.15)*x2428))+(((-0.54)*x2430))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x2429))+(((-1.0)*r00*x2423)));
evalcond[4]=(((r22*x2420))+x2435+((r20*x2431))+(((-1.0)*x2421*x2426))+((r21*x2434))+((r20*x2427)));
evalcond[5]=((((-1.0)*x2433))+x2432+((r00*x2431))+((r01*x2434))+((r00*x2427))+(((-1.0)*x2426*x2428))+((r02*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2436=(cj5*sj4);
IkReal x2437=(cj0*r01);
IkReal x2438=((0.54)*cj0);
IkReal x2439=(sj4*sj5);
CheckValue<IkReal> x2440=IKPowWithIntegerCheck(cj0,-2);
if(!x2440.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2440.value)*(((((0.54)*x2436*x2437))+(((0.15)*sj5*x2437))+((r00*x2438*x2439))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj4*r02*x2438))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r20*x2439))+(((-0.76056338028169)*r21*x2436))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2440.value)*(((((0.54)*x2436*x2437))+(((0.15)*sj5*x2437))+((r00*x2438*x2439))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj4*r02*x2438))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.76056338028169)*r20*x2439))+(((-0.76056338028169)*r21*x2436))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2440.value)*(((((0.54)*x2436*x2437))+(((0.15)*sj5*x2437))+((r00*x2438*x2439))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj4*r02*x2438))+(((-1.0)*cj0*px))))), ((((-0.76056338028169)*r20*x2439))+(((-0.76056338028169)*r21*x2436))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2441=IKsin(j1);
IkReal x2442=IKcos(j1);
IkReal x2443=((0.15)*sj5);
IkReal x2444=(r21*sj0);
IkReal x2445=((0.54)*r20);
IkReal x2446=(sj4*sj5);
IkReal x2447=(cj5*sj3);
IkReal x2448=(cj3*cj5);
IkReal x2449=((0.15)*cj5);
IkReal x2450=(r11*sj0);
IkReal x2451=((0.54)*r01);
IkReal x2452=((0.54)*r00);
IkReal x2453=(cj3*sj0);
IkReal x2454=(cj4*sj5);
IkReal x2455=((1.0)*py);
IkReal x2456=(cj0*r21);
IkReal x2457=((0.54)*sj4);
IkReal x2458=((0.54)*r10);
IkReal x2459=(cj0*r11);
IkReal x2460=(cj5*sj4);
IkReal x2461=((1.0)*px);
IkReal x2462=((0.54)*cj4);
IkReal x2463=(cj0*cj3);
IkReal x2464=((1.0)*pz);
IkReal x2465=((0.71)*x2441);
IkReal x2466=(cj0*x2462);
IkReal x2467=((0.54)*sj3*sj5);
IkReal x2468=((0.71)*x2442);
IkReal x2469=(cj0*sj0*x2465);
evalcond[0]=((((-1.0)*x2445*x2446))+(((-1.0)*r21*x2443))+pz+((r22*x2462))+(((-1.0)*x2468))+(((-1.0)*cj5*r21*x2457))+((r20*x2449)));
evalcond[1]=(((cj5*x2450*x2457))+((sj0*x2446*x2458))+(((-1.0)*r12*sj0*x2462))+(((-1.0)*sj0*x2455))+((x2465*(sj0*sj0)))+((x2443*x2450))+(((-1.0)*r10*sj0*x2449)));
evalcond[2]=((((-1.0)*cj0*r00*x2449))+(((-1.0)*cj0*x2461))+((x2465*(cj0*cj0)))+((cj0*r01*x2443))+((cj0*x2446*x2452))+((cj0*x2451*x2460))+(((-1.0)*r02*x2466)));
evalcond[3]=(((x2447*x2458))+((x2443*x2444))+(((-1.0)*r11*x2467))+((sj0*x2468))+((r11*x2448*x2462))+((cj3*r12*x2457))+((cj3*x2454*x2458))+(((-1.0)*r20*sj0*x2449))+(((-1.0)*sj0*x2464)));
evalcond[4]=(((x2447*x2452))+(((-1.0)*cj0*x2464))+(((-1.0)*cj0*r20*x2449))+((x2443*x2456))+((cj4*x2448*x2451))+((cj3*r02*x2457))+((cj3*x2452*x2454))+((cj0*x2468))+(((-1.0)*sj3*sj5*x2451)));
evalcond[5]=((((-1.0)*r10*x2449))+(((-1.0)*sj0*x2445*x2447))+(((-1.0)*x2444*x2448*x2462))+((x2444*x2467))+(((-1.0)*x2445*x2453*x2454))+((sj0*x2465))+(((-1.0)*x2455))+((r11*x2443))+(((-1.0)*r22*x2453*x2457)));
evalcond[6]=((((-1.0)*x2445*x2454*x2463))+(((-1.0)*x2448*x2456*x2462))+(((-1.0)*cj0*x2445*x2447))+(((-1.0)*r22*x2457*x2463))+((r01*x2443))+((x2456*x2467))+(((-1.0)*x2461))+(((-1.0)*r00*x2449))+((cj0*x2465)));
evalcond[7]=(x2469+((r01*sj0*x2443))+(((-1.0)*r12*x2466))+((cj0*x2446*x2458))+((cj5*x2457*x2459))+(((-1.0)*r00*sj0*x2449))+(((-1.0)*sj0*x2461)));
evalcond[8]=(((sj0*x2446*x2452))+x2469+((sj0*x2451*x2460))+((x2443*x2459))+(((-1.0)*cj0*x2455))+(((-1.0)*r02*sj0*x2462))+(((-1.0)*cj0*r10*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2470=((1.0)*cj4);
IkReal x2471=(sj1*sj4);
IkReal x2472=(r20*sj5);
IkReal x2473=(cj5*r01);
IkReal x2474=(cj5*r21);
IkReal x2475=(cj1*sj4);
IkReal x2476=(r00*sj5);
if( IKabs((((x2471*x2473))+((x2471*x2476))+(((-1.0)*cj1*r22*x2470))+((x2472*x2475))+(((-1.0)*r02*sj1*x2470))+((x2474*x2475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r02*x2470))+((cj4*r22*sj1))+(((-1.0)*x2471*x2472))+(((-1.0)*x2471*x2474))+((x2473*x2475))+((x2475*x2476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2471*x2473))+((x2471*x2476))+(((-1.0)*cj1*r22*x2470))+((x2472*x2475))+(((-1.0)*r02*sj1*x2470))+((x2474*x2475))))+IKsqr(((((-1.0)*cj1*r02*x2470))+((cj4*r22*sj1))+(((-1.0)*x2471*x2472))+(((-1.0)*x2471*x2474))+((x2473*x2475))+((x2475*x2476))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2471*x2473))+((x2471*x2476))+(((-1.0)*cj1*r22*x2470))+((x2472*x2475))+(((-1.0)*r02*sj1*x2470))+((x2474*x2475))), ((((-1.0)*cj1*r02*x2470))+((cj4*r22*sj1))+(((-1.0)*x2471*x2472))+(((-1.0)*x2471*x2474))+((x2473*x2475))+((x2475*x2476))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2477=IKsin(j2);
IkReal x2478=IKcos(j2);
IkReal x2479=(cj3*sj4);
IkReal x2480=(r21*sj5);
IkReal x2481=(cj5*sj4);
IkReal x2482=((0.15)*cj5);
IkReal x2483=((1.0)*cj4);
IkReal x2484=(sj4*sj5);
IkReal x2485=((1.0)*sj3);
IkReal x2486=(cj5*sj3);
IkReal x2487=(r01*sj5);
IkReal x2488=(sj1*x2478);
IkReal x2489=(cj1*x2478);
IkReal x2490=(cj3*cj4*sj5);
IkReal x2491=((0.54)*x2477);
IkReal x2492=(sj1*x2477);
IkReal x2493=(cj3*cj4*cj5);
IkReal x2494=((1.0)*cj1*x2477);
evalcond[0]=((((-1.0)*r22*x2483))+x2488+(((-1.0)*x2494))+((r21*x2481))+((r20*x2484)));
evalcond[1]=(((r01*x2481))+(((-1.0)*x2489))+(((-1.0)*x2492))+(((-1.0)*r02*x2483))+((r00*x2484)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2491))+(((-1.0)*r20*x2482))+(((-0.54)*x2488))+(((-1.0)*pz))+(((0.15)*x2480)));
evalcond[3]=(((sj1*x2491))+(((0.54)*x2489))+(((-1.0)*r00*x2482))+(((-1.0)*px))+(((0.71)*sj1))+(((0.15)*x2487)));
evalcond[4]=(x2489+x2492+(((-1.0)*x2480*x2485))+((r21*x2493))+((r22*x2479))+((r20*x2490))+((r20*x2486)));
evalcond[5]=(((r00*x2490))+x2488+(((-1.0)*x2494))+(((-1.0)*x2485*x2487))+((r02*x2479))+((r01*x2493))+((r00*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2495=(cj4*r22);
IkReal x2496=((1.0)*cj1);
IkReal x2497=(r20*sj5);
IkReal x2498=(cj4*r02);
IkReal x2499=(cj5*r21);
IkReal x2500=(cj1*sj4);
IkReal x2501=(cj5*r01);
IkReal x2502=(r00*sj5);
IkReal x2503=((1.0)*sj1*sj4);
if( IKabs((((sj1*x2498))+(((-1.0)*x2495*x2496))+((x2497*x2500))+(((-1.0)*x2502*x2503))+((x2499*x2500))+(((-1.0)*x2501*x2503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2495))+((cj1*x2498))+(((-1.0)*sj4*x2496*x2502))+(((-1.0)*sj4*x2496*x2501))+(((-1.0)*x2497*x2503))+(((-1.0)*x2499*x2503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2498))+(((-1.0)*x2495*x2496))+((x2497*x2500))+(((-1.0)*x2502*x2503))+((x2499*x2500))+(((-1.0)*x2501*x2503))))+IKsqr((((sj1*x2495))+((cj1*x2498))+(((-1.0)*sj4*x2496*x2502))+(((-1.0)*sj4*x2496*x2501))+(((-1.0)*x2497*x2503))+(((-1.0)*x2499*x2503))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2498))+(((-1.0)*x2495*x2496))+((x2497*x2500))+(((-1.0)*x2502*x2503))+((x2499*x2500))+(((-1.0)*x2501*x2503))), (((sj1*x2495))+((cj1*x2498))+(((-1.0)*sj4*x2496*x2502))+(((-1.0)*sj4*x2496*x2501))+(((-1.0)*x2497*x2503))+(((-1.0)*x2499*x2503))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2504=IKcos(j2);
IkReal x2505=IKsin(j2);
IkReal x2506=(cj3*sj4);
IkReal x2507=(r21*sj5);
IkReal x2508=(cj5*sj4);
IkReal x2509=((0.15)*cj5);
IkReal x2510=((1.0)*cj4);
IkReal x2511=(sj4*sj5);
IkReal x2512=((1.0)*sj3);
IkReal x2513=(cj5*sj3);
IkReal x2514=(r01*sj5);
IkReal x2515=(cj1*x2504);
IkReal x2516=(sj1*x2505);
IkReal x2517=(cj3*cj4*sj5);
IkReal x2518=(cj1*x2505);
IkReal x2519=(sj1*x2504);
IkReal x2520=(cj3*cj4*cj5);
IkReal x2521=(x2515+x2516);
evalcond[0]=(x2521+((r00*x2511))+(((-1.0)*r02*x2510))+((r01*x2508)));
evalcond[1]=(x2519+(((-1.0)*r22*x2510))+(((-1.0)*x2518))+((r21*x2508))+((r20*x2511)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x2507))+(((-1.0)*pz))+(((0.54)*x2518))+(((-0.54)*x2519))+(((-1.0)*r20*x2509)));
evalcond[3]=((((-1.0)*r00*x2509))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x2515))+(((-0.54)*x2516))+(((0.15)*x2514)));
evalcond[4]=(x2521+((r22*x2506))+((r21*x2520))+(((-1.0)*x2507*x2512))+((r20*x2517))+((r20*x2513)));
evalcond[5]=(x2518+((r02*x2506))+((r01*x2520))+(((-1.0)*x2512*x2514))+(((-1.0)*x2519))+((r00*x2517))+((r00*x2513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2522=((1.0)*cj4);
IkReal x2523=(r20*sj5);
IkReal x2524=((1.0)*sj1*sj4);
IkReal x2525=(cj1*cj5*sj4);
IkReal x2526=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x2522))+(((-1.0)*cj1*r22*x2522))+((sj1*x2526))+((r21*x2525))+((cj1*sj4*x2523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2526))+(((-1.0)*cj1*r12*x2522))+(((-1.0)*x2523*x2524))+((r11*x2525))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x2522))+(((-1.0)*cj1*r22*x2522))+((sj1*x2526))+((r21*x2525))+((cj1*sj4*x2523))))+IKsqr((((cj1*x2526))+(((-1.0)*cj1*r12*x2522))+(((-1.0)*x2523*x2524))+((r11*x2525))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x2522))+(((-1.0)*cj1*r22*x2522))+((sj1*x2526))+((r21*x2525))+((cj1*sj4*x2523))), (((cj1*x2526))+(((-1.0)*cj1*r12*x2522))+(((-1.0)*x2523*x2524))+((r11*x2525))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2524))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2527=IKsin(j2);
IkReal x2528=IKcos(j2);
IkReal x2529=((0.15)*sj5);
IkReal x2530=((0.15)*cj5);
IkReal x2531=(cj5*sj4);
IkReal x2532=(cj3*cj4);
IkReal x2533=(r20*sj5);
IkReal x2534=(cj3*sj4);
IkReal x2535=(r10*sj5);
IkReal x2536=((1.0)*cj4);
IkReal x2537=(cj5*sj3);
IkReal x2538=(sj1*x2528);
IkReal x2539=(cj1*x2528);
IkReal x2540=((0.54)*x2527);
IkReal x2541=((1.0)*sj3*sj5);
IkReal x2542=(sj1*x2527);
IkReal x2543=((1.0)*cj1*x2527);
evalcond[0]=(x2538+((r21*x2531))+((sj4*x2533))+(((-1.0)*r22*x2536))+(((-1.0)*x2543)));
evalcond[1]=((((-1.0)*x2542))+((sj4*x2535))+(((-1.0)*r12*x2536))+(((-1.0)*x2539))+((r11*x2531)));
evalcond[2]=((((-1.0)*r20*x2530))+(((0.71)*cj1))+((cj1*x2540))+(((-0.54)*x2538))+(((-1.0)*pz))+((r21*x2529)));
evalcond[3]=(((r11*x2529))+(((-1.0)*r10*x2530))+(((-1.0)*py))+(((0.54)*x2539))+(((0.71)*sj1))+((sj1*x2540)));
evalcond[4]=(x2542+x2539+((r20*x2537))+((cj5*r21*x2532))+((r22*x2534))+((x2532*x2533))+(((-1.0)*r21*x2541)));
evalcond[5]=((((-1.0)*r11*x2541))+x2538+((r10*x2537))+((cj5*r11*x2532))+((x2532*x2535))+(((-1.0)*x2543))+((r12*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2544=(cj1*cj4);
IkReal x2545=(r20*sj5);
IkReal x2546=(cj4*sj1);
IkReal x2547=(cj5*r21);
IkReal x2548=(cj1*sj4);
IkReal x2549=(cj5*r11);
IkReal x2550=(r10*sj5);
IkReal x2551=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2549*x2551))+((x2547*x2548))+((r12*x2546))+(((-1.0)*x2550*x2551))+((x2545*x2548))+(((-1.0)*r22*x2544)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2544))+(((-1.0)*x2545*x2551))+(((-1.0)*x2547*x2551))+(((-1.0)*x2548*x2549))+(((-1.0)*x2548*x2550))+((r22*x2546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2549*x2551))+((x2547*x2548))+((r12*x2546))+(((-1.0)*x2550*x2551))+((x2545*x2548))+(((-1.0)*r22*x2544))))+IKsqr((((r12*x2544))+(((-1.0)*x2545*x2551))+(((-1.0)*x2547*x2551))+(((-1.0)*x2548*x2549))+(((-1.0)*x2548*x2550))+((r22*x2546))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2549*x2551))+((x2547*x2548))+((r12*x2546))+(((-1.0)*x2550*x2551))+((x2545*x2548))+(((-1.0)*r22*x2544))), (((r12*x2544))+(((-1.0)*x2545*x2551))+(((-1.0)*x2547*x2551))+(((-1.0)*x2548*x2549))+(((-1.0)*x2548*x2550))+((r22*x2546))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2552=IKcos(j2);
IkReal x2553=IKsin(j2);
IkReal x2554=((0.15)*sj5);
IkReal x2555=((0.15)*cj5);
IkReal x2556=(r10*sj5);
IkReal x2557=(cj5*sj4);
IkReal x2558=(cj3*cj4);
IkReal x2559=(r20*sj5);
IkReal x2560=(cj3*sj4);
IkReal x2561=((1.0)*cj4);
IkReal x2562=(cj5*sj3);
IkReal x2563=(cj1*x2552);
IkReal x2564=(sj1*x2553);
IkReal x2565=(cj1*x2553);
IkReal x2566=(sj1*x2552);
IkReal x2567=((1.0)*sj3*sj5);
IkReal x2568=(x2563+x2564);
evalcond[0]=(((sj4*x2556))+x2568+((r11*x2557))+(((-1.0)*r12*x2561)));
evalcond[1]=(((sj4*x2559))+x2566+(((-1.0)*r22*x2561))+(((-1.0)*x2565))+((r21*x2557)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x2565))+(((-0.54)*x2566))+(((-1.0)*pz))+(((-1.0)*r20*x2555))+((r21*x2554)));
evalcond[3]=((((-0.54)*x2564))+(((-0.54)*x2563))+((r11*x2554))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x2555)));
evalcond[4]=(((cj5*r21*x2558))+((r22*x2560))+x2568+(((-1.0)*r21*x2567))+((r20*x2562))+((x2558*x2559)));
evalcond[5]=(x2565+(((-1.0)*x2566))+((cj5*r11*x2558))+((x2556*x2558))+((r10*x2562))+((r12*x2560))+(((-1.0)*r11*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2569=(cj5*sj4);
IkReal x2570=((1.0)*sj0);
IkReal x2571=(cj4*r22);
IkReal x2572=(cj1*sj4*sj5);
IkReal x2573=((1.0)*cj4*r12);
IkReal x2574=(sj1*sj4*sj5);
CheckValue<IkReal> x2575=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2575.valid){
continue;
}
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal((((r20*sj0*x2572))+((r10*x2574))+((r11*sj1*x2569))+(((-1.0)*sj1*x2573))+(((-1.0)*cj1*x2570*x2571))+((cj1*r21*sj0*x2569)))),IkReal((((r10*x2572))+((cj1*r11*x2569))+((sj0*sj1*x2571))+(((-1.0)*r21*sj1*x2569*x2570))+(((-1.0)*cj1*x2573))+(((-1.0)*r20*x2570*x2574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2575.value)))+(x2576.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2577=IKsin(j2);
IkReal x2578=IKcos(j2);
IkReal x2579=(cj3*sj4);
IkReal x2580=(cj0*sj1);
IkReal x2581=((0.15)*sj5);
IkReal x2582=((0.15)*cj5);
IkReal x2583=(cj5*r01);
IkReal x2584=(cj3*cj4);
IkReal x2585=(cj5*sj4);
IkReal x2586=((1.0)*cj0);
IkReal x2587=(r20*sj5);
IkReal x2588=(sj0*sj1);
IkReal x2589=(r10*sj5);
IkReal x2590=((1.0)*cj4);
IkReal x2591=(cj5*sj3);
IkReal x2592=(r00*sj5);
IkReal x2593=(cj1*x2578);
IkReal x2594=((0.54)*x2577);
IkReal x2595=((1.0)*x2577);
IkReal x2596=((1.0)*sj3*sj5);
IkReal x2597=(sj1*x2578);
IkReal x2598=(sj0*x2595);
evalcond[0]=((((-1.0)*cj1*x2595))+x2597+(((-1.0)*r22*x2590))+((sj4*x2587))+((r21*x2585)));
evalcond[1]=(((cj1*x2594))+(((0.71)*cj1))+(((-1.0)*r20*x2582))+(((-0.54)*x2597))+(((-1.0)*pz))+((r21*x2581)));
evalcond[2]=((((-1.0)*x2580*x2595))+(((-1.0)*r02*x2590))+(((-1.0)*x2586*x2593))+((sj4*x2592))+((sj4*x2583)));
evalcond[3]=((((-1.0)*x2588*x2595))+(((-1.0)*sj0*x2593))+((sj4*x2589))+((r11*x2585))+(((-1.0)*r12*x2590)));
evalcond[4]=(((r01*x2581))+(((-1.0)*r00*x2582))+(((0.71)*x2580))+(((0.54)*cj0*x2593))+(((-1.0)*px))+((x2580*x2594)));
evalcond[5]=((((0.71)*x2588))+(((0.54)*sj0*x2593))+(((-1.0)*py))+((r11*x2581))+((x2588*x2594))+(((-1.0)*r10*x2582)));
evalcond[6]=(((x2584*x2587))+x2593+(((-1.0)*r21*x2596))+((r20*x2591))+((cj5*r21*x2584))+((sj1*x2577))+((r22*x2579)));
evalcond[7]=(((r00*x2591))+(((-1.0)*r01*x2596))+(((-1.0)*cj1*x2577*x2586))+((r02*x2579))+((x2578*x2580))+((x2583*x2584))+((x2584*x2592)));
evalcond[8]=(((x2584*x2589))+(((-1.0)*cj1*x2598))+((cj5*r11*x2584))+((r12*x2579))+((r10*x2591))+((x2578*x2588))+(((-1.0)*r11*x2596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2599=(sj1*sj4);
IkReal x2600=(cj5*r01);
IkReal x2601=((1.0)*cj0);
IkReal x2602=(r20*sj5);
IkReal x2603=(cj4*r22);
IkReal x2604=(r00*sj5);
IkReal x2605=(cj1*sj4);
IkReal x2606=(cj5*r21);
IkReal x2607=((1.0)*cj4*r02);
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2607))+(((-1.0)*cj1*x2601*x2603))+((cj0*x2605*x2606))+((x2599*x2600))+((x2599*x2604))+((cj0*x2602*x2605)))),IkReal((((x2600*x2605))+(((-1.0)*x2599*x2601*x2606))+(((-1.0)*x2599*x2601*x2602))+(((-1.0)*cj1*x2607))+((cj0*sj1*x2603))+((x2604*x2605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2609.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2608.value)+(((1.5707963267949)*(x2609.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2610=IKsin(j2);
IkReal x2611=IKcos(j2);
IkReal x2612=(cj3*sj4);
IkReal x2613=(cj0*sj1);
IkReal x2614=((0.15)*sj5);
IkReal x2615=((0.15)*cj5);
IkReal x2616=(cj5*r01);
IkReal x2617=(cj3*cj4);
IkReal x2618=(cj5*sj4);
IkReal x2619=((1.0)*cj0);
IkReal x2620=(r20*sj5);
IkReal x2621=(sj0*sj1);
IkReal x2622=(r10*sj5);
IkReal x2623=((1.0)*cj4);
IkReal x2624=(cj5*sj3);
IkReal x2625=(r00*sj5);
IkReal x2626=(cj1*x2611);
IkReal x2627=((0.54)*x2610);
IkReal x2628=((1.0)*x2610);
IkReal x2629=((1.0)*sj3*sj5);
IkReal x2630=(sj1*x2611);
IkReal x2631=(sj0*x2628);
evalcond[0]=((((-1.0)*r22*x2623))+((sj4*x2620))+(((-1.0)*cj1*x2628))+((r21*x2618))+x2630);
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2630))+(((-1.0)*pz))+((cj1*x2627))+(((-1.0)*r20*x2615))+((r21*x2614)));
evalcond[2]=((((-1.0)*x2619*x2626))+((sj4*x2616))+(((-1.0)*x2613*x2628))+((sj4*x2625))+(((-1.0)*r02*x2623)));
evalcond[3]=((((-1.0)*r12*x2623))+((sj4*x2622))+((r11*x2618))+(((-1.0)*sj0*x2626))+(((-1.0)*x2621*x2628)));
evalcond[4]=((((-1.0)*r00*x2615))+((r01*x2614))+(((-1.0)*px))+(((0.71)*x2613))+(((0.54)*cj0*x2626))+((x2613*x2627)));
evalcond[5]=((((0.54)*sj0*x2626))+(((-1.0)*py))+(((0.71)*x2621))+((x2621*x2627))+((r11*x2614))+(((-1.0)*r10*x2615)));
evalcond[6]=(((r20*x2624))+((x2617*x2620))+((r22*x2612))+((sj1*x2610))+((cj5*r21*x2617))+(((-1.0)*r21*x2629))+x2626);
evalcond[7]=((((-1.0)*r01*x2629))+((r00*x2624))+(((-1.0)*cj1*x2610*x2619))+((x2617*x2625))+((x2616*x2617))+((x2611*x2613))+((r02*x2612)));
evalcond[8]=((((-1.0)*r11*x2629))+(((-1.0)*cj1*x2631))+((cj5*r11*x2617))+((x2617*x2622))+((x2611*x2621))+((r10*x2624))+((r12*x2612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2632=(cj5*sj4);
IkReal x2633=((0.54)*sj0);
IkReal x2634=(sj4*sj5);
IkReal x2635=((0.15)*sj0);
CheckValue<IkReal> x2636=IKPowWithIntegerCheck(sj0,-2);
if(!x2636.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2636.value)*(((((-1.0)*cj4*r12*x2633))+(((-1.0)*cj5*r10*x2635))+((r10*x2633*x2634))+(((-1.0)*py*sj0))+((r11*x2632*x2633))+((r11*sj5*x2635)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r20*x2634))+(((-0.76056338028169)*r21*x2632))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2636.value)*(((((-1.0)*cj4*r12*x2633))+(((-1.0)*cj5*r10*x2635))+((r10*x2633*x2634))+(((-1.0)*py*sj0))+((r11*x2632*x2633))+((r11*sj5*x2635))))))+IKsqr(((((-0.76056338028169)*r20*x2634))+(((-0.76056338028169)*r21*x2632))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2636.value)*(((((-1.0)*cj4*r12*x2633))+(((-1.0)*cj5*r10*x2635))+((r10*x2633*x2634))+(((-1.0)*py*sj0))+((r11*x2632*x2633))+((r11*sj5*x2635))))), ((((-0.76056338028169)*r20*x2634))+(((-0.76056338028169)*r21*x2632))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2637=IKsin(j1);
IkReal x2638=IKcos(j1);
IkReal x2639=((0.15)*sj5);
IkReal x2640=(r21*sj0);
IkReal x2641=((0.54)*r20);
IkReal x2642=(sj4*sj5);
IkReal x2643=(cj5*sj3);
IkReal x2644=(cj3*cj5);
IkReal x2645=((0.15)*cj5);
IkReal x2646=(r11*sj0);
IkReal x2647=((0.54)*r01);
IkReal x2648=((0.54)*r00);
IkReal x2649=(cj3*sj0);
IkReal x2650=(cj4*sj5);
IkReal x2651=((1.0)*py);
IkReal x2652=(cj0*r21);
IkReal x2653=((0.54)*sj4);
IkReal x2654=((0.54)*r10);
IkReal x2655=(cj0*r11);
IkReal x2656=(cj5*sj4);
IkReal x2657=((1.0)*px);
IkReal x2658=((0.54)*cj4);
IkReal x2659=(cj0*cj3);
IkReal x2660=((1.0)*pz);
IkReal x2661=((0.71)*x2637);
IkReal x2662=(cj0*x2658);
IkReal x2663=((0.54)*sj3*sj5);
IkReal x2664=((0.71)*x2638);
IkReal x2665=(cj0*sj0*x2661);
evalcond[0]=((((-1.0)*cj5*r21*x2653))+(((-1.0)*r21*x2639))+(((-1.0)*x2641*x2642))+(((-1.0)*x2664))+((r22*x2658))+pz+((r20*x2645)));
evalcond[1]=((((-1.0)*r10*sj0*x2645))+(((-1.0)*sj0*x2651))+(((-1.0)*r12*sj0*x2658))+((x2639*x2646))+((sj0*x2642*x2654))+((cj5*x2646*x2653))+((x2661*(sj0*sj0))));
evalcond[2]=(((cj0*x2642*x2648))+((cj0*x2647*x2656))+(((-1.0)*cj0*r00*x2645))+(((-1.0)*r02*x2662))+((x2661*(cj0*cj0)))+((cj0*r01*x2639))+(((-1.0)*cj0*x2657)));
evalcond[3]=(((cj3*x2650*x2654))+(((-1.0)*r11*x2663))+(((-1.0)*sj0*x2660))+((sj0*x2664))+((x2639*x2640))+((cj3*r12*x2653))+((r11*x2644*x2658))+(((-1.0)*r20*sj0*x2645))+((x2643*x2654)));
evalcond[4]=((((-1.0)*cj0*x2660))+((x2639*x2652))+(((-1.0)*sj3*sj5*x2647))+((cj3*x2648*x2650))+((cj0*x2664))+((cj4*x2644*x2647))+((cj3*r02*x2653))+(((-1.0)*cj0*r20*x2645))+((x2643*x2648)));
evalcond[5]=(((sj0*x2661))+(((-1.0)*x2641*x2649*x2650))+(((-1.0)*x2640*x2644*x2658))+(((-1.0)*sj0*x2641*x2643))+((r11*x2639))+(((-1.0)*r22*x2649*x2653))+((x2640*x2663))+(((-1.0)*x2651))+(((-1.0)*r10*x2645)));
evalcond[6]=((((-1.0)*x2644*x2652*x2658))+(((-1.0)*r00*x2645))+((r01*x2639))+(((-1.0)*x2641*x2650*x2659))+((cj0*x2661))+(((-1.0)*x2657))+((x2652*x2663))+(((-1.0)*r22*x2653*x2659))+(((-1.0)*cj0*x2641*x2643)));
evalcond[7]=((((-1.0)*r12*x2662))+(((-1.0)*sj0*x2657))+((cj0*x2642*x2654))+((cj5*x2653*x2655))+(((-1.0)*r00*sj0*x2645))+((r01*sj0*x2639))+x2665);
evalcond[8]=(((x2639*x2655))+((sj0*x2642*x2648))+(((-1.0)*cj0*r10*x2645))+((sj0*x2647*x2656))+(((-1.0)*r02*sj0*x2658))+(((-1.0)*cj0*x2651))+x2665);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2666=((1.0)*cj4);
IkReal x2667=(sj1*sj4);
IkReal x2668=(r20*sj5);
IkReal x2669=(cj5*r01);
IkReal x2670=(cj5*r21);
IkReal x2671=(cj1*sj4);
IkReal x2672=(r00*sj5);
if( IKabs((((x2668*x2671))+((x2667*x2672))+((x2667*x2669))+(((-1.0)*cj1*r22*x2666))+(((-1.0)*r02*sj1*x2666))+((x2670*x2671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22*sj1))+((x2669*x2671))+((x2671*x2672))+(((-1.0)*x2667*x2670))+(((-1.0)*x2667*x2668))+(((-1.0)*cj1*r02*x2666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2668*x2671))+((x2667*x2672))+((x2667*x2669))+(((-1.0)*cj1*r22*x2666))+(((-1.0)*r02*sj1*x2666))+((x2670*x2671))))+IKsqr((((cj4*r22*sj1))+((x2669*x2671))+((x2671*x2672))+(((-1.0)*x2667*x2670))+(((-1.0)*x2667*x2668))+(((-1.0)*cj1*r02*x2666))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2668*x2671))+((x2667*x2672))+((x2667*x2669))+(((-1.0)*cj1*r22*x2666))+(((-1.0)*r02*sj1*x2666))+((x2670*x2671))), (((cj4*r22*sj1))+((x2669*x2671))+((x2671*x2672))+(((-1.0)*x2667*x2670))+(((-1.0)*x2667*x2668))+(((-1.0)*cj1*r02*x2666))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2673=IKsin(j2);
IkReal x2674=IKcos(j2);
IkReal x2675=(cj3*sj4);
IkReal x2676=(r21*sj5);
IkReal x2677=(cj5*sj4);
IkReal x2678=((0.15)*cj5);
IkReal x2679=((1.0)*cj4);
IkReal x2680=(sj4*sj5);
IkReal x2681=((1.0)*sj3);
IkReal x2682=(cj5*sj3);
IkReal x2683=(r01*sj5);
IkReal x2684=(sj1*x2674);
IkReal x2685=(cj1*x2674);
IkReal x2686=(cj3*cj4*sj5);
IkReal x2687=((0.54)*x2673);
IkReal x2688=(sj1*x2673);
IkReal x2689=(cj3*cj4*cj5);
IkReal x2690=((1.0)*cj1*x2673);
evalcond[0]=(((r21*x2677))+(((-1.0)*x2690))+((r20*x2680))+(((-1.0)*r22*x2679))+x2684);
evalcond[1]=(((r00*x2680))+(((-1.0)*r02*x2679))+(((-1.0)*x2685))+(((-1.0)*x2688))+((r01*x2677)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2684))+(((-1.0)*pz))+((cj1*x2687))+(((-1.0)*r20*x2678))+(((0.15)*x2676)));
evalcond[3]=((((-1.0)*r00*x2678))+((sj1*x2687))+(((-1.0)*px))+(((0.15)*x2683))+(((0.71)*sj1))+(((0.54)*x2685)));
evalcond[4]=((((-1.0)*x2676*x2681))+((r22*x2675))+((r21*x2689))+((r20*x2682))+((r20*x2686))+x2688+x2685);
evalcond[5]=(((r02*x2675))+((r01*x2689))+((r00*x2686))+((r00*x2682))+(((-1.0)*x2690))+(((-1.0)*x2681*x2683))+x2684);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2691=(cj4*r22);
IkReal x2692=((1.0)*cj1);
IkReal x2693=(r20*sj5);
IkReal x2694=(cj4*r02);
IkReal x2695=(cj5*r21);
IkReal x2696=(cj1*sj4);
IkReal x2697=(cj5*r01);
IkReal x2698=(r00*sj5);
IkReal x2699=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2691*x2692))+((sj1*x2694))+((x2693*x2696))+(((-1.0)*x2697*x2699))+(((-1.0)*x2698*x2699))+((x2695*x2696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x2692*x2697))+(((-1.0)*sj4*x2692*x2698))+((sj1*x2691))+((cj1*x2694))+(((-1.0)*x2693*x2699))+(((-1.0)*x2695*x2699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2691*x2692))+((sj1*x2694))+((x2693*x2696))+(((-1.0)*x2697*x2699))+(((-1.0)*x2698*x2699))+((x2695*x2696))))+IKsqr(((((-1.0)*sj4*x2692*x2697))+(((-1.0)*sj4*x2692*x2698))+((sj1*x2691))+((cj1*x2694))+(((-1.0)*x2693*x2699))+(((-1.0)*x2695*x2699))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2691*x2692))+((sj1*x2694))+((x2693*x2696))+(((-1.0)*x2697*x2699))+(((-1.0)*x2698*x2699))+((x2695*x2696))), ((((-1.0)*sj4*x2692*x2697))+(((-1.0)*sj4*x2692*x2698))+((sj1*x2691))+((cj1*x2694))+(((-1.0)*x2693*x2699))+(((-1.0)*x2695*x2699))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2700=IKcos(j2);
IkReal x2701=IKsin(j2);
IkReal x2702=(cj3*sj4);
IkReal x2703=(r21*sj5);
IkReal x2704=(cj5*sj4);
IkReal x2705=((0.15)*cj5);
IkReal x2706=((1.0)*cj4);
IkReal x2707=(sj4*sj5);
IkReal x2708=((1.0)*sj3);
IkReal x2709=(cj5*sj3);
IkReal x2710=(r01*sj5);
IkReal x2711=(cj1*x2700);
IkReal x2712=(sj1*x2701);
IkReal x2713=(cj3*cj4*sj5);
IkReal x2714=(cj1*x2701);
IkReal x2715=(sj1*x2700);
IkReal x2716=(cj3*cj4*cj5);
IkReal x2717=(x2712+x2711);
evalcond[0]=(x2717+((r00*x2707))+((r01*x2704))+(((-1.0)*r02*x2706)));
evalcond[1]=(x2715+(((-1.0)*x2714))+(((-1.0)*r22*x2706))+((r20*x2707))+((r21*x2704)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x2703))+(((-0.54)*x2715))+(((-1.0)*pz))+(((-1.0)*r20*x2705))+(((0.54)*x2714)));
evalcond[3]=((((-1.0)*r00*x2705))+(((0.15)*x2710))+(((-0.71)*sj1))+(((-0.54)*x2711))+(((-0.54)*x2712))+(((-1.0)*px)));
evalcond[4]=(x2717+((r22*x2702))+((r20*x2709))+((r21*x2716))+(((-1.0)*x2703*x2708))+((r20*x2713)));
evalcond[5]=(x2714+(((-1.0)*x2715))+((r00*x2709))+(((-1.0)*x2708*x2710))+((r00*x2713))+((r02*x2702))+((r01*x2716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2718=((1.0)*cj4);
IkReal x2719=(r20*sj5);
IkReal x2720=((1.0)*sj1*sj4);
IkReal x2721=(cj1*cj5*sj4);
IkReal x2722=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x2718))+((r21*x2721))+(((-1.0)*cj1*r22*x2718))+((cj1*sj4*x2719))+((sj1*x2722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2719*x2720))+((cj1*x2722))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2720))+((r11*x2721))+(((-1.0)*cj1*r12*x2718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x2718))+((r21*x2721))+(((-1.0)*cj1*r22*x2718))+((cj1*sj4*x2719))+((sj1*x2722))))+IKsqr(((((-1.0)*x2719*x2720))+((cj1*x2722))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2720))+((r11*x2721))+(((-1.0)*cj1*r12*x2718))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x2718))+((r21*x2721))+(((-1.0)*cj1*r22*x2718))+((cj1*sj4*x2719))+((sj1*x2722))), ((((-1.0)*x2719*x2720))+((cj1*x2722))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2720))+((r11*x2721))+(((-1.0)*cj1*r12*x2718))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2723=IKsin(j2);
IkReal x2724=IKcos(j2);
IkReal x2725=((0.15)*sj5);
IkReal x2726=((0.15)*cj5);
IkReal x2727=(cj5*sj4);
IkReal x2728=(cj3*cj4);
IkReal x2729=(r20*sj5);
IkReal x2730=(cj3*sj4);
IkReal x2731=(r10*sj5);
IkReal x2732=((1.0)*cj4);
IkReal x2733=(cj5*sj3);
IkReal x2734=(sj1*x2724);
IkReal x2735=(cj1*x2724);
IkReal x2736=((0.54)*x2723);
IkReal x2737=((1.0)*sj3*sj5);
IkReal x2738=(sj1*x2723);
IkReal x2739=((1.0)*cj1*x2723);
evalcond[0]=(x2734+((sj4*x2729))+((r21*x2727))+(((-1.0)*r22*x2732))+(((-1.0)*x2739)));
evalcond[1]=((((-1.0)*x2735))+(((-1.0)*x2738))+((r11*x2727))+(((-1.0)*r12*x2732))+((sj4*x2731)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2736))+(((-1.0)*pz))+((r21*x2725))+(((-0.54)*x2734))+(((-1.0)*r20*x2726)));
evalcond[3]=((((-1.0)*py))+((r11*x2725))+(((0.71)*sj1))+((sj1*x2736))+(((0.54)*x2735))+(((-1.0)*r10*x2726)));
evalcond[4]=(x2735+x2738+((r22*x2730))+((x2728*x2729))+((r20*x2733))+((cj5*r21*x2728))+(((-1.0)*r21*x2737)));
evalcond[5]=(((cj5*r11*x2728))+x2734+((x2728*x2731))+(((-1.0)*r11*x2737))+((r12*x2730))+((r10*x2733))+(((-1.0)*x2739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2740=(cj1*cj4);
IkReal x2741=(r20*sj5);
IkReal x2742=(cj4*sj1);
IkReal x2743=(cj5*r21);
IkReal x2744=(cj1*sj4);
IkReal x2745=(cj5*r11);
IkReal x2746=(r10*sj5);
IkReal x2747=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*r22*x2740))+((r12*x2742))+((x2743*x2744))+(((-1.0)*x2745*x2747))+((x2741*x2744))+(((-1.0)*x2746*x2747)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2743*x2747))+((r22*x2742))+((r12*x2740))+(((-1.0)*x2741*x2747))+(((-1.0)*x2744*x2746))+(((-1.0)*x2744*x2745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2740))+((r12*x2742))+((x2743*x2744))+(((-1.0)*x2745*x2747))+((x2741*x2744))+(((-1.0)*x2746*x2747))))+IKsqr(((((-1.0)*x2743*x2747))+((r22*x2742))+((r12*x2740))+(((-1.0)*x2741*x2747))+(((-1.0)*x2744*x2746))+(((-1.0)*x2744*x2745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2740))+((r12*x2742))+((x2743*x2744))+(((-1.0)*x2745*x2747))+((x2741*x2744))+(((-1.0)*x2746*x2747))), ((((-1.0)*x2743*x2747))+((r22*x2742))+((r12*x2740))+(((-1.0)*x2741*x2747))+(((-1.0)*x2744*x2746))+(((-1.0)*x2744*x2745))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2748=IKcos(j2);
IkReal x2749=IKsin(j2);
IkReal x2750=((0.15)*sj5);
IkReal x2751=((0.15)*cj5);
IkReal x2752=(r10*sj5);
IkReal x2753=(cj5*sj4);
IkReal x2754=(cj3*cj4);
IkReal x2755=(r20*sj5);
IkReal x2756=(cj3*sj4);
IkReal x2757=((1.0)*cj4);
IkReal x2758=(cj5*sj3);
IkReal x2759=(cj1*x2748);
IkReal x2760=(sj1*x2749);
IkReal x2761=(cj1*x2749);
IkReal x2762=(sj1*x2748);
IkReal x2763=((1.0)*sj3*sj5);
IkReal x2764=(x2759+x2760);
evalcond[0]=(x2764+((r11*x2753))+((sj4*x2752))+(((-1.0)*r12*x2757)));
evalcond[1]=(x2762+(((-1.0)*r22*x2757))+(((-1.0)*x2761))+((r21*x2753))+((sj4*x2755)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x2761))+((r21*x2750))+(((-1.0)*pz))+(((-0.54)*x2762))+(((-1.0)*r20*x2751)));
evalcond[3]=(((r11*x2750))+(((-0.54)*x2759))+(((-0.71)*sj1))+(((-1.0)*r10*x2751))+(((-1.0)*py))+(((-0.54)*x2760)));
evalcond[4]=(x2764+((cj5*r21*x2754))+((r22*x2756))+((x2754*x2755))+((r20*x2758))+(((-1.0)*r21*x2763)));
evalcond[5]=(((x2752*x2754))+x2761+(((-1.0)*x2762))+(((-1.0)*r11*x2763))+((r12*x2756))+((r10*x2758))+((cj5*r11*x2754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2765=(cj5*sj4);
IkReal x2766=((1.0)*sj0);
IkReal x2767=(cj4*r22);
IkReal x2768=(cj1*sj4*sj5);
IkReal x2769=((1.0)*cj4*r12);
IkReal x2770=(sj1*sj4*sj5);
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2771.valid){
continue;
}
CheckValue<IkReal> x2772 = IKatan2WithCheck(IkReal((((cj1*r21*sj0*x2765))+((r20*sj0*x2768))+((r11*sj1*x2765))+((r10*x2770))+(((-1.0)*cj1*x2766*x2767))+(((-1.0)*sj1*x2769)))),IkReal((((sj0*sj1*x2767))+(((-1.0)*r20*x2766*x2770))+((cj1*r11*x2765))+(((-1.0)*r21*sj1*x2765*x2766))+((r10*x2768))+(((-1.0)*cj1*x2769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2772.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2771.value)))+(x2772.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2773=IKsin(j2);
IkReal x2774=IKcos(j2);
IkReal x2775=(cj3*sj4);
IkReal x2776=(cj0*sj1);
IkReal x2777=((0.15)*sj5);
IkReal x2778=((0.15)*cj5);
IkReal x2779=(cj5*r01);
IkReal x2780=(cj3*cj4);
IkReal x2781=(cj5*sj4);
IkReal x2782=((1.0)*cj0);
IkReal x2783=(r20*sj5);
IkReal x2784=(sj0*sj1);
IkReal x2785=(r10*sj5);
IkReal x2786=((1.0)*cj4);
IkReal x2787=(cj5*sj3);
IkReal x2788=(r00*sj5);
IkReal x2789=(cj1*x2774);
IkReal x2790=((0.54)*x2773);
IkReal x2791=((1.0)*x2773);
IkReal x2792=((1.0)*sj3*sj5);
IkReal x2793=(sj1*x2774);
IkReal x2794=(sj0*x2791);
evalcond[0]=(x2793+((r21*x2781))+(((-1.0)*r22*x2786))+((sj4*x2783))+(((-1.0)*cj1*x2791)));
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2793))+((cj1*x2790))+(((-1.0)*pz))+((r21*x2777))+(((-1.0)*r20*x2778)));
evalcond[2]=(((sj4*x2779))+(((-1.0)*x2782*x2789))+(((-1.0)*x2776*x2791))+((sj4*x2788))+(((-1.0)*r02*x2786)));
evalcond[3]=((((-1.0)*r12*x2786))+(((-1.0)*x2784*x2791))+(((-1.0)*sj0*x2789))+((r11*x2781))+((sj4*x2785)));
evalcond[4]=(((r01*x2777))+((x2776*x2790))+(((-1.0)*r00*x2778))+(((-1.0)*px))+(((0.54)*cj0*x2789))+(((0.71)*x2776)));
evalcond[5]=((((-1.0)*r10*x2778))+((r11*x2777))+((x2784*x2790))+(((0.54)*sj0*x2789))+(((0.71)*x2784))+(((-1.0)*py)));
evalcond[6]=(((x2780*x2783))+x2789+((sj1*x2773))+((r22*x2775))+(((-1.0)*r21*x2792))+((cj5*r21*x2780))+((r20*x2787)));
evalcond[7]=(((x2779*x2780))+((x2780*x2788))+((x2774*x2776))+(((-1.0)*cj1*x2773*x2782))+((r00*x2787))+((r02*x2775))+(((-1.0)*r01*x2792)));
evalcond[8]=(((x2780*x2785))+((cj5*r11*x2780))+((x2774*x2784))+((r10*x2787))+((r12*x2775))+(((-1.0)*cj1*x2794))+(((-1.0)*r11*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2795=(sj1*sj4);
IkReal x2796=(cj5*r01);
IkReal x2797=((1.0)*cj0);
IkReal x2798=(r20*sj5);
IkReal x2799=(cj4*r22);
IkReal x2800=(r00*sj5);
IkReal x2801=(cj1*sj4);
IkReal x2802=(cj5*r21);
IkReal x2803=((1.0)*cj4*r02);
CheckValue<IkReal> x2804 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2803))+((x2795*x2796))+((cj0*x2801*x2802))+((cj0*x2798*x2801))+((x2795*x2800))+(((-1.0)*cj1*x2797*x2799)))),IkReal((((x2796*x2801))+(((-1.0)*x2795*x2797*x2798))+((cj0*sj1*x2799))+(((-1.0)*cj1*x2803))+(((-1.0)*x2795*x2797*x2802))+((x2800*x2801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2805.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2804.value)+(((1.5707963267949)*(x2805.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2806=IKsin(j2);
IkReal x2807=IKcos(j2);
IkReal x2808=(cj3*sj4);
IkReal x2809=(cj0*sj1);
IkReal x2810=((0.15)*sj5);
IkReal x2811=((0.15)*cj5);
IkReal x2812=(cj5*r01);
IkReal x2813=(cj3*cj4);
IkReal x2814=(cj5*sj4);
IkReal x2815=((1.0)*cj0);
IkReal x2816=(r20*sj5);
IkReal x2817=(sj0*sj1);
IkReal x2818=(r10*sj5);
IkReal x2819=((1.0)*cj4);
IkReal x2820=(cj5*sj3);
IkReal x2821=(r00*sj5);
IkReal x2822=(cj1*x2807);
IkReal x2823=((0.54)*x2806);
IkReal x2824=((1.0)*x2806);
IkReal x2825=((1.0)*sj3*sj5);
IkReal x2826=(sj1*x2807);
IkReal x2827=(sj0*x2824);
evalcond[0]=((((-1.0)*cj1*x2824))+((r21*x2814))+((sj4*x2816))+(((-1.0)*r22*x2819))+x2826);
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2826))+((r21*x2810))+((cj1*x2823))+(((-1.0)*pz))+(((-1.0)*r20*x2811)));
evalcond[2]=((((-1.0)*r02*x2819))+(((-1.0)*x2809*x2824))+((sj4*x2812))+((sj4*x2821))+(((-1.0)*x2815*x2822)));
evalcond[3]=((((-1.0)*r12*x2819))+(((-1.0)*sj0*x2822))+(((-1.0)*x2817*x2824))+((sj4*x2818))+((r11*x2814)));
evalcond[4]=((((0.71)*x2809))+((r01*x2810))+(((-1.0)*px))+(((-1.0)*r00*x2811))+((x2809*x2823))+(((0.54)*cj0*x2822)));
evalcond[5]=(((x2817*x2823))+(((0.54)*sj0*x2822))+(((0.71)*x2817))+(((-1.0)*py))+((r11*x2810))+(((-1.0)*r10*x2811)));
evalcond[6]=(((sj1*x2806))+((cj5*r21*x2813))+((r20*x2820))+((x2813*x2816))+(((-1.0)*r21*x2825))+x2822+((r22*x2808)));
evalcond[7]=(((x2812*x2813))+((r02*x2808))+(((-1.0)*cj1*x2806*x2815))+(((-1.0)*r01*x2825))+((r00*x2820))+((x2813*x2821))+((x2807*x2809)));
evalcond[8]=(((r12*x2808))+(((-1.0)*cj1*x2827))+((x2813*x2818))+((cj5*r11*x2813))+(((-1.0)*r11*x2825))+((r10*x2820))+((x2807*x2817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - crx-10 (60905b63123c939a53dc83a42cd6c8af)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
