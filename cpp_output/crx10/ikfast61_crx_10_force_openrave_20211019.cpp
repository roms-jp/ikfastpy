/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-10-19 15:27:39.177806
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKcos(j[5]);
x12=((0.15)*x5);
x13=((1.0)*x5);
x14=((0.15)*x2);
x15=((1.0)*x10);
x16=((0.435)*x6);
x17=((1.0)*x6);
x18=((0.54)*x6);
x19=((0.54)*x4);
x20=((1.0)*x7);
x21=((0.15)*x7);
x22=((1.0)*x9);
x23=(x0*x7);
x24=((-0.15)*x10);
x25=(x5*x9);
x26=(x0*x3);
x27=(x1*x2);
x28=(x3*x4);
x29=(x7*x8);
x30=((-1.0)*x10);
x31=(x2*x3);
x32=(x6*x7);
x33=(x1*x4);
x34=(x3*x6);
x35=(x12*x6);
x36=(x0*x20);
x37=(x0*x12);
x38=(x27+x28);
x39=((((-1.0)*x31))+x33);
x40=((((-1.0)*x27))+(((-1.0)*x28)));
x41=(((x1*x14))+(((0.15)*x28)));
x42=(x39*x9);
x43=(((x0*x27))+((x26*x4)));
x44=(x6*((x27+x28)));
x45=(x10*x40);
x46=((((-1.0)*x2*x26))+(((1.0)*x0*x33)));
x47=(x17*(((((-1.0)*x31))+x33)));
x48=(x43*x9);
x49=(x44*x9);
x50=(x47*x5);
x51=(x47*x7);
x52=(x46*x5);
x53=(x32+x52);
x54=((((-1.0)*x23))+x50);
x55=((((-1.0)*x22*x39))+(((-1.0)*x13*x45)));
eerot[0]=(((x8*((((x46*x7))+(((-1.0)*x5*x6))))))+((x11*(((((-1.0)*x22*x43))+(((-1.0)*x15*x53)))))));
eerot[1]=(((x8*(((((-1.0)*x48))+((x30*x53))))))+((x11*(((((-1.0)*x20*x46))+((x13*x6)))))));
eerot[2]=(((x10*x43))+((x9*(((((-1.0)*x17*x7))+(((-1.0)*x13*x46)))))));
IkReal x56=(x0*x27);
eetrans[0]=((((0.71)*x26))+((x19*x26))+((x10*(((((0.435)*x26*x4))+(((0.435)*x56))))))+(((0.54)*x56))+x35+((x7*((((x14*x26))+(((-0.15)*x0*x33))))))+((x8*(((((-1.0)*x35))+((x21*x46))))))+((x9*(((((-0.435)*x32))+(((-0.435)*x52))))))+((x11*(((((-0.15)*x48))+((x24*x53)))))));
eerot[3]=(((x8*((((x0*x5))+x51))))+(((-1.0)*x11*((((x15*(((((-1.0)*x36))+x50))))+((x22*x44)))))));
eerot[4]=(((x11*(((((-1.0)*x20*x47))+(((-1.0)*x0*x13))))))+((x8*(((((-1.0)*x49))+((x30*x54)))))));
eerot[5]=(((x9*((x36+(((-1.0)*x13*x47))))))+((x10*x44)));
eetrans[1]=((((-1.0)*x37))+((x11*(((((-0.15)*x49))+((x24*x54))))))+((x18*x28))+((x18*x27))+((x8*((((x21*x47))+x37))))+((x10*((((x16*x28))+((x16*x27))))))+(((0.71)*x34))+((x9*(((((0.435)*x23))+(((-0.435)*x50))))))+((x7*(((((-0.15)*x33*x6))+((x14*x34)))))));
eerot[6]=(((x29*x40))+((x11*x55)));
eerot[7]=(((x11*x38*x7))+((x55*x8)));
eerot[8]=(((x10*x39))+((x25*x38)));
eetrans[2]=((0.245)+((x11*(((((-0.15)*x42))+(((-1.0)*x12*x45))))))+(((-0.54)*x31))+((x1*x19))+((x10*(((((-0.435)*x31))+(((0.435)*x33))))))+((x41*x7))+(((-1.0)*x29*x41))+((x25*(((((0.435)*x27))+(((0.435)*x28))))))+(((0.71)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r00);
new_r02=((-1.0)*r02);
new_px=((((-0.15)*r00))+px+(((-0.435)*r02)));
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r10);
new_r12=((-1.0)*r12);
new_py=((((-0.15)*r10))+py+(((-0.435)*r12)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r20);
new_r22=((-1.0)*r22);
new_pz=((-0.245)+(((-0.435)*r22))+(((-0.15)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x60=((27.0)*npz);
IkReal x61=((25.0)*pp);
IkReal x62=((7.5)*npx);
IkReal x63=((2.0)*rxp1_2);
IkReal x64=((0.3)*r22);
IkReal x65=((0.15)*r21);
IkReal x66=((1.0)*rxp2_2);
IkReal x67=(x64+(((-1.0)*x63)));
IkReal x68=(x65+(((-1.0)*x66)));
IkReal x69=((-4.75)+x61);
IkReal x70=(x63+x64);
IkReal x71=((((-1.0)*x66))+(((-1.0)*x65)));
IkReal x72=(x60+x69);
IkReal x73=(x72+(((-1.0)*x62)));
IkReal x74=(x62+x69+(((-1.0)*x60)));
IkReal x75=(x69+(((-1.0)*x62))+(((-1.0)*x60)));
IkReal x76=(x72+x62);
IkReal gconst0=x76;
IkReal gconst1=x73;
IkReal gconst2=x76;
IkReal gconst3=x73;
IkReal gconst4=x67;
IkReal gconst5=x70;
IkReal gconst6=x67;
IkReal gconst7=x70;
IkReal gconst8=x71;
IkReal gconst9=x68;
IkReal gconst10=x74;
IkReal gconst11=x75;
IkReal gconst12=x71;
IkReal gconst13=x68;
IkReal gconst14=x74;
IkReal gconst15=x75;
IkReal x77=r20*r20;
IkReal x78=npy*npy;
IkReal x79=rxp2_2*rxp2_2;
IkReal x80=r21*r21;
IkReal x81=(gconst1*npy);
IkReal x82=((4.5)*r20);
IkReal x83=(gconst9*npx);
IkReal x84=(gconst12*npy);
IkReal x85=((32.4)*r20);
IkReal x86=((0.3)*rxp2_2);
IkReal x87=(gconst10*gconst9);
IkReal x88=(gconst14*gconst7);
IkReal x89=(gconst1*gconst2);
IkReal x90=(npx*npy);
IkReal x91=(gconst11*gconst14);
IkReal x92=(gconst11*gconst12);
IkReal x93=(gconst7*rxp2_2);
IkReal x94=((0.15)*gconst6);
IkReal x95=((54.0)*gconst9);
IkReal x96=(gconst1*rxp2_2);
IkReal x97=((1.0)*gconst15);
IkReal x98=(npy*rxp2_2);
IkReal x99=(gconst0*r21);
IkReal x100=(gconst11*npy);
IkReal x101=(gconst14*npy);
IkReal x102=((0.15)*r21);
IkReal x103=((60.0)*rxp0_2);
IkReal x104=(gconst5*rxp2_2);
IkReal x105=(gconst0*gconst3);
IkReal x106=((54.0)*gconst8);
IkReal x107=((1.0)*gconst3);
IkReal x108=(gconst11*gconst8);
IkReal x109=((0.15)*gconst2);
IkReal x110=((16.2)*r21);
IkReal x111=(gconst6*rxp2_2);
IkReal x112=(gconst12*gconst15);
IkReal x113=(gconst10*gconst5);
IkReal x114=(gconst2*npy);
IkReal x115=((1.0)*gconst0*gconst2);
IkReal x116=(gconst1*gconst3*r21);
IkReal x117=((0.09)*x77);
IkReal x118=((9.0)*r21*rxp0_2);
IkReal x119=((4.86)*x77);
IkReal x120=(gconst13*x106);
IkReal x121=((2.4)*r20*rxp0_2);
IkReal x122=((0.0225)*x80);
IkReal x123=((225.0)*x78);
IkReal x124=(r21*x78);
IkReal x125=((1.0)*gconst13*gconst14);
IkReal x126=((0.675)*r20*r21);
IkReal x127=((243.0)*r20*x78);
IkReal x128=((4.86)*npx*r20*r21);
IkReal x129=((108.0)*npy*x79);
op[0]=((((-1.0)*x125*x87))+((gconst9*x101*x82))+(((-1.0)*gconst12*gconst9*x123))+((gconst13*gconst8*x91))+((x112*x87))+(((-1.0)*x117*x91))+(((-1.0)*gconst8*x92*x97))+((gconst11*x82*x84)));
op[1]=(((gconst11*x103*x84))+((npx*x85*x92))+(((-1.0)*x113*x125))+((x101*x120))+((x100*x119))+(((-1.0)*x100*x120))+(((-1.0)*gconst6*gconst9*x123))+((gconst6*x100*x82))+((x112*x113))+(((-3240.0)*x83*x84))+(((-1.0)*gconst6*x108*x97))+((gconst12*x127))+(((-1.0)*x101*x119))+(((-1.0)*gconst12*gconst5*x123))+(((-1.0)*gconst15*x106*x84))+((gconst5*x101*x82))+(((-1.0)*gconst15*x84*x95))+(((-1.0)*gconst4*x92*x97))+(((-1.0)*x87*x88))+((gconst13*x101*x95))+((x108*x88))+((gconst14*x83*x85))+((gconst15*gconst6*x87))+((gconst9*x101*x103))+(((-1.0)*gconst9*x127))+(((-1.0)*x121*x91))+((gconst13*gconst4*x91))+(((54.0)*x84*x87))+(((-1.0)*gconst11*x106*x84))+(((54.0)*gconst13*npy*x87)));
op[2]=((((-2916.0)*gconst13*gconst8*(npy*npy)))+(((-11664.0)*gconst12*gconst9*(npx*npx)))+((gconst10*gconst15*gconst9*rxp2_2))+(((-16.0)*gconst11*gconst14*(rxp0_2*rxp0_2)))+((gconst11*gconst14*gconst4*gconst7))+(((-0.15)*gconst11*gconst12*gconst15*r21))+(((-33.75)*gconst9*r21*(npy*npy)))+(((60.0)*gconst11*gconst6*npy*rxp0_2))+((gconst11*gconst13*gconst14*rxp2_2))+(((243.0)*gconst6*r20*(npy*npy)))+(((-1.0)*gconst1*gconst12*gconst15*gconst8))+(((-3366.0)*gconst12*gconst9*(npy*npy)))+(((432.0)*gconst11*gconst12*npx*rxp0_2))+(((33.75)*gconst12*r21*(npy*npy)))+(((-54.0)*gconst12*gconst15*gconst4*npy))+(((4.5)*gconst11*npy*r20*rxp2_2))+(((-225.0)*gconst12*rxp2_2*(npy*npy)))+(((4.5)*gconst14*npy*r20*rxp2_2))+(((0.15)*gconst10*gconst15*gconst9*r21))+(((-3240.0)*gconst12*gconst5*npx*npy))+(((-54.0)*gconst11*gconst13*gconst4*npy))+(((-2916.0)*gconst13*gconst9*(npy*npy)))+(((-129.6)*gconst14*npy*r20*rxp0_2))+((gconst11*gconst14*gconst8*rxp2_2))+(((32.4)*gconst14*gconst5*npx*r20))+(((129.6)*gconst11*npy*r20*rxp0_2))+(((-225.0)*gconst9*rxp2_2*(npy*npy)))+(((60.0)*gconst14*gconst5*npy*rxp0_2))+((gconst0*gconst12*gconst15*gconst9))+(((0.15)*gconst10*gconst14*gconst9*r21))+(((4.5)*gconst1*gconst12*npy*r20))+((gconst11*gconst13*gconst2*gconst8))+(((0.18)*gconst11*gconst14*(r20*r20)))+(((0.675)*gconst11*npy*r20*r21))+((gconst1*gconst13*gconst14*gconst8))+(((-1749.6)*gconst9*npx*npy*r20))+(((3240.0)*gconst12*rxp0_2*(npy*npy)))+(((-0.675)*gconst14*npy*r20*r21))+(((-0.15)*gconst10*gconst12*gconst15*r21))+(((-243.0)*gconst5*r20*(npy*npy)))+(((-0.15)*gconst11*gconst15*gconst8*r21))+(((-0.15)*gconst11*gconst14*gconst8*r21))+(((54.0)*gconst10*gconst6*gconst9*npy))+(((54.0)*gconst14*gconst7*gconst8*npy))+(((-54.0)*gconst12*gconst15*gconst5*npy))+(((54.0)*gconst14*gconst7*gconst9*npy))+(((432.0)*gconst14*gconst9*npx*rxp0_2))+(((-225.0)*gconst5*gconst6*(npy*npy)))+((gconst10*gconst12*gconst3*gconst9))+(((0.15)*gconst11*gconst13*gconst14*r21))+(((-0.09)*gconst1*gconst14*(r20*r20)))+((gconst10*gconst15*gconst5*gconst6))+(((-3240.0)*gconst6*gconst9*npx*npy))+(((-1.0)*gconst10*gconst14*gconst9*rxp2_2))+(((-54.0)*gconst11*gconst6*gconst8*npy))+(((-1.0)*gconst11*gconst12*gconst15*rxp2_2))+((gconst10*gconst12*gconst15*rxp2_2))+(((262.44)*(npy*npy)*(r20*r20)))+(((4.5)*gconst2*gconst9*npy*r20))+(((-3240.0)*gconst9*rxp0_2*(npy*npy)))+(((32.4)*gconst11*gconst6*npx*r20))+(((-1.0)*gconst10*gconst13*gconst14*rxp2_2))+(((-54.0)*gconst11*gconst7*gconst8*npy))+(((-54.0)*gconst15*gconst6*gconst9*npy))+(((-54.0)*gconst11*gconst12*gconst4*npy))+(((54.0)*gconst10*gconst12*gconst5*npy))+(((-1.0)*gconst10*gconst13*gconst2*gconst9))+(((-0.09)*gconst11*gconst2*(r20*r20)))+(((-54.0)*gconst15*gconst6*gconst8*npy))+(((-1.0)*gconst10*gconst14*gconst5*gconst7))+(((-1.0)*gconst11*gconst12*gconst3*gconst8))+(((0.15)*gconst10*gconst13*gconst14*r21))+(((-1.0)*gconst11*gconst15*gconst8*rxp2_2))+(((54.0)*gconst13*gconst14*gconst5*npy))+(((54.0)*gconst13*gconst14*gconst4*npy))+(((-2916.0)*gconst12*gconst8*(npy*npy)))+(((-1.0)*gconst0*gconst13*gconst14*gconst9))+(((54.0)*gconst10*gconst7*gconst9*npy))+(((54.0)*gconst10*gconst13*gconst5*npy))+(((-1.0)*gconst11*gconst15*gconst4*gconst6))+(((1749.6)*gconst12*npx*npy*r20)));
op[3]=((((-8.1)*gconst11*gconst12*npy*r21))+(((60.0)*gconst14*npy*rxp0_2*rxp2_2))+(((-8.1)*gconst14*gconst8*npy*r21))+(((-1.0)*gconst0*gconst14*gconst7*gconst9))+(((0.15)*gconst10*gconst14*gconst7*r21))+(((-1.0)*gconst10*gconst14*gconst5*rxp2_2))+(((-0.15)*gconst10*gconst15*gconst6*r21))+(((-1.0)*gconst11*gconst15*gconst6*rxp2_2))+(((54.0)*gconst0*gconst12*gconst9*npy))+(((-1.0)*gconst1*gconst12*gconst15*gconst4))+(((-1749.6)*gconst5*npx*npy*r20))+((gconst11*gconst14*gconst7*rxp2_2))+((gconst10*gconst3*gconst6*gconst9))+(((-0.15)*gconst11*gconst14*gconst4*r21))+(((108.0)*gconst10*gconst9*npy*rxp2_2))+(((-486.0)*gconst9*npx*npy*r21))+(((432.0)*gconst14*gconst5*npx*rxp0_2))+(((-2916.0)*gconst6*gconst8*(npy*npy)))+(((72.9)*r20*r21*(npy*npy)))+(((-1.0)*gconst11*gconst3*gconst6*gconst8))+(((32.4)*gconst14*npx*r20*rxp2_2))+(((864.0)*gconst11*npy*(rxp0_2*rxp0_2)))+(((-2.4)*gconst11*gconst2*r20*rxp0_2))+(((-225.0)*gconst5*rxp2_2*(npy*npy)))+(((-3240.0)*gconst12*npx*npy*rxp2_2))+(((60.0)*gconst2*gconst9*npy*rxp0_2))+(((54.0)*gconst10*gconst5*gconst6*npy))+(((9.72)*gconst14*npy*(r20*r20)))+(((23328.0)*gconst12*npx*npy*rxp0_2))+(((-54.0)*gconst11*gconst4*gconst6*npy))+(((-4.86)*gconst2*npy*(r20*r20)))+(((-3240.0)*gconst5*gconst6*npx*npy))+((gconst10*gconst15*gconst5*rxp2_2))+(((2.4)*gconst11*gconst14*r20*rxp0_2))+(((32.4)*gconst11*npx*r20*rxp2_2))+((gconst0*gconst12*gconst15*gconst5))+(((0.15)*gconst11*gconst14*gconst7*r21))+(((-8.1)*gconst15*gconst9*npy*r21))+((gconst11*gconst13*gconst2*gconst4))+(((-1.0)*gconst10*gconst2*gconst7*gconst9))+(((-54.0)*gconst15*gconst8*npy*rxp2_2))+(((54.0)*gconst14*gconst8*npy*rxp2_2))+(((54.0)*gconst10*gconst12*npy*rxp2_2))+(((-1.0)*gconst10*gconst14*gconst7*rxp2_2))+(((0.15)*gconst10*gconst14*gconst5*r21))+((gconst1*gconst13*gconst14*gconst4))+(((-108.0)*gconst12*gconst15*npy*rxp2_2))+(((-2916.0)*gconst13*gconst4*(npy*npy)))+(((-2916.0)*gconst7*gconst8*(npy*npy)))+(((6998.4)*r20*rxp0_2*(npy*npy)))+(((4.86)*gconst1*npy*(r20*r20)))+(((-54.0)*gconst11*gconst13*npy*rxp2_2))+((gconst0*gconst15*gconst6*gconst9))+(((54.0)*gconst14*gconst5*gconst7*npy))+(((54.0)*gconst0*gconst13*gconst9*npy))+(((-0.15)*gconst11*gconst15*gconst6*r21))+(((-225.0)*gconst6*rxp2_2*(npy*npy)))+(((-32.4)*gconst14*gconst9*npx*r20))+(((-1.0)*gconst1*gconst15*gconst6*gconst8))+(((432.0)*gconst11*gconst6*npx*rxp0_2))+(((-32.4)*gconst11*gconst12*npx*r20))+(((-4.86)*gconst14*npx*r20*r21))+(((108.0)*gconst13*gconst14*npy*rxp2_2))+(((-3240.0)*gconst9*npx*npy*rxp2_2))+(((60.0)*gconst11*npy*rxp0_2*rxp2_2))+(((-8.1)*gconst10*gconst13*npy*r21))+(((-54.0)*gconst15*gconst4*gconst6*npy))+(((60.0)*gconst11*gconst12*npy*rxp0_2))+(((4.5)*gconst1*gconst6*npy*r20))+(((-108.0)*gconst11*gconst8*npy*rxp2_2))+(((-23328.0)*gconst9*npx*npy*rxp0_2))+(((54.0)*gconst13*gconst2*gconst9*npy))+(((4.5)*gconst2*gconst5*npy*r20))+((gconst11*gconst14*gconst4*rxp2_2))+(((-2.4)*gconst1*gconst14*r20*rxp0_2))+(((-8.1)*gconst15*gconst8*npy*r21))+(((-9.0)*gconst14*npy*r21*rxp0_2))+(((-33.75)*gconst5*r21*(npy*npy)))+(((54.0)*gconst13*gconst2*gconst8*npy))+((gconst10*gconst12*gconst3*gconst5))+(((-54.0)*gconst11*gconst12*npy*rxp2_2))+((gconst10*gconst15*gconst6*rxp2_2))+(((-2916.0)*gconst7*gconst9*(npy*npy)))+(((-54.0)*gconst11*gconst4*gconst7*npy))+(((33.75)*gconst6*r21*(npy*npy)))+(((-2916.0)*gconst13*gconst5*(npy*npy)))+((gconst11*gconst2*gconst7*gconst8))+(((54.0)*gconst14*gconst4*gconst7*npy))+(((-8.1)*gconst14*gconst9*npy*r21))+(((54.0)*gconst10*gconst13*npy*rxp2_2))+(((-11664.0)*gconst12*gconst5*(npx*npx)))+(((-11664.0)*gconst6*gconst9*(npx*npx)))+(((-54.0)*gconst15*gconst5*gconst6*npy))+(((32.4)*gconst1*gconst12*npx*r20))+(((-864.0)*gconst14*npy*(rxp0_2*rxp0_2)))+(((54.0)*gconst14*gconst9*npy*rxp2_2))+(((32.4)*gconst2*gconst9*npx*r20))+(((-9.72)*gconst11*npy*(r20*r20)))+(((-54.0)*gconst1*gconst12*gconst8*npy))+(((-3366.0)*gconst12*gconst5*(npy*npy)))+(((-54.0)*gconst15*gconst9*npy*rxp2_2))+(((-8.1)*gconst10*gconst12*npy*r21))+(((3240.0)*gconst6*rxp0_2*(npy*npy)))+(((60.0)*gconst14*gconst9*npy*rxp0_2))+(((4.86)*gconst11*npx*r20*r21))+(((-54.0)*gconst12*gconst3*gconst9*npy))+(((9.0)*gconst11*npy*r21*rxp0_2))+(((-1.0)*gconst11*gconst15*gconst4*rxp2_2))+(((-54.0)*gconst1*gconst13*gconst8*npy))+(((-1.0)*gconst10*gconst13*gconst2*gconst5))+(((-2916.0)*gconst12*gconst4*(npy*npy)))+(((60.0)*gconst1*gconst12*npy*rxp0_2))+(((-3240.0)*gconst12*gconst9*npx*npy))+(((-0.15)*gconst11*gconst15*gconst4*r21))+(((-3240.0)*gconst5*rxp0_2*(npy*npy)))+(((-54.0)*gconst12*gconst3*gconst8*npy))+(((-1.0)*gconst11*gconst12*gconst3*gconst4))+(((-3366.0)*gconst6*gconst9*(npy*npy)))+(((0.15)*gconst10*gconst15*gconst5*r21))+(((-8.1)*gconst11*gconst13*npy*r21))+(((486.0)*gconst12*npx*npy*r21))+(((-1.0)*gconst0*gconst13*gconst14*gconst5))+((gconst1*gconst14*gconst7*gconst8))+(((54.0)*gconst10*gconst5*gconst7*npy))+(((1749.6)*gconst6*npx*npy*r20)));
op[4]=((((-6282.0)*gconst9*rxp2_2*(npy*npy)))+(((60.0)*gconst2*gconst5*npy*rxp0_2))+(((-108.0)*gconst15*gconst6*npy*rxp2_2))+(((-129.6)*gconst11*npy*r20*rxp0_2))+(((-2916.0)*gconst4*gconst6*(npy*npy)))+((gconst0*gconst15*gconst9*rxp2_2))+(((-8.1)*gconst14*gconst5*npy*r21))+((gconst1*gconst14*gconst8*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst9*rxp2_2))+(((-67.5)*gconst9*r21*(npy*npy)))+(((60.0)*gconst11*gconst6*npy*rxp0_2))+(((-1.0)*gconst10*gconst2*gconst9*rxp2_2))+(((54.0)*gconst10*gconst7*npy*rxp2_2))+(((-5832.0)*gconst13*rxp2_2*(npy*npy)))+(((-0.15)*gconst1*gconst14*gconst8*r21))+(((-8.1)*gconst11*gconst7*npy*r21))+(((-1.0)*gconst10*gconst2*gconst5*gconst7))+(((67.5)*gconst12*r21*(npy*npy)))+(((-0.0225)*gconst11*gconst14*(r21*r21)))+(((64.8)*gconst11*npx*r21*rxp0_2))+(((-1.0)*gconst1*gconst12*gconst3*gconst8))+(((32.4)*gconst2*gconst5*npx*r20))+(((0.15)*gconst10*gconst2*gconst9*r21))+(((-225.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-3240.0)*gconst12*gconst5*npx*npy))+(((0.15)*gconst0*gconst15*gconst9*r21))+(((-3240.0)*gconst6*npx*npy*rxp2_2))+(((0.675)*gconst1*npy*r20*r21))+(((32.4)*gconst1*gconst6*npx*r20))+((gconst11*gconst14*(rxp2_2*rxp2_2)))+(((-0.15)*gconst11*gconst2*gconst8*r21))+((gconst1*gconst14*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst3*rxp2_2))+(((0.15)*gconst10*gconst3*gconst9*r21))+(((-0.15)*gconst1*gconst15*gconst8*r21))+(((0.15)*gconst1*gconst13*gconst14*r21))+(((-2916.0)*gconst4*gconst7*(npy*npy)))+(((-1.0)*gconst10*gconst13*gconst2*rxp2_2))+(((-0.0225)*gconst10*gconst15*(r21*r21)))+((gconst1*gconst13*gconst2*gconst8))+(((-0.09)*gconst11*gconst14*(r20*r20)))+(((54.0)*gconst14*gconst5*npy*rxp2_2))+(((-54.0)*gconst15*gconst4*npy*rxp2_2))+(((60.0)*gconst14*gconst5*npy*rxp0_2))+((gconst11*gconst2*gconst4*gconst7))+(((54.0)*gconst2*gconst7*gconst9*npy))+(((432.0)*gconst1*gconst12*npx*rxp0_2))+(((4.5)*gconst1*npy*r20*rxp2_2))+(((-2916.0)*gconst5*gconst7*(npy*npy)))+(((-54.0)*gconst12*gconst3*gconst4*npy))+((gconst10*gconst15*(rxp2_2*rxp2_2)))+(((-8.1)*gconst10*gconst6*npy*r21))+((gconst10*gconst12*gconst3*rxp2_2))+(((-4.5)*gconst11*gconst12*npy*r20))+(((54.0)*gconst0*gconst6*gconst9*npy))+(((-16.0)*gconst1*gconst14*(rxp0_2*rxp0_2)))+(((3240.0)*gconst12*rxp0_2*(npy*npy)))+(((0.18)*gconst11*gconst2*(r20*r20)))+(((-54.0)*gconst1*gconst7*gconst8*npy))+(((-1.0)*gconst1*gconst15*gconst4*gconst6))+(((23328.0)*gconst6*npx*npy*rxp0_2))+(((-54.0)*gconst1*gconst6*gconst8*npy))+(((-0.3)*gconst11*gconst15*r21*rxp2_2))+(((54.0)*gconst13*gconst2*gconst4*npy))+(((46656.0)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-54.0)*gconst12*gconst3*gconst5*npy))+(((-54.0)*gconst3*gconst6*gconst9*npy))+(((-8.1)*gconst15*gconst4*npy*r21))+(((432.0)*gconst14*npx*rxp0_2*rxp2_2))+((gconst10*gconst3*gconst5*gconst6))+(((-0.09)*gconst1*gconst2*(r20*r20)))+(((54.0)*gconst14*gconst4*npy*rxp2_2))+(((-5832.0)*gconst8*rxp2_2*(npy*npy)))+(((-524.88)*(npy*npy)*(r20*r20)))+(((54.0)*gconst13*gconst2*gconst5*npy))+(((432.0)*gconst2*gconst9*npx*rxp0_2))+(((-11664.0)*gconst9*rxp2_2*(npx*npx)))+((gconst0*gconst12*gconst15*rxp2_2))+(((-8.1)*gconst15*gconst5*npy*r21))+(((-129.6)*gconst2*npy*r20*rxp0_2))+(((-32.4)*gconst11*gconst6*npx*r20))+(((-225.0)*gconst12*gconst9*(npy*npy)))+(((524.88)*npx*npy*r20*r21))+(((129.6)*gconst14*npy*r20*rxp0_2))+(((-1.0)*gconst11*gconst3*gconst8*rxp2_2))+(((-0.0225)*gconst11*gconst15*(r21*r21)))+(((-0.15)*gconst0*gconst12*gconst15*r21))+(((0.15)*gconst11*gconst13*gconst2*r21))+(((0.15)*gconst0*gconst13*gconst14*r21))+(((-3240.0)*gconst5*npx*npy*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst15*rxp2_2))+(((54.0)*gconst0*gconst13*gconst5*npy))+(((-54.0)*gconst15*gconst5*npy*rxp2_2))+(((-3240.0)*gconst6*gconst9*npx*npy))+(((-1.0)*gconst11*gconst15*(rxp2_2*rxp2_2)))+(((-486.0)*gconst5*npx*npy*r21))+(((5.0625)*(npy*npy)*(r21*r21)))+(((-3366.0)*gconst5*gconst6*(npy*npy)))+(((54.0)*gconst10*gconst6*npy*rxp2_2))+(((-0.15)*gconst11*gconst12*gconst3*r21))+(((-1749.6)*gconst12*npx*npy*r20))+(((60.0)*gconst1*gconst6*npy*rxp0_2))+((gconst11*gconst2*gconst8*rxp2_2))+(((-1.0)*gconst11*gconst3*gconst4*gconst6))+(((4.5)*gconst2*npy*r20*rxp2_2))+(((0.18)*gconst1*gconst14*(r20*r20)))+(((-54.0)*gconst3*gconst6*gconst8*npy))+(((-6282.0)*gconst12*rxp2_2*(npy*npy)))+(((486.0)*gconst6*npx*npy*r21))+(((-3240.0)*gconst9*rxp0_2*(npy*npy)))+(((54.0)*gconst2*gconst7*gconst8*npy))+(((-16.0)*gconst11*gconst2*(rxp0_2*rxp0_2)))+(((-11664.0)*gconst12*rxp2_2*(npx*npx)))+(((-0.15)*gconst1*gconst12*gconst15*r21))+(((-32.4)*gconst14*gconst5*npx*r20))+(((0.15)*gconst10*gconst13*gconst2*r21))+(((-0.0225)*gconst10*gconst14*(r21*r21)))+((gconst1*gconst13*gconst14*rxp2_2))+(((108.0)*gconst10*gconst5*npy*rxp2_2))+(((-64.8)*gconst14*npx*r21*rxp0_2))+(((-0.15)*gconst11*gconst3*gconst8*r21))+(((-0.675)*gconst2*npy*r20*r21))+(((0.3)*gconst10*gconst14*r21*rxp2_2))+(((54.0)*gconst0*gconst12*gconst5*npy))+((gconst0*gconst12*gconst3*gconst9))+(((-54.0)*gconst11*gconst7*npy*rxp2_2))+(((-23328.0)*gconst5*npx*npy*rxp0_2))+(((-1.0)*gconst0*gconst13*gconst2*gconst9))+(((-54.0)*gconst11*gconst6*npy*rxp2_2))+(((-1.0)*gconst0*gconst13*gconst14*rxp2_2))+(((-11664.0)*gconst5*gconst6*(npx*npx)))+(((54.0)*gconst0*gconst7*gconst9*npy))+(((-54.0)*gconst1*gconst13*gconst4*npy))+(((1749.6)*gconst12*r21*(npx*npx)))+(((129.6)*gconst1*npy*r20*rxp0_2))+(((1749.6)*gconst9*npx*npy*r20))+(((-0.15)*gconst10*gconst12*gconst3*r21))+(((-4.5)*gconst14*gconst9*npy*r20))+(((-1.0)*gconst1*gconst15*gconst8*rxp2_2))+(((-8.1)*gconst14*gconst4*npy*r21))+(((-1.0)*gconst0*gconst14*gconst5*gconst7))+(((-8.1)*gconst10*gconst7*npy*r21))+(((-108.0)*gconst11*gconst4*npy*rxp2_2))+((gconst11*gconst13*gconst2*rxp2_2))+((gconst0*gconst15*gconst5*gconst6))+(((-8.1)*gconst11*gconst6*npy*r21))+(((-1.0)*gconst10*gconst14*(rxp2_2*rxp2_2)))+(((108.0)*gconst14*gconst7*npy*rxp2_2))+(((-54.0)*gconst1*gconst12*gconst4*npy))+(((-1749.6)*gconst9*r21*(npx*npx)))+(((0.15)*gconst0*gconst14*gconst9*r21))+((gconst10*gconst3*gconst9*rxp2_2))+(((432.0)*gconst11*npx*rxp0_2*rxp2_2))+(((972.0)*r21*rxp0_2*(npy*npy))));
op[5]=((((-108.0)*gconst15*npy*(rxp2_2*rxp2_2)))+(((-8.1)*gconst1*gconst12*npy*r21))+((gconst11*gconst2*gconst7*rxp2_2))+(((54.0)*gconst0*gconst5*gconst6*npy))+(((1749.6)*gconst5*npx*npy*r20))+(((60.0)*gconst14*npy*rxp0_2*rxp2_2))+(((-54.0)*gconst1*gconst12*npy*rxp2_2))+(((-54.0)*gconst3*gconst8*npy*rxp2_2))+(((-0.15)*gconst11*gconst2*gconst4*r21))+(((-1.0)*gconst1*gconst3*gconst6*gconst8))+(((-8.1)*gconst0*gconst13*npy*r21))+(((-11664.0)*gconst5*rxp2_2*(npx*npx)))+(((-864.0)*gconst2*npy*(rxp0_2*rxp0_2)))+(((-4.86)*gconst2*npx*r20*r21))+(((-2.4)*gconst1*gconst2*r20*rxp0_2))+(((0.15)*gconst0*gconst14*gconst5*r21))+(((-32.4)*gconst14*npx*r20*rxp2_2))+(((-16.2)*gconst14*npy*r21*rxp2_2))+(((-16.2)*gconst10*npy*r21*rxp2_2))+(((4.86)*gconst1*npx*r20*r21))+(((-8.1)*gconst1*gconst13*npy*r21))+(((0.15)*gconst1*gconst14*gconst7*r21))+(((-1.0)*gconst1*gconst15*gconst4*rxp2_2))+(((243.0)*gconst9*r20*(npy*npy)))+(((-1.0)*gconst1*gconst12*gconst3*gconst4))+(((-225.0)*gconst12*gconst5*(npy*npy)))+(((0.15)*gconst0*gconst15*gconst5*r21))+(((-32.4)*gconst1*gconst12*npx*r20))+(((2.4)*gconst1*gconst14*r20*rxp0_2))+(((54.0)*gconst0*gconst5*gconst7*npy))+(((-486.0)*gconst9*npx*npy*r21))+(((4.86)*gconst11*npy*(r20*r20)))+(((-1.0)*gconst11*gconst3*gconst6*rxp2_2))+(((-16.2)*gconst15*npy*r21*rxp2_2))+(((-3240.0)*gconst12*npx*npy*rxp2_2))+(((-4.5)*gconst14*gconst5*npy*r20))+(((60.0)*gconst2*gconst9*npy*rxp0_2))+(((0.15)*gconst10*gconst2*gconst7*r21))+((gconst1*gconst13*gconst2*gconst4))+(((-9.0)*gconst2*npy*r21*rxp0_2))+(((-8.1)*gconst3*gconst9*npy*r21))+(((432.0)*gconst1*gconst6*npx*rxp0_2))+(((32.4)*gconst1*npx*r20*rxp2_2))+(((-54.0)*gconst1*gconst4*gconst6*npy))+(((-3240.0)*gconst5*gconst6*npx*npy))+((gconst1*gconst14*gconst4*rxp2_2))+((gconst10*gconst3*gconst6*rxp2_2))+(((-54.0)*gconst1*gconst13*npy*rxp2_2))+(((-1.0)*gconst11*gconst3*gconst4*rxp2_2))+(((32.4)*gconst2*npx*r20*rxp2_2))+(((-3240.0)*npx*npy*(rxp2_2*rxp2_2)))+(((54.0)*gconst0*gconst13*npy*rxp2_2))+(((-54.0)*gconst3*gconst4*gconst6*npy))+((gconst0*gconst3*gconst6*gconst9))+(((0.15)*gconst10*gconst3*gconst5*r21))+((gconst1*gconst14*gconst7*rxp2_2))+(((-5832.0)*gconst4*rxp2_2*(npy*npy)))+(((-11664.0)*gconst6*rxp2_2*(npx*npx)))+(((432.0)*gconst2*gconst5*npx*rxp0_2))+(((-108.0)*gconst12*gconst3*npy*rxp2_2))+(((54.0)*gconst2*gconst4*gconst7*npy))+(((-54.0)*gconst3*gconst5*gconst6*npy))+(((9.0)*gconst1*npy*r21*rxp0_2))+(((-4.86)*gconst11*npx*r20*r21))+(((-108.0)*gconst11*npy*(rxp2_2*rxp2_2)))+(((-1.0)*gconst10*gconst2*gconst7*rxp2_2))+(((0.15)*gconst0*gconst14*gconst7*r21))+(((-6282.0)*gconst5*rxp2_2*(npy*npy)))+(((-9.72)*gconst1*npy*(r20*r20)))+(((-6282.0)*gconst6*rxp2_2*(npy*npy)))+((gconst1*gconst2*gconst7*gconst8))+(((-8.1)*gconst3*gconst8*npy*r21))+(((-3240.0)*gconst9*npx*npy*rxp2_2))+(((60.0)*gconst11*npy*rxp0_2*rxp2_2))+(((-32.4)*gconst11*npx*r20*rxp2_2))+(((108.0)*gconst10*npy*(rxp2_2*rxp2_2)))+(((-1.0)*gconst1*gconst15*gconst6*rxp2_2))+(((-1.0)*gconst10*gconst2*gconst5*rxp2_2))+(((6998.4)*npx*npy*r21*rxp0_2))+(((-4.86)*gconst14*npy*(r20*r20)))+(((-9.0)*gconst14*npy*r21*rxp0_2))+(((72.9)*npx*npy*(r21*r21)))+(((-67.5)*gconst5*r21*(npy*npy)))+(((54.0)*gconst2*gconst8*npy*rxp2_2))+(((0.15)*gconst10*gconst2*gconst5*r21))+(((-6998.4)*r20*rxp0_2*(npy*npy)))+(((54.0)*gconst2*gconst9*npy*rxp2_2))+(((108.0)*gconst14*npy*(rxp2_2*rxp2_2)))+(((67.5)*gconst6*r21*(npy*npy)))+(((108.0)*gconst0*gconst9*npy*rxp2_2))+(((-16.2)*gconst11*npy*r21*rxp2_2))+((gconst11*gconst2*gconst4*rxp2_2))+(((54.0)*gconst2*gconst5*gconst7*npy))+(((9.72)*gconst2*npy*(r20*r20)))+(((-8.1)*gconst2*gconst8*npy*r21))+(((-0.15)*gconst1*gconst14*gconst4*r21))+(((108.0)*gconst13*gconst2*npy*rxp2_2))+(((60.0)*gconst1*npy*rxp0_2*rxp2_2))+(((-5832.0)*gconst7*rxp2_2*(npy*npy)))+(((3240.0)*gconst6*rxp0_2*(npy*npy)))+(((-1.0)*gconst0*gconst14*gconst7*rxp2_2))+(((0.15)*gconst11*gconst2*gconst7*r21))+(((-0.15)*gconst1*gconst15*gconst6*r21))+(((-1749.6)*gconst6*npx*npy*r20))+(((-0.15)*gconst0*gconst15*gconst6*r21))+(((-32.4)*gconst2*gconst9*npx*r20))+(((-8.1)*gconst0*gconst12*npy*r21))+(((9.0)*gconst11*npy*r21*rxp0_2))+(((-54.0)*gconst1*gconst4*gconst7*npy))+(((1749.6)*gconst6*r21*(npx*npx)))+((gconst0*gconst12*gconst3*gconst5))+(((-225.0)*gconst6*gconst9*(npy*npy)))+(((60.0)*gconst1*gconst12*npy*rxp0_2))+(((-1.0)*gconst0*gconst13*gconst2*gconst5))+(((60.0)*gconst2*npy*rxp0_2*rxp2_2))+(((864.0)*gconst1*npy*(rxp0_2*rxp0_2)))+((gconst0*gconst15*gconst6*rxp2_2))+(((-3240.0)*gconst5*rxp0_2*(npy*npy)))+(((54.0)*gconst0*gconst12*npy*rxp2_2))+(((-0.15)*gconst1*gconst15*gconst4*r21))+(((4.86)*gconst14*npx*r20*r21))+(((-1.0)*gconst0*gconst14*gconst5*rxp2_2))+(((2.4)*gconst11*gconst2*r20*rxp0_2))+(((-0.15)*gconst10*gconst3*gconst6*r21))+(((-1.0)*gconst0*gconst2*gconst7*gconst9))+(((486.0)*gconst12*npx*npy*r21))+(((-0.15)*gconst11*gconst3*gconst6*r21))+(((-1749.6)*gconst5*r21*(npx*npx)))+(((-54.0)*gconst3*gconst9*npy*rxp2_2))+(((-108.0)*gconst1*gconst8*npy*rxp2_2))+((gconst0*gconst15*gconst5*rxp2_2))+(((-8.1)*gconst2*gconst9*npy*r21))+(((-243.0)*gconst12*r20*(npy*npy)))+((gconst10*gconst3*gconst5*rxp2_2))+(((-0.15)*gconst11*gconst3*gconst4*r21))+(((-4.5)*gconst11*gconst6*npy*r20)));
op[6]=((((-54.0)*gconst3*gconst4*npy*rxp2_2))+(((60.0)*gconst2*gconst5*npy*rxp0_2))+((gconst0*gconst12*gconst3*rxp2_2))+((gconst1*gconst2*gconst4*gconst7))+(((0.15)*gconst1*gconst13*gconst2*r21))+(((0.3)*gconst0*gconst14*r21*rxp2_2))+(((54.0)*gconst2*gconst4*npy*rxp2_2))+(((-4.5)*gconst1*gconst12*npy*r20))+(((10.125)*(npy*npy)*(r21*r21)))+(((-33.75)*gconst9*r21*(npy*npy)))+(((54.0)*gconst0*gconst7*npy*rxp2_2))+(((0.18)*gconst1*gconst2*(r20*r20)))+(((-0.0225)*gconst1*gconst14*(r21*r21)))+(((64.8)*gconst1*npx*r21*rxp0_2))+(((54.0)*gconst2*gconst5*npy*rxp2_2))+(((33.75)*gconst12*r21*(npy*npy)))+(((-1.0)*gconst10*gconst2*(rxp2_2*rxp2_2)))+(((-8.1)*gconst3*gconst4*npy*r21))+(((-32.4)*gconst2*gconst5*npx*r20))+(((-4.5)*gconst2*gconst9*npy*r20))+(((-225.0)*gconst12*rxp2_2*(npy*npy)))+((gconst1*gconst2*gconst8*rxp2_2))+(((-0.0225)*gconst11*gconst3*(r21*r21)))+(((262.44)*(npx*npx)*(r21*r21)))+(((-0.675)*gconst11*npy*r20*r21))+(((-3240.0)*gconst6*npx*npy*rxp2_2))+(((0.15)*gconst0*gconst13*gconst2*r21))+(((-4.5)*gconst11*npy*r20*rxp2_2))+((gconst0*gconst3*gconst5*gconst6))+(((-8.1)*gconst2*gconst4*npy*r21))+(((-1.0)*gconst0*gconst14*(rxp2_2*rxp2_2)))+(((-8.1)*gconst2*gconst5*npy*r21))+(((-0.0225)*gconst11*gconst2*(r21*r21)))+(((-0.0225)*gconst0*gconst15*(r21*r21)))+(((0.15)*gconst0*gconst3*gconst9*r21))+(((-225.0)*gconst9*rxp2_2*(npy*npy)))+(((-8.1)*gconst3*gconst5*npy*r21))+(((-54.0)*gconst1*gconst7*npy*rxp2_2))+(((0.675)*gconst14*npy*r20*r21))+(((-4.5)*gconst14*npy*r20*rxp2_2))+((gconst1*gconst14*(rxp2_2*rxp2_2)))+(((0.15)*gconst0*gconst2*gconst9*r21))+(((-1.0)*gconst1*gconst3*gconst4*gconst6))+(((108.0)*gconst0*gconst5*npy*rxp2_2))+(((0.3)*gconst10*gconst2*r21*rxp2_2))+(((-0.0225)*gconst0*gconst14*(r21*r21)))+(((-64.8)*gconst2*npx*r21*rxp0_2))+((gconst0*gconst3*gconst9*rxp2_2))+(((129.6)*gconst2*npy*r20*rxp0_2))+(((-1.0)*gconst11*gconst3*(rxp2_2*rxp2_2)))+((gconst1*gconst13*gconst2*rxp2_2))+(((-1.0)*gconst0*gconst13*gconst2*rxp2_2))+(((432.0)*gconst2*npx*rxp0_2*rxp2_2))+((gconst10*gconst3*(rxp2_2*rxp2_2)))+(((-12114.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-11664.0)*(npx*npx)*(rxp2_2*rxp2_2)))+(((-0.15)*gconst0*gconst12*gconst3*r21))+(((-1.0)*gconst1*gconst3*gconst8*rxp2_2))+(((-8.1)*gconst0*gconst7*npy*r21))+(((-3240.0)*gconst5*npx*npy*rxp2_2))+(((-225.0)*gconst5*gconst6*(npy*npy)))+(((-32.4)*gconst1*gconst6*npx*r20))+(((-0.09)*gconst1*gconst14*(r20*r20)))+(((243.0)*gconst5*r20*(npy*npy)))+(((-486.0)*gconst5*npx*npy*r21))+(((-243.0)*gconst6*r20*(npy*npy)))+(((60.0)*gconst1*gconst6*npy*rxp0_2))+(((-129.6)*gconst1*npy*r20*rxp0_2))+(((-8.1)*gconst1*gconst6*npy*r21))+(((-54.0)*gconst1*gconst6*npy*rxp2_2))+(((262.44)*(npy*npy)*(r20*r20)))+(((-1.0)*gconst0*gconst2*gconst5*gconst7))+(((486.0)*gconst6*npx*npy*r21))+(((-524.88)*npx*npy*r20*r21))+(((-0.0225)*gconst10*gconst3*(r21*r21)))+(((-54.0)*gconst3*gconst5*npy*rxp2_2))+(((-1.0)*gconst0*gconst2*gconst9*rxp2_2))+((gconst0*gconst15*(rxp2_2*rxp2_2)))+(((-16.0)*gconst1*gconst2*(rxp0_2*rxp0_2)))+(((-108.0)*gconst3*gconst6*npy*rxp2_2))+(((54.0)*gconst0*gconst6*npy*rxp2_2))+(((-0.09)*gconst11*gconst2*(r20*r20)))+(((108.0)*gconst2*gconst7*npy*rxp2_2))+(((-0.3)*gconst1*gconst15*r21*rxp2_2))+(((-8.1)*gconst1*gconst7*npy*r21))+(((-0.3)*gconst11*gconst3*r21*rxp2_2))+(((-0.0225)*gconst1*gconst15*(r21*r21)))+(((-0.15)*gconst1*gconst3*gconst8*r21))+(((-0.15)*gconst1*gconst12*gconst3*r21))+(((-8.1)*gconst0*gconst6*npy*r21))+((gconst11*gconst2*(rxp2_2*rxp2_2)))+(((-1.0)*gconst1*gconst12*gconst3*rxp2_2))+(((-1.0)*gconst1*gconst15*(rxp2_2*rxp2_2)))+(((-108.0)*gconst1*gconst4*npy*rxp2_2))+(((-0.0225)*gconst10*gconst2*(r21*r21)))+(((432.0)*gconst1*npx*rxp0_2*rxp2_2))+(((-0.15)*gconst1*gconst2*gconst8*r21))+(((972.0)*r21*rxp0_2*(npy*npy))));
op[7]=(((gconst2*x103*x98))+(((33.75)*gconst6*x124))+((gconst5*x109*x99))+(((-72.9)*r20*x124))+((gconst2*x128))+(((-1.0)*x115*x93))+(((-1.0)*gconst3*x129))+((x89*x93))+(((-1.0)*x104*x123))+(((-1.0)*x111*x123))+(((-1.0)*gconst2*npx*rxp2_2*x85))+(((-1.0)*gconst4*x107*x96))+(((-1.0)*gconst1*x128))+(((72.9)*x80*x90))+(((-1.0)*gconst6*x107*x96))+(((-1.0)*gconst4*x102*x89))+(((-16.2)*x98*x99))+((x121*x89))+(((-1.0)*x114*x119))+(((-1.0)*x114*x118))+(((-33.75)*gconst5*x124))+((gconst7*x102*x89))+(((-1.0)*npx*x85*x96))+((rxp2_2*x103*x81))+(((-1.0)*gconst3*x94*x99))+((x119*x81))+(((-3240.0)*x79*x90))+((x118*x81))+(((-1.0)*x116*x94))+(((-1.0)*gconst2*x110*x98))+(((-108.0)*x79*x81))+(((-1.0)*gconst1*gconst3*gconst4*x102))+((gconst0*x129))+(((-1.0)*gconst6*x81*x82))+((x104*x105))+((x105*x111))+(((-1.0)*rxp2_2*x110*x81))+((gconst7*x109*x99))+(((0.15)*gconst3*gconst5*x99))+(((-1.0)*x104*x115))+((gconst4*rxp2_2*x89))+(((-1.0)*gconst3*x110*x98))+(((108.0)*x114*x79))+(((-1.0)*gconst5*x114*x82)));
op[8]=(((gconst2*x86*x99))+(((-1.0)*rxp2_2*x81*x82))+((x79*x89))+(((-1.0)*x123*x79))+(((-1.0)*gconst1*x107*x79))+((x114*x126))+(((-1.0)*gconst2*x82*x98))+((x105*x79))+(((-1.0)*gconst0*gconst2*x122))+(((5.0625)*x78*x80))+(((-1.0)*x117*x89))+(((-1.0)*x115*x79))+(((-1.0)*x116*x86))+(((-1.0)*x105*x122))+(((-1.0)*x126*x81))+(((-1.0)*x122*x89))+(((-1.0)*gconst1*gconst3*x122)));
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5eval[2];
IkReal x130=cj4*cj4;
IkReal x131=((1.125)*cj4);
IkReal x132=(npz*r22);
IkReal x133=(npx*rxp1_2);
IkReal x134=(npy*rxp0_2);
IkReal x135=(npx*r21);
IkReal x136=(npy*r20);
IkReal x137=((6.66666666666667)*sj4);
IkReal x138=(npy*rxp1_2);
IkReal x139=(npx*rxp0_2);
IkReal x140=((7.5)*sj4);
IkReal x141=((24.0)*x134);
IkReal x142=((27.0)*x130);
IkReal x143=((4.05)*cj4*sj4);
IkReal x144=((3.6)*cj4*sj4);
j5eval[0]=((((-1.0)*cj4*x132))+(((-24.0)*x133))+((cj4*pz))+(((-1.0)*x137*x138))+(((-1.0)*x137*x139))+((x135*x144))+x141+(((24.0)*x130*x133))+(((-1.0)*x136*x144))+(((-1.0)*x130*x141)));
j5eval[1]=IKsign(((((-1.0)*x138*x140))+(((27.0)*x134))+(((-1.0)*x134*x142))+((pz*x131))+((x135*x143))+(((-1.0)*x139*x140))+(((-27.0)*x133))+((x133*x142))+(((-1.0)*x131*x132))+(((-1.0)*x136*x143))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x145=cj4*cj4;
IkReal x146=(npx*sj4);
IkReal x147=((1.125)*r22);
IkReal x148=((4.05)*r22);
IkReal x149=(rxp1_2*sj4);
IkReal x150=((25.0)*pp);
IkReal x151=(npy*sj4);
IkReal x152=(cj4*r21);
IkReal x153=((3.75)*pp);
IkReal x154=((7.5)*npy);
IkReal x155=(cj4*r20);
IkReal x156=(cj4*rxp2_2);
IkReal x157=(rxp0_2*sj4);
IkReal x158=((27.0)*x145);
IkReal x159=((27.0)*x156);
IkReal x160=((27.0)*cj4*npz);
IkReal x161=((4.05)*npz*x145);
CheckValue<IkReal> x162=IKPowWithIntegerCheck(IKsign(((((4.05)*x146*x152))+(((-1.0)*cj4*npz*x147))+((npx*rxp1_2*(((-27.0)+x158))))+(((-7.5)*rxp0_2*x146))+((npy*rxp0_2*(((27.0)+(((-1.0)*x158))))))+(((1.125)*cj4*pz))+(((-1.0)*x149*x154))+(((-4.05)*x151*x155)))),-1);
if(!x162.valid){
continue;
}
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal((((npy*x148))+(((4.75)*x149))+(((-0.7125)*x152))+((x152*x153))+((x151*x159))+((r21*x161))+(((-7.5)*npx*x156))+(((-1.0)*x146*x147))+(((-1.0)*x149*x150))+(((-1.0)*x149*x160))+(((-1.0)*npy*x145*x148)))),IkReal(((((-1.0)*x154*x156))+((x157*x160))+(((-1.0)*x153*x155))+((x150*x157))+(((0.7125)*x155))+((npx*x145*x148))+(((-1.0)*x147*x151))+(((-4.75)*x157))+(((-1.0)*r20*x161))+(((-1.0)*x146*x159))+(((-1.0)*npx*x148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x162.value)))+(x163.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x164=IKcos(j5);
IkReal x165=IKsin(j5);
IkReal x166=((27.0)*sj4);
IkReal x167=((1.0)*sj4);
IkReal x168=((0.15)*cj4);
evalcond[0]=((-4.75)+(((27.0)*cj4*npz))+(((-7.5)*npy*x165))+(((-1.0)*npy*x164*x166))+(((-1.0)*npx*x165*x166))+(((25.0)*pp))+(((7.5)*npx*x164)));
evalcond[1]=(((r20*x165*x168))+(((0.15)*r22*sj4))+(((-1.0)*rxp1_2*x164*x167))+((cj4*rxp2_2))+((r21*x164*x168))+(((-1.0)*rxp0_2*x165*x167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
j0eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5))+(((6.66666666666667)*py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x169=((1.0)*sj4);
j0eval[0]=((((-1.0)*cj5*r11*x169))+(((-1.0)*r10*sj5*x169))+((cj4*r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x170=((6.66666666666667)*sj4);
j0eval[0]=((((-1.0)*rxp0_0*sj5*x170))+((cj4*r00*sj5))+(((6.66666666666667)*cj4*rxp2_0))+((r02*sj4))+((cj4*cj5*r01))+(((-1.0)*cj5*rxp1_0*x170)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x171=((6.66666666666667)*py);
IkReal x172=((1.0)+(((-1.0)*(r12*r12))));
if((x172) < -0.00001)
continue;
IkReal x173=IKabs(IKsqrt(x172));
IkReal x180 = x172;
if(IKabs(x180)==0){
continue;
}
IkReal x174=pow(x180,-0.5);
IkReal x175=(r11*x174);
IkReal x176=(r10*x174);
CheckValue<IkReal> x181=IKPowWithIntegerCheck(x173,-1);
if(!x181.valid){
continue;
}
IkReal x177=x181.value;
if((((1.0)+(((-44.4444444444444)*(py*py)*(x177*x177))))) < -0.00001)
continue;
IkReal x178=IKsqrt(((1.0)+(((-44.4444444444444)*(py*py)*(x177*x177)))));
IkReal x179=((1.0)*x178);
CheckValue<IkReal> x182 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x182.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x183=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x183.valid){
continue;
}
if( ((x171*(x183.value))) < -1-IKFAST_SINCOS_THRESH || ((x171*(x183.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst32=((((-1.0)*(x182.value)))+(((-1.0)*(IKasin((x171*(x183.value)))))));
IkReal gconst33=(((x171*x175*x177))+(((-1.0)*x176*x179)));
IkReal gconst34=((((-1.0)*x175*x179))+(((-1.0)*x171*x176*x177)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x184=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x184.valid){
continue;
}
if( (((6.66666666666667)*py*(x184.value))) < -1-IKFAST_SINCOS_THRESH || (((6.66666666666667)*py*(x184.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x185 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x185.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((6.66666666666667)*py*(x184.value))))+j5+(x185.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x186=gconst34*gconst34;
IkReal x187=gconst33*gconst33;
IkReal x188=(gconst33*r01);
IkReal x189=(gconst33*r11);
IkReal x190=((1.2)*py);
IkReal x191=((1.2)*px);
IkReal x192=(gconst34*r00);
IkReal x193=(gconst34*r10);
IkReal x194=((0.09)*x186);
IkReal x195=((0.09)*x187);
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((((0.15)*x193))+py+(((-0.15)*x189))),-1);
if(!x203.valid){
continue;
}
IkReal x196=x203.value;
IkReal x197=(px*x196);
IkReal x198=((0.15)*x196);
IkReal x199=(x192*x198);
IkReal x200=(x188*x198);
IkReal x201=(x199+x197);
if((((((-1.0)*x188*x191))+(((4.0)*(py*py)))+(((-1.0)*x189*x190))+((x195*(r11*r11)))+((x194*(r10*r10)))+((x191*x192))+(((4.0)*(px*px)))+((x190*x193))+((x195*(r01*r01)))+((x194*(r00*r00)))+(((-0.18)*x189*x193))+(((-0.18)*x188*x192)))) < -0.00001)
continue;
IkReal x202=((0.5)*x196*(IKsqrt(((((-1.0)*x188*x191))+(((4.0)*(py*py)))+(((-1.0)*x189*x190))+((x195*(r11*r11)))+((x194*(r10*r10)))+((x191*x192))+(((4.0)*(px*px)))+((x190*x193))+((x195*(r01*r01)))+((x194*(r00*r00)))+(((-0.18)*x189*x193))+(((-0.18)*x188*x192))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x201))+x202+x200))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x200))+x202+x201))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2815=((6.66666666666667)*py);
IkReal x2816=((1.0)+(((-1.0)*(r12*r12))));
if((x2816) < -0.00001)
continue;
IkReal x2817=IKabs(IKsqrt(x2816));
IkReal x2824 = x2816;
if(IKabs(x2824)==0){
continue;
}
IkReal x2818=pow(x2824,-0.5);
IkReal x2819=(r11*x2818);
IkReal x2820=(r10*x2818);
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(x2817,-1);
if(!x2825.valid){
continue;
}
IkReal x2821=x2825.value;
if((((1.0)+(((-44.4444444444444)*(py*py)*(x2821*x2821))))) < -0.00001)
continue;
IkReal x2822=IKsqrt(((1.0)+(((-44.4444444444444)*(py*py)*(x2821*x2821)))));
IkReal x2823=((1.0)*x2822);
CheckValue<IkReal> x2826 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2826.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2827.valid){
continue;
}
if( ((x2815*(x2827.value))) < -1-IKFAST_SINCOS_THRESH || ((x2815*(x2827.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x2826.value)))+(IKasin((x2815*(x2827.value)))));
IkReal gconst36=(((x2815*x2819*x2821))+((x2820*x2823)));
IkReal gconst37=(((x2819*x2823))+(((-1.0)*x2815*x2820*x2821)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2828=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2828.valid){
continue;
}
if( (((6.66666666666667)*py*(x2828.value))) < -1-IKFAST_SINCOS_THRESH || (((6.66666666666667)*py*(x2828.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2829 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2829.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((6.66666666666667)*py*(x2828.value))))))+j5+(x2829.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2830=gconst36*gconst36;
IkReal x2831=gconst37*gconst37;
IkReal x2832=((0.15)*gconst36);
IkReal x2833=(gconst36*r11);
IkReal x2834=((1.2)*py);
IkReal x2835=((0.18)*gconst37);
IkReal x2836=(gconst37*r00);
IkReal x2837=((1.2)*px);
IkReal x2838=(gconst36*r01);
IkReal x2839=(gconst37*r10);
IkReal x2840=((0.09)*x2831);
IkReal x2841=((0.09)*x2830);
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(((((0.15)*x2839))+(((-1.0)*r11*x2832))+py),-1);
if(!x2847.valid){
continue;
}
IkReal x2842=x2847.value;
IkReal x2843=(px*x2842);
IkReal x2844=((0.15)*x2836*x2842);
CheckValue<IkReal> x2848=IKPowWithIntegerCheck(((((0.15)*x2839))+(((-0.15)*x2833))+py),-1);
if(!x2848.valid){
continue;
}
IkReal x2845=(r01*x2832*(x2848.value));
if(((((x2836*x2837))+((x2841*(r01*r01)))+((x2834*x2839))+(((4.0)*(py*py)))+((x2840*(r00*r00)))+((x2841*(r11*r11)))+(((-1.0)*r10*x2833*x2835))+(((-1.0)*x2833*x2834))+(((-1.0)*r00*x2835*x2838))+(((4.0)*(px*px)))+(((-1.0)*x2837*x2838))+((x2840*(r10*r10))))) < -0.00001)
continue;
IkReal x2846=((0.5)*x2842*(IKsqrt((((x2836*x2837))+((x2841*(r01*r01)))+((x2834*x2839))+(((4.0)*(py*py)))+((x2840*(r00*r00)))+((x2841*(r11*r11)))+(((-1.0)*r10*x2833*x2835))+(((-1.0)*x2833*x2834))+(((-1.0)*r00*x2835*x2838))+(((4.0)*(px*px)))+(((-1.0)*x2837*x2838))+((x2840*(r10*r10)))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2843))+x2846+x2845+(((-1.0)*x2844))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x2846+x2844+x2843+(((-1.0)*x2845))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2849=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2849.valid){
continue;
}
CheckValue<IkReal> x2850=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2850.valid){
continue;
}
CheckValue<IkReal> x2851=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2852.valid){
continue;
}
CheckValue<IkReal> x2853=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2853.valid){
continue;
}
if((((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))) < -0.00001)
continue;
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2854.valid){
continue;
}
CheckValue<IkReal> x2855=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2855.valid){
continue;
}
j0array[0]=((2.0)*(atan(((((0.15)*cj4*r10*sj5*(x2849.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2850.value)))+((cj4*rxp2_1*(x2851.value)))+(((0.15)*cj4*cj5*r11*(x2852.value)))+(((0.5)*(x2853.value)*(IKsqrt(((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))))))+(((0.15)*r12*sj4*(x2854.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2855.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2856.valid){
continue;
}
CheckValue<IkReal> x2857=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2857.valid){
continue;
}
CheckValue<IkReal> x2858=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2858.valid){
continue;
}
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2859.valid){
continue;
}
CheckValue<IkReal> x2860=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2860.valid){
continue;
}
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2861.valid){
continue;
}
CheckValue<IkReal> x2862=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2862.valid){
continue;
}
if((((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))) < -0.00001)
continue;
j0array[1]=((2.0)*(atan(((((0.15)*cj4*r10*sj5*(x2856.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2857.value)))+((cj4*rxp2_1*(x2858.value)))+(((0.15)*cj4*cj5*r11*(x2859.value)))+(((0.15)*r12*sj4*(x2860.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2861.value)))+(((-0.5)*(x2862.value)*(IKsqrt(((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))))))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2863=cj4*cj4;
IkReal x2864=cj5*cj5;
IkReal x2865=r10*r10;
IkReal x2866=r00*r00;
IkReal x2867=r11*r11;
IkReal x2868=r01*r01;
IkReal x2869=(r10*sj5);
IkReal x2870=((1.0)*sj4);
IkReal x2871=(cj5*r01);
IkReal x2872=(cj4*r02);
IkReal x2873=((4.0)*x2863);
IkReal x2874=((8.0)*cj5*r11);
IkReal x2875=(r00*sj4*sj5);
IkReal x2876=((4.0)*x2865);
IkReal x2877=((4.0)*x2866);
IkReal x2878=(cj4*r12*sj4);
IkReal x2879=((8.0)*r00*sj5);
IkReal x2880=(x2864*x2868);
IkReal x2881=(x2864*x2867);
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(((((-1.0)*x2869*x2870))+(((-1.0)*cj5*r11*x2870))+((cj4*r12))),-1);
if(!x2889.valid){
continue;
}
IkReal x2882=x2889.value;
IkReal x2883=(sj4*x2882);
IkReal x2884=(x2871*x2883);
IkReal x2885=(x2875*x2882);
IkReal x2886=((1.0)*x2872*x2882);
IkReal x2887=(x2884+x2885);
if((((((-1.0)*x2873*x2880))+(((-1.0)*x2873*x2881))+(((4.0)*x2880))+(((4.0)*x2881))+((x2873*(r02*r02)))+(((-1.0)*x2865*x2873))+((x2869*x2874))+(((-8.0)*sj4*x2871*x2872))+(((-8.0)*x2872*x2875))+((x2864*x2866*x2873))+(((-1.0)*x2864*x2877))+(((-1.0)*x2864*x2876))+(((-1.0)*x2874*x2878))+((x2864*x2865*x2873))+((x2871*x2879))+(((-1.0)*x2863*x2869*x2874))+(((-8.0)*x2869*x2878))+x2877+x2876+(((-1.0)*x2863*x2871*x2879))+(((-1.0)*x2866*x2873))+((x2873*(r12*r12))))) < -0.00001)
continue;
IkReal x2888=((0.5)*x2882*(IKsqrt(((((-1.0)*x2873*x2880))+(((-1.0)*x2873*x2881))+(((4.0)*x2880))+(((4.0)*x2881))+((x2873*(r02*r02)))+(((-1.0)*x2865*x2873))+((x2869*x2874))+(((-8.0)*sj4*x2871*x2872))+(((-8.0)*x2872*x2875))+((x2864*x2866*x2873))+(((-1.0)*x2864*x2877))+(((-1.0)*x2864*x2876))+(((-1.0)*x2874*x2878))+((x2864*x2865*x2873))+((x2871*x2879))+(((-1.0)*x2863*x2869*x2874))+(((-8.0)*x2869*x2878))+x2877+x2876+(((-1.0)*x2863*x2871*x2879))+(((-1.0)*x2866*x2873))+((x2873*(r12*r12)))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2886))+x2887+x2888))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2887))+x2886+x2888))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2890=cj5*cj5;
IkReal x2891=r01*r01;
IkReal x2892=r11*r11;
IkReal x2893=(r11*sj5);
IkReal x2894=((1.2)*py);
IkReal x2895=((0.15)*cj5);
IkReal x2896=(cj5*r00);
IkReal x2897=((1.2)*px);
IkReal x2898=(r01*sj5);
IkReal x2899=(cj5*r10);
IkReal x2900=((0.09)*x2890);
CheckValue<IkReal> x2906=IKPowWithIntegerCheck((py+(((-0.15)*x2893))+((r10*x2895))),-1);
if(!x2906.valid){
continue;
}
IkReal x2901=x2906.value;
IkReal x2902=(px*x2901);
CheckValue<IkReal> x2907=IKPowWithIntegerCheck(((((0.15)*x2899))+py+(((-0.15)*x2893))),-1);
if(!x2907.valid){
continue;
}
IkReal x2903=(r00*x2895*(x2907.value));
IkReal x2904=((0.15)*x2898*x2901);
if((((((4.0)*(py*py)))+((x2900*(r10*r10)))+(((-0.18)*x2893*x2899))+(((-0.18)*x2896*x2898))+(((-1.0)*x2893*x2894))+((x2896*x2897))+(((4.0)*(px*px)))+((x2900*(r00*r00)))+(((-1.0)*x2897*x2898))+(((-1.0)*x2892*x2900))+((x2894*x2899))+(((-1.0)*x2891*x2900))+(((0.09)*x2891))+(((0.09)*x2892)))) < -0.00001)
continue;
IkReal x2905=((0.5)*x2901*(IKsqrt(((((4.0)*(py*py)))+((x2900*(r10*r10)))+(((-0.18)*x2893*x2899))+(((-0.18)*x2896*x2898))+(((-1.0)*x2893*x2894))+((x2896*x2897))+(((4.0)*(px*px)))+((x2900*(r00*r00)))+(((-1.0)*x2897*x2898))+(((-1.0)*x2892*x2900))+((x2894*x2899))+(((-1.0)*x2891*x2900))+(((0.09)*x2891))+(((0.09)*x2892))))));
j0array[0]=((-2.0)*(atan(((((1.0)*x2902))+(((-1.0)*x2904))+(((-1.0)*x2905))+x2903))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2904))+x2903+x2902+x2905))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x204=(cj0*r21);
IkReal x205=((1.0)*cj5);
IkReal x206=((1.0)*cj0);
IkReal x207=((((-1.0)*cj4*r02))+((r00*sj4*sj5))+((cj5*r01*sj4)));
j3eval[0]=x207;
j3eval[1]=IKsign(x207);
j3eval[2]=((IKabs(((((-1.0)*cj4*x204*x205))+(((-1.0)*cj4*r20*sj5*x206))+(((-1.0)*r22*sj4*x206)))))+(IKabs(((((-1.0)*cj0*r20*x205))+((sj5*x204))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x208=(r21*sj0);
IkReal x209=((1.0)*cj4);
IkReal x210=((1.0)*r20*sj0);
IkReal x211=((((-1.0)*r12*x209))+((cj5*r11*sj4))+((r10*sj4*sj5)));
j3eval[0]=x211;
j3eval[1]=((IKabs(((((-1.0)*cj5*x210))+((sj5*x208)))))+(IKabs(((((-1.0)*cj5*x208*x209))+(((-1.0)*r20*sj0*sj5*x209))+(((-1.0)*r22*sj0*sj4))))));
j3eval[2]=IKsign(x211);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x212=((1.0)*sj4);
IkReal x213=(((cj4*r22))+(((-1.0)*r20*sj5*x212))+(((-1.0)*cj5*r21*x212)));
j3eval[0]=x213;
j3eval[1]=IKsign(x213);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x214=((1.0)*r20);
IkReal x215=((1.0)*cj4);
IkReal x216=(((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x215)));
j3eval[0]=x216;
j3eval[1]=IKsign(x216);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x214))+(((-1.0)*cj5*r21*x215))+(((-1.0)*r22*sj4)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x214))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x217=((1.0)*sj4);
IkReal x218=((1.0)*r00);
IkReal x219=(((cj4*r22))+(((-1.0)*r20*sj5*x217))+(((-1.0)*cj5*r21*x217)));
j3eval[0]=x219;
j3eval[1]=IKsign(x219);
j3eval[2]=((IKabs(((((-1.0)*cj4*cj5*r01))+(((-1.0)*cj4*sj5*x218))+(((-1.0)*r02*x217)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*x218))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x220=cj4*cj4;
IkReal x221=cj5*cj5;
IkReal x222=r10*r10;
IkReal x223=r11*r11;
IkReal x224=r12*r12;
IkReal x225=(cj5*r10);
IkReal x226=((2.0)*sj5);
IkReal x227=(cj4*r10);
IkReal x228=(r12*sj4);
IkReal x229=((1.0)*x220);
IkReal x230=(cj4*cj5*r11);
IkReal x231=(x221*x223);
IkReal x232=(x221*x222);
IkReal x233=((((-1.0)*r11*x220*x225*x226))+(((-1.0)*x226*x227*x228))+(((-2.0)*x228*x230))+(((-1.0)*x222*x229))+x231+((x220*x224))+(((-1.0)*x229*x231))+(((-1.0)*x232))+((x220*x232))+((r11*x225*x226))+(((-1.0)*x223))+(((-1.0)*x224)));
j3eval[0]=x233;
j3eval[1]=((IKabs((((r11*sj5))+(((-1.0)*x225)))))+(IKabs((x228+x230+((sj5*x227))))));
j3eval[2]=IKsign(x233);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x234=cj4*cj4;
IkReal x235=cj5*cj5;
IkReal x236=r10*r10;
IkReal x237=r11*r11;
IkReal x238=r12*r12;
IkReal x239=(cj5*r10);
IkReal x240=((2.0)*sj5);
IkReal x241=(cj5*r11);
IkReal x242=((1.0)*x234);
IkReal x243=(cj4*r12*sj4);
IkReal x244=(x235*x237);
IkReal x245=(x235*x236);
CheckValue<IkReal> x246 = IKatan2WithCheck(IkReal((((cj4*x241))+((r12*sj4))+((cj4*r10*sj5)))),IkReal((((r11*sj5))+(((-1.0)*x239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x246.valid){
continue;
}
CheckValue<IkReal> x247=IKPowWithIntegerCheck(IKsign((((x234*x238))+(((-1.0)*x242*x244))+(((-1.0)*x245))+((x234*x245))+(((-1.0)*r11*x234*x239*x240))+((r11*x239*x240))+(((-2.0)*x241*x243))+(((-1.0)*x236*x242))+x244+(((-1.0)*r10*x240*x243))+(((-1.0)*x237))+(((-1.0)*x238)))),-1);
if(!x247.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x246.value)+(((1.5707963267949)*(x247.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x248=IKsin(j3);
IkReal x249=IKcos(j3);
IkReal x250=(cj4*r10);
IkReal x251=(cj4*r11);
IkReal x252=(cj5*x248);
IkReal x253=(sj5*x248);
IkReal x254=(sj4*x248);
IkReal x255=(sj5*x249);
IkReal x256=((1.0)*cj5*x249);
evalcond[0]=(((r21*x255))+((cj4*r20*x253))+((cj4*r21*x252))+(((-1.0)*r20*x256))+((r22*x254)));
evalcond[1]=(((cj4*r01*x252))+((cj4*r00*x253))+((r01*x255))+(((-1.0)*r00*x256))+((r02*x254)));
evalcond[2]=(((r10*x252))+((r12*sj4*x249))+((x250*x255))+(((-1.0)*r11*x253))+((cj5*x249*x251)));
evalcond[3]=((1.0)+((r11*x255))+((x251*x252))+((r12*x254))+((x250*x253))+(((-1.0)*r10*x256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x257=((0.76056338028169)*sj4);
IkReal x258=((0.211267605633803)*sj5);
IkReal x259=((0.76056338028169)*cj4);
IkReal x260=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x257))+(((-1.0)*r01*x258))+(((-1.0)*cj5*r01*x257))+(((1.40845070422535)*px))+((r00*x260))+((r02*x259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x257))+(((-1.0)*r21*x258))+(((1.40845070422535)*pz))+((r22*x259))+(((-1.0)*cj5*r21*x257))+((r20*x260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x257))+(((-1.0)*r01*x258))+(((-1.0)*cj5*r01*x257))+(((1.40845070422535)*px))+((r00*x260))+((r02*x259))))+IKsqr(((((-1.0)*r20*sj5*x257))+(((-1.0)*r21*x258))+(((1.40845070422535)*pz))+((r22*x259))+(((-1.0)*cj5*r21*x257))+((r20*x260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x257))+(((-1.0)*r01*x258))+(((-1.0)*cj5*r01*x257))+(((1.40845070422535)*px))+((r00*x260))+((r02*x259))), ((((-1.0)*r20*sj5*x257))+(((-1.0)*r21*x258))+(((1.40845070422535)*pz))+((r22*x259))+(((-1.0)*cj5*r21*x257))+((r20*x260))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x261=((1.0)*px);
IkReal x262=((0.54)*sj5);
IkReal x263=((0.15)*sj5);
IkReal x264=((0.54)*cj5);
IkReal x265=(cj3*cj4);
IkReal x266=((0.15)*cj5);
IkReal x267=((0.54)*r02);
IkReal x268=(cj3*sj4);
IkReal x269=((0.54)*r22);
IkReal x270=(r01*x263);
IkReal x271=((0.71)*(IKsin(j1)));
IkReal x272=(r00*x266);
IkReal x273=(r21*x263);
IkReal x274=((0.71)*(IKcos(j1)));
IkReal x275=(r20*x266);
IkReal x276=(x261+x272);
IkReal x277=(x274+x273);
IkReal x278=(x270+x271);
evalcond[0]=((((-1.0)*r21*sj4*x264))+(((-1.0)*r20*sj4*x262))+((cj4*x269))+x275+pz+(((-1.0)*x277)));
evalcond[1]=(((r01*sj4*x264))+(((-1.0)*cj4*x267))+x278+((r00*sj4*x262))+(((-1.0)*x276)));
evalcond[2]=(((r21*sj3*x262))+(((-1.0)*r20*x262*x265))+(((-1.0)*r21*x264*x265))+(((-1.0)*r20*sj3*x264))+x278+(((-1.0)*x268*x269))+(((-1.0)*x276)));
evalcond[3]=(((x267*x268))+((r00*sj3*x264))+(((-1.0)*pz))+x277+(((-1.0)*r01*sj3*x262))+(((-1.0)*x275))+((r00*x262*x265))+((r01*x264*x265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x279=((1.0)*cj4);
IkReal x280=(sj1*sj4);
IkReal x281=(r20*sj5);
IkReal x282=(cj5*r01);
IkReal x283=(cj5*r21);
IkReal x284=(cj1*sj4);
IkReal x285=(r00*sj5);
if( IKabs(((((-1.0)*cj1*r22*x279))+((x280*x285))+((x280*x282))+((x281*x284))+(((-1.0)*r02*sj1*x279))+((x283*x284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x284*x285))+(((-1.0)*x280*x283))+(((-1.0)*x280*x281))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x279))+((x282*x284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x279))+((x280*x285))+((x280*x282))+((x281*x284))+(((-1.0)*r02*sj1*x279))+((x283*x284))))+IKsqr((((x284*x285))+(((-1.0)*x280*x283))+(((-1.0)*x280*x281))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x279))+((x282*x284))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x279))+((x280*x285))+((x280*x282))+((x281*x284))+(((-1.0)*r02*sj1*x279))+((x283*x284))), (((x284*x285))+(((-1.0)*x280*x283))+(((-1.0)*x280*x281))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x279))+((x282*x284))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x286=IKsin(j2);
IkReal x287=IKcos(j2);
IkReal x288=(cj3*sj4);
IkReal x289=(r21*sj5);
IkReal x290=(cj5*sj4);
IkReal x291=((0.15)*cj5);
IkReal x292=((1.0)*cj4);
IkReal x293=(sj4*sj5);
IkReal x294=((1.0)*sj3);
IkReal x295=(cj5*sj3);
IkReal x296=(r01*sj5);
IkReal x297=(sj1*x287);
IkReal x298=(cj1*x287);
IkReal x299=(cj3*cj4*sj5);
IkReal x300=((0.54)*x286);
IkReal x301=(sj1*x286);
IkReal x302=(cj3*cj4*cj5);
IkReal x303=((1.0)*cj1*x286);
evalcond[0]=(((r20*x293))+x297+(((-1.0)*r22*x292))+((r21*x290))+(((-1.0)*x303)));
evalcond[1]=((((-1.0)*x298))+(((-1.0)*x301))+(((-1.0)*r02*x292))+((r01*x290))+((r00*x293)));
evalcond[2]=((((0.71)*cj1))+((cj1*x300))+(((-1.0)*pz))+(((0.15)*x289))+(((-1.0)*r20*x291))+(((-0.54)*x297)));
evalcond[3]=((((0.54)*x298))+(((-1.0)*r00*x291))+(((0.15)*x296))+(((-1.0)*px))+(((0.71)*sj1))+((sj1*x300)));
evalcond[4]=((((-1.0)*x289*x294))+((r21*x302))+((r22*x288))+x301+((r20*x299))+((r20*x295))+x298);
evalcond[5]=(((r02*x288))+x297+((r00*x295))+((r00*x299))+((r01*x302))+(((-1.0)*x303))+(((-1.0)*x294*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x304=((1.0)*sj4);
IkReal x305=((1.0)*r00);
CheckValue<IkReal> x306 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x305)))),IkReal(((((-1.0)*cj4*cj5*r01))+(((-1.0)*r02*x304))+(((-1.0)*cj4*sj5*x305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x306.valid){
continue;
}
CheckValue<IkReal> x307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x304))+((cj4*r22))+(((-1.0)*cj5*r21*x304)))),-1);
if(!x307.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x306.value)+(((1.5707963267949)*(x307.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x308=IKsin(j3);
IkReal x309=IKcos(j3);
IkReal x310=(cj4*r10);
IkReal x311=(cj4*r11);
IkReal x312=(cj5*x308);
IkReal x313=(sj5*x308);
IkReal x314=(sj4*x308);
IkReal x315=(sj5*x309);
IkReal x316=((1.0)*cj5*x309);
evalcond[0]=((((-1.0)*r20*x316))+((cj4*r21*x312))+((cj4*r20*x313))+((r21*x315))+((r22*x314)));
evalcond[1]=(((r02*x314))+(((-1.0)*r00*x316))+((r01*x315))+((cj4*r00*x313))+((cj4*r01*x312)));
evalcond[2]=(((x310*x315))+(((-1.0)*r11*x313))+((cj5*x309*x311))+((r12*sj4*x309))+((r10*x312)));
evalcond[3]=((1.0)+((r11*x315))+((x310*x313))+(((-1.0)*r10*x316))+((x311*x312))+((r12*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x317=((0.76056338028169)*sj4);
IkReal x318=((0.211267605633803)*sj5);
IkReal x319=((0.76056338028169)*cj4);
IkReal x320=((0.211267605633803)*cj5);
if( IKabs((((r02*x319))+((r00*x320))+(((-1.0)*cj5*r01*x317))+(((-1.0)*r01*x318))+(((-1.0)*r00*sj5*x317))+(((1.40845070422535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x318))+((r20*x320))+(((-1.0)*r20*sj5*x317))+(((-1.0)*cj5*r21*x317))+(((1.40845070422535)*pz))+((r22*x319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x319))+((r00*x320))+(((-1.0)*cj5*r01*x317))+(((-1.0)*r01*x318))+(((-1.0)*r00*sj5*x317))+(((1.40845070422535)*px))))+IKsqr(((((-1.0)*r21*x318))+((r20*x320))+(((-1.0)*r20*sj5*x317))+(((-1.0)*cj5*r21*x317))+(((1.40845070422535)*pz))+((r22*x319))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x319))+((r00*x320))+(((-1.0)*cj5*r01*x317))+(((-1.0)*r01*x318))+(((-1.0)*r00*sj5*x317))+(((1.40845070422535)*px))), ((((-1.0)*r21*x318))+((r20*x320))+(((-1.0)*r20*sj5*x317))+(((-1.0)*cj5*r21*x317))+(((1.40845070422535)*pz))+((r22*x319))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x321=((1.0)*px);
IkReal x322=((0.54)*sj5);
IkReal x323=((0.15)*sj5);
IkReal x324=((0.54)*cj5);
IkReal x325=(cj3*cj4);
IkReal x326=((0.15)*cj5);
IkReal x327=((0.54)*r02);
IkReal x328=(cj3*sj4);
IkReal x329=((0.54)*r22);
IkReal x330=(r01*x323);
IkReal x331=((0.71)*(IKsin(j1)));
IkReal x332=(r00*x326);
IkReal x333=(r21*x323);
IkReal x334=((0.71)*(IKcos(j1)));
IkReal x335=(r20*x326);
IkReal x336=(x332+x321);
IkReal x337=(x333+x334);
IkReal x338=(x331+x330);
evalcond[0]=((((-1.0)*r21*sj4*x324))+(((-1.0)*r20*sj4*x322))+x335+((cj4*x329))+pz+(((-1.0)*x337)));
evalcond[1]=(((r01*sj4*x324))+((r00*sj4*x322))+x338+(((-1.0)*x336))+(((-1.0)*cj4*x327)));
evalcond[2]=(((r21*sj3*x322))+(((-1.0)*r21*x324*x325))+(((-1.0)*r20*x322*x325))+x338+(((-1.0)*r20*sj3*x324))+(((-1.0)*x336))+(((-1.0)*x328*x329)));
evalcond[3]=((((-1.0)*r01*sj3*x322))+((x327*x328))+x337+(((-1.0)*pz))+((r00*sj3*x324))+(((-1.0)*x335))+((r00*x322*x325))+((r01*x324*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x339=((1.0)*cj4);
IkReal x340=(sj1*sj4);
IkReal x341=(r20*sj5);
IkReal x342=(cj5*r01);
IkReal x343=(cj5*r21);
IkReal x344=(cj1*sj4);
IkReal x345=(r00*sj5);
if( IKabs(((((-1.0)*cj1*r22*x339))+((x341*x344))+(((-1.0)*r02*sj1*x339))+((x340*x345))+((x340*x342))+((x343*x344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22*sj1))+((x344*x345))+(((-1.0)*x340*x343))+(((-1.0)*x340*x341))+(((-1.0)*cj1*r02*x339))+((x342*x344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x339))+((x341*x344))+(((-1.0)*r02*sj1*x339))+((x340*x345))+((x340*x342))+((x343*x344))))+IKsqr((((cj4*r22*sj1))+((x344*x345))+(((-1.0)*x340*x343))+(((-1.0)*x340*x341))+(((-1.0)*cj1*r02*x339))+((x342*x344))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x339))+((x341*x344))+(((-1.0)*r02*sj1*x339))+((x340*x345))+((x340*x342))+((x343*x344))), (((cj4*r22*sj1))+((x344*x345))+(((-1.0)*x340*x343))+(((-1.0)*x340*x341))+(((-1.0)*cj1*r02*x339))+((x342*x344))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x346=IKsin(j2);
IkReal x347=IKcos(j2);
IkReal x348=(cj3*sj4);
IkReal x349=(r21*sj5);
IkReal x350=(cj5*sj4);
IkReal x351=((0.15)*cj5);
IkReal x352=((1.0)*cj4);
IkReal x353=(sj4*sj5);
IkReal x354=((1.0)*sj3);
IkReal x355=(cj5*sj3);
IkReal x356=(r01*sj5);
IkReal x357=(sj1*x347);
IkReal x358=(cj1*x347);
IkReal x359=(cj3*cj4*sj5);
IkReal x360=((0.54)*x346);
IkReal x361=(sj1*x346);
IkReal x362=(cj3*cj4*cj5);
IkReal x363=((1.0)*cj1*x346);
evalcond[0]=((((-1.0)*r22*x352))+((r21*x350))+(((-1.0)*x363))+x357+((r20*x353)));
evalcond[1]=((((-1.0)*x361))+((r01*x350))+((r00*x353))+(((-1.0)*x358))+(((-1.0)*r02*x352)));
evalcond[2]=((((-0.54)*x357))+(((0.71)*cj1))+(((-1.0)*pz))+((cj1*x360))+(((-1.0)*r20*x351))+(((0.15)*x349)));
evalcond[3]=(((sj1*x360))+(((0.54)*x358))+(((-1.0)*px))+(((0.15)*x356))+(((-1.0)*r00*x351))+(((0.71)*sj1)));
evalcond[4]=(((r22*x348))+(((-1.0)*x349*x354))+x358+x361+((r21*x362))+((r20*x355))+((r20*x359)));
evalcond[5]=(((r01*x362))+(((-1.0)*x363))+((r00*x355))+((r00*x359))+x357+((r02*x348))+(((-1.0)*x354*x356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x364=((1.0)*r20);
IkReal x365=((1.0)*cj4);
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x364))+((r21*sj5)))),IkReal(((((-1.0)*cj4*sj5*x364))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
CheckValue<IkReal> x367=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+(((-1.0)*r02*x365))+((cj5*r01*sj4)))),-1);
if(!x367.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x366.value)+(((1.5707963267949)*(x367.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x368=IKsin(j3);
IkReal x369=IKcos(j3);
IkReal x370=(cj4*r10);
IkReal x371=(cj4*r11);
IkReal x372=(cj5*x368);
IkReal x373=(sj5*x368);
IkReal x374=(sj4*x368);
IkReal x375=(sj5*x369);
IkReal x376=((1.0)*cj5*x369);
evalcond[0]=((((-1.0)*r20*x376))+((cj4*r21*x372))+((r22*x374))+((r21*x375))+((cj4*r20*x373)));
evalcond[1]=(((r02*x374))+(((-1.0)*r00*x376))+((r01*x375))+((cj4*r00*x373))+((cj4*r01*x372)));
evalcond[2]=((((-1.0)*r11*x373))+((x370*x375))+((r12*sj4*x369))+((cj5*x369*x371))+((r10*x372)));
evalcond[3]=((1.0)+((x370*x373))+(((-1.0)*r10*x376))+((r12*x374))+((r11*x375))+((x371*x372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x377=((0.76056338028169)*sj4);
IkReal x378=((0.211267605633803)*sj5);
IkReal x379=((0.76056338028169)*cj4);
IkReal x380=((0.211267605633803)*cj5);
if( IKabs((((r02*x379))+(((-1.0)*r00*sj5*x377))+(((-1.0)*r01*x378))+(((-1.0)*cj5*r01*x377))+(((1.40845070422535)*px))+((r00*x380)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x378))+((r20*x380))+(((1.40845070422535)*pz))+((r22*x379))+(((-1.0)*cj5*r21*x377))+(((-1.0)*r20*sj5*x377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x379))+(((-1.0)*r00*sj5*x377))+(((-1.0)*r01*x378))+(((-1.0)*cj5*r01*x377))+(((1.40845070422535)*px))+((r00*x380))))+IKsqr(((((-1.0)*r21*x378))+((r20*x380))+(((1.40845070422535)*pz))+((r22*x379))+(((-1.0)*cj5*r21*x377))+(((-1.0)*r20*sj5*x377))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x379))+(((-1.0)*r00*sj5*x377))+(((-1.0)*r01*x378))+(((-1.0)*cj5*r01*x377))+(((1.40845070422535)*px))+((r00*x380))), ((((-1.0)*r21*x378))+((r20*x380))+(((1.40845070422535)*pz))+((r22*x379))+(((-1.0)*cj5*r21*x377))+(((-1.0)*r20*sj5*x377))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x381=((1.0)*px);
IkReal x382=((0.54)*sj5);
IkReal x383=((0.15)*sj5);
IkReal x384=((0.54)*cj5);
IkReal x385=(cj3*cj4);
IkReal x386=((0.15)*cj5);
IkReal x387=((0.54)*r02);
IkReal x388=(cj3*sj4);
IkReal x389=((0.54)*r22);
IkReal x390=(r01*x383);
IkReal x391=((0.71)*(IKsin(j1)));
IkReal x392=(r00*x386);
IkReal x393=(r21*x383);
IkReal x394=((0.71)*(IKcos(j1)));
IkReal x395=(r20*x386);
IkReal x396=(x381+x392);
IkReal x397=(x394+x393);
IkReal x398=(x391+x390);
evalcond[0]=((((-1.0)*x397))+x395+pz+((cj4*x389))+(((-1.0)*r20*sj4*x382))+(((-1.0)*r21*sj4*x384)));
evalcond[1]=((((-1.0)*x396))+((r01*sj4*x384))+x398+((r00*sj4*x382))+(((-1.0)*cj4*x387)));
evalcond[2]=((((-1.0)*x396))+((r21*sj3*x382))+(((-1.0)*r20*sj3*x384))+x398+(((-1.0)*r21*x384*x385))+(((-1.0)*r20*x382*x385))+(((-1.0)*x388*x389)));
evalcond[3]=((((-1.0)*x395))+((x387*x388))+((r01*x384*x385))+x397+(((-1.0)*pz))+((r00*sj3*x384))+(((-1.0)*r01*sj3*x382))+((r00*x382*x385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x399=((1.0)*cj4);
IkReal x400=(sj1*sj4);
IkReal x401=(r20*sj5);
IkReal x402=(cj5*r01);
IkReal x403=(cj5*r21);
IkReal x404=(cj1*sj4);
IkReal x405=(r00*sj5);
if( IKabs(((((-1.0)*r02*sj1*x399))+(((-1.0)*cj1*r22*x399))+((x400*x405))+((x400*x402))+((x403*x404))+((x401*x404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x404*x405))+((cj4*r22*sj1))+((x402*x404))+(((-1.0)*cj1*r02*x399))+(((-1.0)*x400*x401))+(((-1.0)*x400*x403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x399))+(((-1.0)*cj1*r22*x399))+((x400*x405))+((x400*x402))+((x403*x404))+((x401*x404))))+IKsqr((((x404*x405))+((cj4*r22*sj1))+((x402*x404))+(((-1.0)*cj1*r02*x399))+(((-1.0)*x400*x401))+(((-1.0)*x400*x403))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*sj1*x399))+(((-1.0)*cj1*r22*x399))+((x400*x405))+((x400*x402))+((x403*x404))+((x401*x404))), (((x404*x405))+((cj4*r22*sj1))+((x402*x404))+(((-1.0)*cj1*r02*x399))+(((-1.0)*x400*x401))+(((-1.0)*x400*x403))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x406=IKsin(j2);
IkReal x407=IKcos(j2);
IkReal x408=(cj3*sj4);
IkReal x409=(r21*sj5);
IkReal x410=(cj5*sj4);
IkReal x411=((0.15)*cj5);
IkReal x412=((1.0)*cj4);
IkReal x413=(sj4*sj5);
IkReal x414=((1.0)*sj3);
IkReal x415=(cj5*sj3);
IkReal x416=(r01*sj5);
IkReal x417=(sj1*x407);
IkReal x418=(cj1*x407);
IkReal x419=(cj3*cj4*sj5);
IkReal x420=((0.54)*x406);
IkReal x421=(sj1*x406);
IkReal x422=(cj3*cj4*cj5);
IkReal x423=((1.0)*cj1*x406);
evalcond[0]=((((-1.0)*x423))+((r21*x410))+x417+((r20*x413))+(((-1.0)*r22*x412)));
evalcond[1]=((((-1.0)*x421))+(((-1.0)*r02*x412))+((r01*x410))+((r00*x413))+(((-1.0)*x418)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x411))+(((-1.0)*pz))+((cj1*x420))+(((-0.54)*x417))+(((0.15)*x409)));
evalcond[3]=((((0.15)*x416))+(((0.54)*x418))+(((-1.0)*px))+(((0.71)*sj1))+(((-1.0)*r00*x411))+((sj1*x420)));
evalcond[4]=(((r21*x422))+((r22*x408))+x418+x421+((r20*x419))+((r20*x415))+(((-1.0)*x409*x414)));
evalcond[5]=((((-1.0)*x423))+((r01*x422))+((r00*x419))+((r00*x415))+x417+(((-1.0)*x414*x416))+((r02*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x424=((1.0)*cj4);
IkReal x425=(((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x424)));
j3eval[0]=x425;
j3eval[1]=IKsign(x425);
j3eval[2]=((IKabs(((((-1.0)*cj5*r01*x424))+(((-1.0)*r00*sj5*x424))+(((-1.0)*r02*sj4)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x426=((1.0)*sj5);
IkReal x427=((1.0)*cj5);
IkReal x428=((((-1.0)*r00*sj4*x426))+(((-1.0)*r01*sj4*x427))+((cj4*r02)));
j3eval[0]=x428;
j3eval[1]=IKsign(x428);
j3eval[2]=((IKabs(((((-1.0)*r22*sj4))+(((-1.0)*cj4*r20*x426))+(((-1.0)*cj4*r21*x427)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x427))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x429=cj4*cj4;
IkReal x430=r11*r11;
IkReal x431=cj5*cj5;
IkReal x432=r10*r10;
IkReal x433=r12*r12;
IkReal x434=(cj5*r11);
IkReal x435=((1.0)*x429);
IkReal x436=((2.0)*r10*sj5);
IkReal x437=(cj4*r12*sj4);
IkReal x438=(x431*x432);
IkReal x439=(x430*x431);
IkReal x440=(((x429*x439))+((x429*x432))+((x436*x437))+(((-1.0)*x433*x435))+(((-1.0)*x439))+(((2.0)*x434*x437))+(((-1.0)*x435*x438))+(((-1.0)*x434*x436))+((x429*x434*x436))+x438+x430+x433);
j3eval[0]=x440;
j3eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs((((cj4*x434))+((r12*sj4))+((cj4*r10*sj5))))));
j3eval[2]=IKsign(x440);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x441=cj4*cj4;
IkReal x442=r11*r11;
IkReal x443=cj5*cj5;
IkReal x444=r10*r10;
IkReal x445=r12*r12;
IkReal x446=(cj5*r11);
IkReal x447=((2.0)*r10*sj5);
IkReal x448=(cj4*r12*sj4);
IkReal x449=((1.0)*x441);
IkReal x450=(x443*x444);
IkReal x451=(x442*x443);
CheckValue<IkReal> x452 = IKatan2WithCheck(IkReal((((cj4*x446))+((r12*sj4))+((cj4*r10*sj5)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x452.valid){
continue;
}
CheckValue<IkReal> x453=IKPowWithIntegerCheck(IKsign((((x441*x451))+((x447*x448))+(((-1.0)*x445*x449))+(((-1.0)*x451))+((x441*x444))+x445+x442+x450+((x441*x446*x447))+(((2.0)*x446*x448))+(((-1.0)*x449*x450))+(((-1.0)*x446*x447)))),-1);
if(!x453.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x452.value)+(((1.5707963267949)*(x453.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x454=IKsin(j3);
IkReal x455=IKcos(j3);
IkReal x456=(cj4*r10);
IkReal x457=(cj4*r11);
IkReal x458=(cj5*x454);
IkReal x459=(sj5*x454);
IkReal x460=(sj4*x454);
IkReal x461=(sj5*x455);
IkReal x462=((1.0)*cj5*x455);
evalcond[0]=(((r22*x460))+((cj4*r21*x458))+((cj4*r20*x459))+((r21*x461))+(((-1.0)*r20*x462)));
evalcond[1]=(((cj4*r00*x459))+((cj4*r01*x458))+(((-1.0)*r00*x462))+((r02*x460))+((r01*x461)));
evalcond[2]=(((x456*x461))+((r12*sj4*x455))+(((-1.0)*r11*x459))+((r10*x458))+((cj5*x455*x457)));
evalcond[3]=((-1.0)+((r12*x460))+(((-1.0)*r10*x462))+((r11*x461))+((x456*x459))+((x457*x458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x463=((0.76056338028169)*sj4);
IkReal x464=((0.211267605633803)*sj5);
IkReal x465=((0.76056338028169)*cj4);
IkReal x466=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x466))+((r00*sj5*x463))+(((-1.40845070422535)*px))+(((-1.0)*r02*x465))+((r01*x464))+((cj5*r01*x463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x465))+((r20*x466))+(((-1.0)*r20*sj5*x463))+(((-1.0)*cj5*r21*x463))+(((1.40845070422535)*pz))+(((-1.0)*r21*x464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x466))+((r00*sj5*x463))+(((-1.40845070422535)*px))+(((-1.0)*r02*x465))+((r01*x464))+((cj5*r01*x463))))+IKsqr((((r22*x465))+((r20*x466))+(((-1.0)*r20*sj5*x463))+(((-1.0)*cj5*r21*x463))+(((1.40845070422535)*pz))+(((-1.0)*r21*x464))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x466))+((r00*sj5*x463))+(((-1.40845070422535)*px))+(((-1.0)*r02*x465))+((r01*x464))+((cj5*r01*x463))), (((r22*x465))+((r20*x466))+(((-1.0)*r20*sj5*x463))+(((-1.0)*cj5*r21*x463))+(((1.40845070422535)*pz))+(((-1.0)*r21*x464))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x467=((0.54)*sj5);
IkReal x468=((0.15)*sj5);
IkReal x469=((0.54)*cj5);
IkReal x470=(cj3*cj4);
IkReal x471=((0.15)*cj5);
IkReal x472=((0.54)*r02);
IkReal x473=(cj3*sj4);
IkReal x474=((0.54)*r22);
IkReal x475=(r20*x471);
IkReal x476=(r21*x468);
IkReal x477=((0.71)*(IKcos(j1)));
IkReal x478=(r01*x468);
IkReal x479=((0.71)*(IKsin(j1)));
IkReal x480=(r00*x471);
IkReal x481=(x475+pz);
IkReal x482=(x476+x477);
IkReal x483=(x480+x479);
evalcond[0]=(((cj4*x474))+(((-1.0)*x482))+(((-1.0)*r21*sj4*x469))+x481+(((-1.0)*r20*sj4*x467)));
evalcond[1]=(((cj4*x472))+(((-1.0)*r00*sj4*x467))+(((-1.0)*x478))+(((-1.0)*r01*sj4*x469))+x483+px);
evalcond[2]=(((x472*x473))+(((-1.0)*x482))+x481+((r01*x469*x470))+((r00*x467*x470))+((r00*sj3*x469))+(((-1.0)*r01*sj3*x467)));
evalcond[3]=(((r20*sj3*x469))+((x473*x474))+(((-1.0)*x483))+((r20*x467*x470))+(((-1.0)*px))+x478+(((-1.0)*r21*sj3*x467))+((r21*x469*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x484=(cj4*r22);
IkReal x485=((1.0)*cj1);
IkReal x486=(r20*sj5);
IkReal x487=(cj4*r02);
IkReal x488=(cj5*r21);
IkReal x489=(cj1*sj4);
IkReal x490=(cj5*r01);
IkReal x491=(r00*sj5);
IkReal x492=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x484*x485))+(((-1.0)*x491*x492))+((x488*x489))+(((-1.0)*x490*x492))+((sj1*x487))+((x486*x489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x488*x492))+(((-1.0)*x486*x492))+((sj1*x484))+((cj1*x487))+(((-1.0)*sj4*x485*x491))+(((-1.0)*sj4*x485*x490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x484*x485))+(((-1.0)*x491*x492))+((x488*x489))+(((-1.0)*x490*x492))+((sj1*x487))+((x486*x489))))+IKsqr(((((-1.0)*x488*x492))+(((-1.0)*x486*x492))+((sj1*x484))+((cj1*x487))+(((-1.0)*sj4*x485*x491))+(((-1.0)*sj4*x485*x490))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x484*x485))+(((-1.0)*x491*x492))+((x488*x489))+(((-1.0)*x490*x492))+((sj1*x487))+((x486*x489))), ((((-1.0)*x488*x492))+(((-1.0)*x486*x492))+((sj1*x484))+((cj1*x487))+(((-1.0)*sj4*x485*x491))+(((-1.0)*sj4*x485*x490))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x493=IKcos(j2);
IkReal x494=IKsin(j2);
IkReal x495=(cj3*sj4);
IkReal x496=(r21*sj5);
IkReal x497=(cj5*sj4);
IkReal x498=((0.15)*cj5);
IkReal x499=((1.0)*cj4);
IkReal x500=(sj4*sj5);
IkReal x501=((1.0)*sj3);
IkReal x502=(cj5*sj3);
IkReal x503=(r01*sj5);
IkReal x504=(cj1*x493);
IkReal x505=(sj1*x494);
IkReal x506=(cj3*cj4*sj5);
IkReal x507=(cj1*x494);
IkReal x508=(sj1*x493);
IkReal x509=(cj3*cj4*cj5);
IkReal x510=(x504+x505);
evalcond[0]=((((-1.0)*r02*x499))+((r00*x500))+x510+((r01*x497)));
evalcond[1]=(((r20*x500))+(((-1.0)*r22*x499))+x508+((r21*x497))+(((-1.0)*x507)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*pz))+(((0.54)*x507))+(((-0.54)*x508))+(((0.15)*x496))+(((-1.0)*r20*x498)));
evalcond[3]=((((-1.0)*r00*x498))+(((0.15)*x503))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x505))+(((-0.54)*x504)));
evalcond[4]=(((r20*x506))+((r20*x502))+((r21*x509))+((r22*x495))+(((-1.0)*x496*x501))+x510);
evalcond[5]=(((r02*x495))+(((-1.0)*x501*x503))+((r01*x509))+((r00*x506))+((r00*x502))+x507+(((-1.0)*x508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x511=((1.0)*sj5);
IkReal x512=((1.0)*cj5);
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x512)))),IkReal(((((-1.0)*cj4*r20*x511))+(((-1.0)*cj4*r21*x512))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
CheckValue<IkReal> x514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj4*x512))+(((-1.0)*r00*sj4*x511))+((cj4*r02)))),-1);
if(!x514.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x513.value)+(((1.5707963267949)*(x514.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x515=IKsin(j3);
IkReal x516=IKcos(j3);
IkReal x517=(cj4*r10);
IkReal x518=(cj4*r11);
IkReal x519=(cj5*x515);
IkReal x520=(sj5*x515);
IkReal x521=(sj4*x515);
IkReal x522=(sj5*x516);
IkReal x523=((1.0)*cj5*x516);
evalcond[0]=(((r21*x522))+((r22*x521))+(((-1.0)*r20*x523))+((cj4*r20*x520))+((cj4*r21*x519)));
evalcond[1]=(((r02*x521))+(((-1.0)*r00*x523))+((cj4*r00*x520))+((cj4*r01*x519))+((r01*x522)));
evalcond[2]=(((x517*x522))+(((-1.0)*r11*x520))+((r10*x519))+((r12*sj4*x516))+((cj5*x516*x518)));
evalcond[3]=((-1.0)+((r11*x522))+(((-1.0)*r10*x523))+((r12*x521))+((x517*x520))+((x518*x519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x524=((0.76056338028169)*sj4);
IkReal x525=((0.211267605633803)*sj5);
IkReal x526=((0.76056338028169)*cj4);
IkReal x527=((0.211267605633803)*cj5);
if( IKabs((((r00*sj5*x524))+(((-1.0)*r00*x527))+(((-1.0)*r02*x526))+(((-1.40845070422535)*px))+((cj5*r01*x524))+((r01*x525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x527))+(((-1.0)*r21*x525))+(((-1.0)*r20*sj5*x524))+((r22*x526))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5*x524))+(((-1.0)*r00*x527))+(((-1.0)*r02*x526))+(((-1.40845070422535)*px))+((cj5*r01*x524))+((r01*x525))))+IKsqr((((r20*x527))+(((-1.0)*r21*x525))+(((-1.0)*r20*sj5*x524))+((r22*x526))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj5*x524))+(((-1.0)*r00*x527))+(((-1.0)*r02*x526))+(((-1.40845070422535)*px))+((cj5*r01*x524))+((r01*x525))), (((r20*x527))+(((-1.0)*r21*x525))+(((-1.0)*r20*sj5*x524))+((r22*x526))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x524))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x528=((0.54)*sj5);
IkReal x529=((0.15)*sj5);
IkReal x530=((0.54)*cj5);
IkReal x531=(cj3*cj4);
IkReal x532=((0.15)*cj5);
IkReal x533=((0.54)*r02);
IkReal x534=(cj3*sj4);
IkReal x535=((0.54)*r22);
IkReal x536=(r20*x532);
IkReal x537=(r21*x529);
IkReal x538=((0.71)*(IKcos(j1)));
IkReal x539=(r01*x529);
IkReal x540=((0.71)*(IKsin(j1)));
IkReal x541=(r00*x532);
IkReal x542=(pz+x536);
IkReal x543=(x537+x538);
IkReal x544=(x540+x541);
evalcond[0]=(((cj4*x535))+(((-1.0)*x543))+x542+(((-1.0)*r21*sj4*x530))+(((-1.0)*r20*sj4*x528)));
evalcond[1]=(((cj4*x533))+(((-1.0)*r01*sj4*x530))+(((-1.0)*x539))+(((-1.0)*r00*sj4*x528))+px+x544);
evalcond[2]=(((r00*x528*x531))+((r01*x530*x531))+(((-1.0)*x543))+x542+((r00*sj3*x530))+((x533*x534))+(((-1.0)*r01*sj3*x528)));
evalcond[3]=(((r20*x528*x531))+((r21*x530*x531))+(((-1.0)*x544))+(((-1.0)*px))+x539+((x534*x535))+(((-1.0)*r21*sj3*x528))+((r20*sj3*x530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x545=(cj4*r22);
IkReal x546=((1.0)*cj1);
IkReal x547=(r20*sj5);
IkReal x548=(cj4*r02);
IkReal x549=(cj5*r21);
IkReal x550=(cj1*sj4);
IkReal x551=(cj5*r01);
IkReal x552=(r00*sj5);
IkReal x553=((1.0)*sj1*sj4);
if( IKabs((((sj1*x548))+(((-1.0)*x545*x546))+(((-1.0)*x551*x553))+((x547*x550))+(((-1.0)*x552*x553))+((x549*x550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x546*x552))+(((-1.0)*sj4*x546*x551))+((sj1*x545))+(((-1.0)*x547*x553))+((cj1*x548))+(((-1.0)*x549*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x548))+(((-1.0)*x545*x546))+(((-1.0)*x551*x553))+((x547*x550))+(((-1.0)*x552*x553))+((x549*x550))))+IKsqr(((((-1.0)*sj4*x546*x552))+(((-1.0)*sj4*x546*x551))+((sj1*x545))+(((-1.0)*x547*x553))+((cj1*x548))+(((-1.0)*x549*x553))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x548))+(((-1.0)*x545*x546))+(((-1.0)*x551*x553))+((x547*x550))+(((-1.0)*x552*x553))+((x549*x550))), ((((-1.0)*sj4*x546*x552))+(((-1.0)*sj4*x546*x551))+((sj1*x545))+(((-1.0)*x547*x553))+((cj1*x548))+(((-1.0)*x549*x553))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x554=IKcos(j2);
IkReal x555=IKsin(j2);
IkReal x556=(cj3*sj4);
IkReal x557=(r21*sj5);
IkReal x558=(cj5*sj4);
IkReal x559=((0.15)*cj5);
IkReal x560=((1.0)*cj4);
IkReal x561=(sj4*sj5);
IkReal x562=((1.0)*sj3);
IkReal x563=(cj5*sj3);
IkReal x564=(r01*sj5);
IkReal x565=(cj1*x554);
IkReal x566=(sj1*x555);
IkReal x567=(cj3*cj4*sj5);
IkReal x568=(cj1*x555);
IkReal x569=(sj1*x554);
IkReal x570=(cj3*cj4*cj5);
IkReal x571=(x566+x565);
evalcond[0]=(((r00*x561))+x571+((r01*x558))+(((-1.0)*r02*x560)));
evalcond[1]=(x569+(((-1.0)*x568))+(((-1.0)*r22*x560))+((r20*x561))+((r21*x558)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x559))+(((-0.54)*x569))+(((-1.0)*pz))+(((0.15)*x557))+(((0.54)*x568)));
evalcond[3]=((((0.15)*x564))+(((-1.0)*r00*x559))+(((-0.54)*x566))+(((-0.54)*x565))+(((-0.71)*sj1))+(((-1.0)*px)));
evalcond[4]=((((-1.0)*x557*x562))+x571+((r22*x556))+((r20*x563))+((r20*x567))+((r21*x570)));
evalcond[5]=(((r01*x570))+((r02*x556))+((r00*x563))+((r00*x567))+(((-1.0)*x562*x564))+x568+(((-1.0)*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x572=((1.0)*cj4);
CheckValue<IkReal> x573 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*r00*sj5*x572))+(((-1.0)*cj5*r01*x572))+(((-1.0)*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x572)))),-1);
if(!x574.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x573.value)+(((1.5707963267949)*(x574.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x575=IKsin(j3);
IkReal x576=IKcos(j3);
IkReal x577=(cj4*r10);
IkReal x578=(cj4*r11);
IkReal x579=(cj5*x575);
IkReal x580=(sj5*x575);
IkReal x581=(sj4*x575);
IkReal x582=(sj5*x576);
IkReal x583=((1.0)*cj5*x576);
evalcond[0]=(((cj4*r20*x580))+(((-1.0)*r20*x583))+((r22*x581))+((r21*x582))+((cj4*r21*x579)));
evalcond[1]=(((r02*x581))+((r01*x582))+((cj4*r01*x579))+(((-1.0)*r00*x583))+((cj4*r00*x580)));
evalcond[2]=(((r12*sj4*x576))+((x577*x582))+((r10*x579))+(((-1.0)*r11*x580))+((cj5*x576*x578)));
evalcond[3]=((-1.0)+((r11*x582))+((x577*x580))+((r12*x581))+((x578*x579))+(((-1.0)*r10*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x584=((0.76056338028169)*sj4);
IkReal x585=((0.211267605633803)*sj5);
IkReal x586=((0.76056338028169)*cj4);
IkReal x587=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r02*x586))+((r00*sj5*x584))+(((-1.40845070422535)*px))+((r01*x585))+((cj5*r01*x584))+(((-1.0)*r00*x587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x587))+(((-1.0)*r21*x585))+(((1.40845070422535)*pz))+((r22*x586))+(((-1.0)*cj5*r21*x584))+(((-1.0)*r20*sj5*x584)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x586))+((r00*sj5*x584))+(((-1.40845070422535)*px))+((r01*x585))+((cj5*r01*x584))+(((-1.0)*r00*x587))))+IKsqr((((r20*x587))+(((-1.0)*r21*x585))+(((1.40845070422535)*pz))+((r22*x586))+(((-1.0)*cj5*r21*x584))+(((-1.0)*r20*sj5*x584))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x586))+((r00*sj5*x584))+(((-1.40845070422535)*px))+((r01*x585))+((cj5*r01*x584))+(((-1.0)*r00*x587))), (((r20*x587))+(((-1.0)*r21*x585))+(((1.40845070422535)*pz))+((r22*x586))+(((-1.0)*cj5*r21*x584))+(((-1.0)*r20*sj5*x584))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x588=((0.54)*sj5);
IkReal x589=((0.15)*sj5);
IkReal x590=((0.54)*cj5);
IkReal x591=(cj3*cj4);
IkReal x592=((0.15)*cj5);
IkReal x593=((0.54)*r02);
IkReal x594=(cj3*sj4);
IkReal x595=((0.54)*r22);
IkReal x596=(r20*x592);
IkReal x597=(r21*x589);
IkReal x598=((0.71)*(IKcos(j1)));
IkReal x599=(r01*x589);
IkReal x600=((0.71)*(IKsin(j1)));
IkReal x601=(r00*x592);
IkReal x602=(pz+x596);
IkReal x603=(x597+x598);
IkReal x604=(x601+x600);
evalcond[0]=((((-1.0)*r20*sj4*x588))+(((-1.0)*r21*sj4*x590))+x602+(((-1.0)*x603))+((cj4*x595)));
evalcond[1]=((((-1.0)*r00*sj4*x588))+(((-1.0)*x599))+px+(((-1.0)*r01*sj4*x590))+x604+((cj4*x593)));
evalcond[2]=(((r01*x590*x591))+((r00*x588*x591))+x602+(((-1.0)*r01*sj3*x588))+(((-1.0)*x603))+((x593*x594))+((r00*sj3*x590)));
evalcond[3]=(((r20*sj3*x590))+((x594*x595))+((r21*x590*x591))+(((-1.0)*r21*sj3*x588))+((r20*x588*x591))+(((-1.0)*px))+x599+(((-1.0)*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x605=(cj4*r22);
IkReal x606=((1.0)*cj1);
IkReal x607=(r20*sj5);
IkReal x608=(cj4*r02);
IkReal x609=(cj5*r21);
IkReal x610=(cj1*sj4);
IkReal x611=(cj5*r01);
IkReal x612=(r00*sj5);
IkReal x613=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x612*x613))+((sj1*x608))+(((-1.0)*x611*x613))+(((-1.0)*x605*x606))+((x607*x610))+((x609*x610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x605))+(((-1.0)*x609*x613))+(((-1.0)*sj4*x606*x611))+(((-1.0)*sj4*x606*x612))+(((-1.0)*x607*x613))+((cj1*x608)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x612*x613))+((sj1*x608))+(((-1.0)*x611*x613))+(((-1.0)*x605*x606))+((x607*x610))+((x609*x610))))+IKsqr((((sj1*x605))+(((-1.0)*x609*x613))+(((-1.0)*sj4*x606*x611))+(((-1.0)*sj4*x606*x612))+(((-1.0)*x607*x613))+((cj1*x608))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x612*x613))+((sj1*x608))+(((-1.0)*x611*x613))+(((-1.0)*x605*x606))+((x607*x610))+((x609*x610))), (((sj1*x605))+(((-1.0)*x609*x613))+(((-1.0)*sj4*x606*x611))+(((-1.0)*sj4*x606*x612))+(((-1.0)*x607*x613))+((cj1*x608))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x614=IKcos(j2);
IkReal x615=IKsin(j2);
IkReal x616=(cj3*sj4);
IkReal x617=(r21*sj5);
IkReal x618=(cj5*sj4);
IkReal x619=((0.15)*cj5);
IkReal x620=((1.0)*cj4);
IkReal x621=(sj4*sj5);
IkReal x622=((1.0)*sj3);
IkReal x623=(cj5*sj3);
IkReal x624=(r01*sj5);
IkReal x625=(cj1*x614);
IkReal x626=(sj1*x615);
IkReal x627=(cj3*cj4*sj5);
IkReal x628=(cj1*x615);
IkReal x629=(sj1*x614);
IkReal x630=(cj3*cj4*cj5);
IkReal x631=(x625+x626);
evalcond[0]=(((r01*x618))+(((-1.0)*r02*x620))+((r00*x621))+x631);
evalcond[1]=(((r21*x618))+x629+(((-1.0)*x628))+((r20*x621))+(((-1.0)*r22*x620)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x617))+(((-1.0)*r20*x619))+(((-1.0)*pz))+(((-0.54)*x629))+(((0.54)*x628)));
evalcond[3]=((((-1.0)*r00*x619))+(((0.15)*x624))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x625))+(((-0.54)*x626)));
evalcond[4]=(((r21*x630))+(((-1.0)*x617*x622))+x631+((r22*x616))+((r20*x627))+((r20*x623)));
evalcond[5]=((((-1.0)*x622*x624))+((r01*x630))+((r02*x616))+((r00*x623))+((r00*x627))+x628+(((-1.0)*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x632=((1.0)*r20);
IkReal x633=((1.0)*cj4);
IkReal x634=(((cj5*r11*sj4))+(((-1.0)*r12*x633))+((r10*sj4*sj5)));
j3eval[0]=x634;
j3eval[1]=IKsign(x634);
j3eval[2]=((IKabs(((((-1.0)*cj5*r21*x633))+(((-1.0)*cj4*sj5*x632))+(((-1.0)*r22*sj4)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x632))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x635=((1.0)*cj5);
IkReal x636=((1.0)*sj4);
IkReal x637=(((cj4*r22))+(((-1.0)*r20*sj5*x636))+(((-1.0)*r21*sj4*x635)));
j3eval[0]=x637;
j3eval[1]=IKsign(x637);
j3eval[2]=((IKabs(((((-1.0)*r12*x636))+(((-1.0)*cj4*r10*sj5))+(((-1.0)*cj4*r11*x635)))))+(IKabs((((r11*sj5))+(((-1.0)*r10*x635))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x638=cj4*cj4;
IkReal x639=r00*r00;
IkReal x640=cj5*cj5;
IkReal x641=r01*r01;
IkReal x642=r02*r02;
IkReal x643=(r00*sj5);
IkReal x644=((2.0)*cj5*r01);
IkReal x645=(cj4*r02*sj4);
IkReal x646=((1.0)*x640);
IkReal x647=(x638*x639);
IkReal x648=(((x644*x645))+(((2.0)*x643*x645))+((x639*x640))+(((-1.0)*x641*x646))+(((-1.0)*x646*x647))+((x638*x643*x644))+((x638*x640*x641))+(((-1.0)*x643*x644))+x647+x642+x641+(((-1.0)*x638*x642)));
j3eval[0]=x648;
j3eval[1]=IKsign(x648);
j3eval[2]=((IKabs((((cj4*x643))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x649=cj4*cj4;
IkReal x650=r00*r00;
IkReal x651=cj5*cj5;
IkReal x652=r01*r01;
IkReal x653=r02*r02;
IkReal x654=(r00*sj5);
IkReal x655=((2.0)*cj5*r01);
IkReal x656=(cj4*r02*sj4);
IkReal x657=((1.0)*x651);
IkReal x658=(x649*x650);
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal((((cj4*x654))+((r02*sj4))+((cj4*cj5*r01)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660=IKPowWithIntegerCheck(IKsign(((((2.0)*x654*x656))+(((-1.0)*x657*x658))+((x649*x651*x652))+((x649*x654*x655))+x652+x653+x658+((x655*x656))+(((-1.0)*x649*x653))+((x650*x651))+(((-1.0)*x652*x657))+(((-1.0)*x654*x655)))),-1);
if(!x660.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x659.value)+(((1.5707963267949)*(x660.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x661=IKsin(j3);
IkReal x662=IKcos(j3);
IkReal x663=(cj4*r00);
IkReal x664=(sj5*x661);
IkReal x665=(sj4*x661);
IkReal x666=(sj5*x662);
IkReal x667=(cj4*cj5*x661);
IkReal x668=((1.0)*cj5*x662);
evalcond[0]=((((-1.0)*r20*x668))+((r21*x666))+((r21*x667))+((cj4*r20*x664))+((r22*x665)));
evalcond[1]=((((-1.0)*r10*x668))+((r11*x667))+((r11*x666))+((cj4*r10*x664))+((r12*x665)));
evalcond[2]=(((cj4*cj5*r01*x662))+((x663*x666))+((cj5*r00*x661))+(((-1.0)*r01*x664))+((r02*sj4*x662)));
evalcond[3]=((-1.0)+((r01*x667))+((r01*x666))+(((-1.0)*r00*x668))+((x663*x664))+((r02*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x669=((0.76056338028169)*sj4);
IkReal x670=((0.211267605633803)*sj5);
IkReal x671=((0.76056338028169)*cj4);
IkReal x672=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*cj5*r11*x669))+((r10*x672))+((r12*x671))+(((1.40845070422535)*py))+(((-1.0)*r11*x670))+(((-1.0)*r10*sj5*x669)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x670))+((r22*x671))+((r20*x672))+(((-1.0)*r20*sj5*x669))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x669)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r11*x669))+((r10*x672))+((r12*x671))+(((1.40845070422535)*py))+(((-1.0)*r11*x670))+(((-1.0)*r10*sj5*x669))))+IKsqr(((((-1.0)*r21*x670))+((r22*x671))+((r20*x672))+(((-1.0)*r20*sj5*x669))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x669))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r11*x669))+((r10*x672))+((r12*x671))+(((1.40845070422535)*py))+(((-1.0)*r11*x670))+(((-1.0)*r10*sj5*x669))), ((((-1.0)*r21*x670))+((r22*x671))+((r20*x672))+(((-1.0)*r20*sj5*x669))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x669))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x673=((1.0)*py);
IkReal x674=((0.54)*sj5);
IkReal x675=((0.15)*sj5);
IkReal x676=(cj5*r10);
IkReal x677=((0.54)*cj5);
IkReal x678=(cj3*cj4);
IkReal x679=((0.54)*r12);
IkReal x680=(cj3*sj4);
IkReal x681=((0.54)*r22);
IkReal x682=((0.71)*(IKsin(j1)));
IkReal x683=(r11*x675);
IkReal x684=((0.15)*x676);
IkReal x685=(r21*x675);
IkReal x686=((0.71)*(IKcos(j1)));
IkReal x687=((0.15)*cj5*r20);
IkReal x688=(x673+x684);
IkReal x689=(x686+x685);
IkReal x690=(x683+x682);
evalcond[0]=(((cj4*x681))+(((-1.0)*x689))+pz+(((-1.0)*r20*sj4*x674))+x687+(((-1.0)*r21*sj4*x677)));
evalcond[1]=(((r10*sj4*x674))+(((-1.0)*x688))+(((-1.0)*cj4*x679))+((r11*sj4*x677))+x690);
evalcond[2]=((((-1.0)*x680*x681))+(((-1.0)*x688))+(((-1.0)*r20*sj3*x677))+((r21*sj3*x674))+(((-1.0)*r21*x677*x678))+x690+(((-1.0)*r20*x674*x678)));
evalcond[3]=((((-1.0)*r11*sj3*x674))+(((-1.0)*x687))+(((0.54)*sj3*x676))+(((-1.0)*pz))+((x679*x680))+((r11*x677*x678))+x689+((r10*x674*x678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x691=((1.0)*cj4);
IkReal x692=(r20*sj5);
IkReal x693=((1.0)*sj1*sj4);
IkReal x694=(cj1*cj5*sj4);
IkReal x695=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((sj1*x695))+(((-1.0)*cj1*r22*x691))+(((-1.0)*r12*sj1*x691))+((cj1*sj4*x692))+((r21*x694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x695))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x693))+(((-1.0)*x692*x693))+((r11*x694))+(((-1.0)*cj1*r12*x691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((sj1*x695))+(((-1.0)*cj1*r22*x691))+(((-1.0)*r12*sj1*x691))+((cj1*sj4*x692))+((r21*x694))))+IKsqr((((cj1*x695))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x693))+(((-1.0)*x692*x693))+((r11*x694))+(((-1.0)*cj1*r12*x691))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((sj1*x695))+(((-1.0)*cj1*r22*x691))+(((-1.0)*r12*sj1*x691))+((cj1*sj4*x692))+((r21*x694))), (((cj1*x695))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x693))+(((-1.0)*x692*x693))+((r11*x694))+(((-1.0)*cj1*r12*x691))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x696=IKsin(j2);
IkReal x697=IKcos(j2);
IkReal x698=((0.15)*sj5);
IkReal x699=((0.15)*cj5);
IkReal x700=(cj5*sj4);
IkReal x701=(cj3*cj4);
IkReal x702=(r20*sj5);
IkReal x703=(cj3*sj4);
IkReal x704=(r10*sj5);
IkReal x705=((1.0)*cj4);
IkReal x706=(cj5*sj3);
IkReal x707=(sj1*x697);
IkReal x708=(cj1*x697);
IkReal x709=((0.54)*x696);
IkReal x710=((1.0)*sj3*sj5);
IkReal x711=(sj1*x696);
IkReal x712=((1.0)*cj1*x696);
evalcond[0]=((((-1.0)*x712))+((r21*x700))+x707+(((-1.0)*r22*x705))+((sj4*x702)));
evalcond[1]=((((-1.0)*r12*x705))+(((-1.0)*x711))+(((-1.0)*x708))+((r11*x700))+((sj4*x704)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x707))+(((-1.0)*pz))+(((-1.0)*r20*x699))+((r21*x698))+((cj1*x709)));
evalcond[3]=((((-1.0)*py))+(((0.54)*x708))+(((-1.0)*r10*x699))+((r11*x698))+((sj1*x709))+(((0.71)*sj1)));
evalcond[4]=(((r22*x703))+((cj5*r21*x701))+((x701*x702))+(((-1.0)*r21*x710))+((r20*x706))+x711+x708);
evalcond[5]=((((-1.0)*r11*x710))+((x701*x704))+((cj5*r11*x701))+(((-1.0)*x712))+x707+((r12*x703))+((r10*x706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x713=((1.0)*cj5);
IkReal x714=((1.0)*sj4);
CheckValue<IkReal> x715=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r21*sj4*x713))+(((-1.0)*r20*sj5*x714)))),-1);
if(!x715.valid){
continue;
}
CheckValue<IkReal> x716 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x713)))),IkReal(((((-1.0)*r12*x714))+(((-1.0)*cj4*r11*x713))+(((-1.0)*cj4*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x716.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x715.value)))+(x716.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x717=IKsin(j3);
IkReal x718=IKcos(j3);
IkReal x719=(cj4*r00);
IkReal x720=(sj5*x717);
IkReal x721=(sj4*x717);
IkReal x722=(sj5*x718);
IkReal x723=(cj4*cj5*x717);
IkReal x724=((1.0)*cj5*x718);
evalcond[0]=((((-1.0)*r20*x724))+((cj4*r20*x720))+((r21*x722))+((r21*x723))+((r22*x721)));
evalcond[1]=(((cj4*r10*x720))+(((-1.0)*r10*x724))+((r11*x723))+((r11*x722))+((r12*x721)));
evalcond[2]=((((-1.0)*r01*x720))+((r02*sj4*x718))+((x719*x722))+((cj4*cj5*r01*x718))+((cj5*r00*x717)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x724))+((r01*x722))+((r01*x723))+((r02*x721))+((x719*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x725=((0.76056338028169)*sj4);
IkReal x726=((0.211267605633803)*sj5);
IkReal x727=((0.76056338028169)*cj4);
IkReal x728=((0.211267605633803)*cj5);
if( IKabs((((r10*x728))+(((-1.0)*cj5*r11*x725))+(((-1.0)*r10*sj5*x725))+(((1.40845070422535)*py))+(((-1.0)*r11*x726))+((r12*x727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x725))+((r20*x728))+(((-1.0)*cj5*r21*x725))+(((1.40845070422535)*pz))+(((-1.0)*r21*x726))+((r22*x727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x728))+(((-1.0)*cj5*r11*x725))+(((-1.0)*r10*sj5*x725))+(((1.40845070422535)*py))+(((-1.0)*r11*x726))+((r12*x727))))+IKsqr(((((-1.0)*r20*sj5*x725))+((r20*x728))+(((-1.0)*cj5*r21*x725))+(((1.40845070422535)*pz))+(((-1.0)*r21*x726))+((r22*x727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x728))+(((-1.0)*cj5*r11*x725))+(((-1.0)*r10*sj5*x725))+(((1.40845070422535)*py))+(((-1.0)*r11*x726))+((r12*x727))), ((((-1.0)*r20*sj5*x725))+((r20*x728))+(((-1.0)*cj5*r21*x725))+(((1.40845070422535)*pz))+(((-1.0)*r21*x726))+((r22*x727))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x729=((1.0)*py);
IkReal x730=((0.54)*sj5);
IkReal x731=((0.15)*sj5);
IkReal x732=(cj5*r10);
IkReal x733=((0.54)*cj5);
IkReal x734=(cj3*cj4);
IkReal x735=((0.54)*r12);
IkReal x736=(cj3*sj4);
IkReal x737=((0.54)*r22);
IkReal x738=((0.71)*(IKsin(j1)));
IkReal x739=(r11*x731);
IkReal x740=((0.15)*x732);
IkReal x741=(r21*x731);
IkReal x742=((0.71)*(IKcos(j1)));
IkReal x743=((0.15)*cj5*r20);
IkReal x744=(x729+x740);
IkReal x745=(x742+x741);
IkReal x746=(x739+x738);
evalcond[0]=((((-1.0)*r21*sj4*x733))+((cj4*x737))+(((-1.0)*r20*sj4*x730))+pz+x743+(((-1.0)*x745)));
evalcond[1]=(((r10*sj4*x730))+((r11*sj4*x733))+(((-1.0)*cj4*x735))+x746+(((-1.0)*x744)));
evalcond[2]=((((-1.0)*x736*x737))+(((-1.0)*r20*x730*x734))+((r21*sj3*x730))+(((-1.0)*r21*x733*x734))+x746+(((-1.0)*x744))+(((-1.0)*r20*sj3*x733)));
evalcond[3]=((((0.54)*sj3*x732))+((r11*x733*x734))+((x735*x736))+(((-1.0)*pz))+(((-1.0)*r11*sj3*x730))+((r10*x730*x734))+x745+(((-1.0)*x743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x747=((1.0)*cj4);
IkReal x748=(r20*sj5);
IkReal x749=((1.0)*sj1*sj4);
IkReal x750=(cj1*cj5*sj4);
IkReal x751=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x747))+((r21*x750))+((cj1*sj4*x748))+((sj1*x751))+(((-1.0)*cj1*r22*x747)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x747))+((cj1*x751))+((cj4*r22*sj1))+((r11*x750))+(((-1.0)*cj5*r21*x749))+(((-1.0)*x748*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x747))+((r21*x750))+((cj1*sj4*x748))+((sj1*x751))+(((-1.0)*cj1*r22*x747))))+IKsqr(((((-1.0)*cj1*r12*x747))+((cj1*x751))+((cj4*r22*sj1))+((r11*x750))+(((-1.0)*cj5*r21*x749))+(((-1.0)*x748*x749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x747))+((r21*x750))+((cj1*sj4*x748))+((sj1*x751))+(((-1.0)*cj1*r22*x747))), ((((-1.0)*cj1*r12*x747))+((cj1*x751))+((cj4*r22*sj1))+((r11*x750))+(((-1.0)*cj5*r21*x749))+(((-1.0)*x748*x749))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x752=IKsin(j2);
IkReal x753=IKcos(j2);
IkReal x754=((0.15)*sj5);
IkReal x755=((0.15)*cj5);
IkReal x756=(cj5*sj4);
IkReal x757=(cj3*cj4);
IkReal x758=(r20*sj5);
IkReal x759=(cj3*sj4);
IkReal x760=(r10*sj5);
IkReal x761=((1.0)*cj4);
IkReal x762=(cj5*sj3);
IkReal x763=(sj1*x753);
IkReal x764=(cj1*x753);
IkReal x765=((0.54)*x752);
IkReal x766=((1.0)*sj3*sj5);
IkReal x767=(sj1*x752);
IkReal x768=((1.0)*cj1*x752);
evalcond[0]=(((sj4*x758))+(((-1.0)*x768))+((r21*x756))+x763+(((-1.0)*r22*x761)));
evalcond[1]=(((sj4*x760))+(((-1.0)*x767))+(((-1.0)*x764))+(((-1.0)*r12*x761))+((r11*x756)));
evalcond[2]=((((0.71)*cj1))+((cj1*x765))+((r21*x754))+(((-1.0)*pz))+(((-0.54)*x763))+(((-1.0)*r20*x755)));
evalcond[3]=(((sj1*x765))+(((-1.0)*r10*x755))+(((-1.0)*py))+((r11*x754))+(((0.71)*sj1))+(((0.54)*x764)));
evalcond[4]=(((r20*x762))+((r22*x759))+(((-1.0)*r21*x766))+x764+x767+((cj5*r21*x757))+((x757*x758)));
evalcond[5]=(((x757*x760))+((r10*x762))+(((-1.0)*x768))+((r12*x759))+(((-1.0)*r11*x766))+x763+((cj5*r11*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x769=((1.0)*r20);
IkReal x770=((1.0)*cj4);
CheckValue<IkReal> x771 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x769)))),IkReal(((((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x770))+(((-1.0)*cj4*sj5*x769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x771.valid){
continue;
}
CheckValue<IkReal> x772=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+(((-1.0)*r12*x770))+((r10*sj4*sj5)))),-1);
if(!x772.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x771.value)+(((1.5707963267949)*(x772.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x773=IKsin(j3);
IkReal x774=IKcos(j3);
IkReal x775=(cj4*r00);
IkReal x776=(sj5*x773);
IkReal x777=(sj4*x773);
IkReal x778=(sj5*x774);
IkReal x779=(cj4*cj5*x773);
IkReal x780=((1.0)*cj5*x774);
evalcond[0]=(((cj4*r20*x776))+((r22*x777))+(((-1.0)*r20*x780))+((r21*x779))+((r21*x778)));
evalcond[1]=(((r11*x778))+((r11*x779))+(((-1.0)*r10*x780))+((r12*x777))+((cj4*r10*x776)));
evalcond[2]=(((cj5*r00*x773))+((cj4*cj5*r01*x774))+((r02*sj4*x774))+(((-1.0)*r01*x776))+((x775*x778)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x780))+((r01*x779))+((r01*x778))+((r02*x777))+((x775*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x781=((0.76056338028169)*sj4);
IkReal x782=((0.211267605633803)*sj5);
IkReal x783=((0.76056338028169)*cj4);
IkReal x784=((0.211267605633803)*cj5);
if( IKabs((((r10*x784))+(((-1.0)*cj5*r11*x781))+(((-1.0)*r11*x782))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x781))+((r12*x783)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x784))+(((-1.0)*r20*sj5*x781))+((r22*x783))+(((-1.0)*r21*x782))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x781)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x784))+(((-1.0)*cj5*r11*x781))+(((-1.0)*r11*x782))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x781))+((r12*x783))))+IKsqr((((r20*x784))+(((-1.0)*r20*sj5*x781))+((r22*x783))+(((-1.0)*r21*x782))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x781))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x784))+(((-1.0)*cj5*r11*x781))+(((-1.0)*r11*x782))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x781))+((r12*x783))), (((r20*x784))+(((-1.0)*r20*sj5*x781))+((r22*x783))+(((-1.0)*r21*x782))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x781))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x785=((1.0)*py);
IkReal x786=((0.54)*sj5);
IkReal x787=((0.15)*sj5);
IkReal x788=(cj5*r10);
IkReal x789=((0.54)*cj5);
IkReal x790=(cj3*cj4);
IkReal x791=((0.54)*r12);
IkReal x792=(cj3*sj4);
IkReal x793=((0.54)*r22);
IkReal x794=((0.71)*(IKsin(j1)));
IkReal x795=(r11*x787);
IkReal x796=((0.15)*x788);
IkReal x797=(r21*x787);
IkReal x798=((0.71)*(IKcos(j1)));
IkReal x799=((0.15)*cj5*r20);
IkReal x800=(x796+x785);
IkReal x801=(x797+x798);
IkReal x802=(x795+x794);
evalcond[0]=((((-1.0)*r21*sj4*x789))+((cj4*x793))+pz+x799+(((-1.0)*r20*sj4*x786))+(((-1.0)*x801)));
evalcond[1]=(((r11*sj4*x789))+((r10*sj4*x786))+x802+(((-1.0)*x800))+(((-1.0)*cj4*x791)));
evalcond[2]=((((-1.0)*r20*sj3*x789))+(((-1.0)*r21*x789*x790))+(((-1.0)*x792*x793))+(((-1.0)*r20*x786*x790))+x802+(((-1.0)*x800))+((r21*sj3*x786)));
evalcond[3]=((((0.54)*sj3*x788))+(((-1.0)*x799))+((r11*x789*x790))+(((-1.0)*pz))+(((-1.0)*r11*sj3*x786))+((r10*x786*x790))+x801+((x791*x792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x803=((1.0)*cj4);
IkReal x804=(r20*sj5);
IkReal x805=((1.0)*sj1*sj4);
IkReal x806=(cj1*cj5*sj4);
IkReal x807=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((r21*x806))+(((-1.0)*r12*sj1*x803))+((cj1*sj4*x804))+(((-1.0)*cj1*r22*x803))+((sj1*x807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x804*x805))+((cj4*r22*sj1))+((cj1*x807))+((r11*x806))+(((-1.0)*cj5*r21*x805))+(((-1.0)*cj1*r12*x803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((r21*x806))+(((-1.0)*r12*sj1*x803))+((cj1*sj4*x804))+(((-1.0)*cj1*r22*x803))+((sj1*x807))))+IKsqr(((((-1.0)*x804*x805))+((cj4*r22*sj1))+((cj1*x807))+((r11*x806))+(((-1.0)*cj5*r21*x805))+(((-1.0)*cj1*r12*x803))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((r21*x806))+(((-1.0)*r12*sj1*x803))+((cj1*sj4*x804))+(((-1.0)*cj1*r22*x803))+((sj1*x807))), ((((-1.0)*x804*x805))+((cj4*r22*sj1))+((cj1*x807))+((r11*x806))+(((-1.0)*cj5*r21*x805))+(((-1.0)*cj1*r12*x803))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x808=IKsin(j2);
IkReal x809=IKcos(j2);
IkReal x810=((0.15)*sj5);
IkReal x811=((0.15)*cj5);
IkReal x812=(cj5*sj4);
IkReal x813=(cj3*cj4);
IkReal x814=(r20*sj5);
IkReal x815=(cj3*sj4);
IkReal x816=(r10*sj5);
IkReal x817=((1.0)*cj4);
IkReal x818=(cj5*sj3);
IkReal x819=(sj1*x809);
IkReal x820=(cj1*x809);
IkReal x821=((0.54)*x808);
IkReal x822=((1.0)*sj3*sj5);
IkReal x823=(sj1*x808);
IkReal x824=((1.0)*cj1*x808);
evalcond[0]=(((sj4*x814))+(((-1.0)*x824))+(((-1.0)*r22*x817))+x819+((r21*x812)));
evalcond[1]=(((r11*x812))+((sj4*x816))+(((-1.0)*r12*x817))+(((-1.0)*x820))+(((-1.0)*x823)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x819))+(((-1.0)*pz))+((r21*x810))+((cj1*x821))+(((-1.0)*r20*x811)));
evalcond[3]=(((r11*x810))+((sj1*x821))+(((-1.0)*py))+(((-1.0)*r10*x811))+(((0.71)*sj1))+(((0.54)*x820)));
evalcond[4]=((((-1.0)*r21*x822))+((r20*x818))+((x813*x814))+x823+x820+((cj5*r21*x813))+((r22*x815)));
evalcond[5]=((((-1.0)*r11*x822))+((cj5*r11*x813))+(((-1.0)*x824))+((r10*x818))+((x813*x816))+x819+((r12*x815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x825=((1.0)*r10);
IkReal x826=((1.0)*cj4);
IkReal x827=(((cj5*r21*sj4))+(((-1.0)*r22*x826))+((r20*sj4*sj5)));
j3eval[0]=x827;
j3eval[1]=IKsign(x827);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11*x826))+(((-1.0)*cj4*sj5*x825))+(((-1.0)*r12*sj4)))))+(IKabs((((r11*sj5))+(((-1.0)*cj5*x825))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x828=((1.0)*sj5);
IkReal x829=((1.0)*cj5);
IkReal x830=((((-1.0)*r10*sj4*x828))+((cj4*r12))+(((-1.0)*r11*sj4*x829)));
j3eval[0]=x830;
j3eval[1]=IKsign(x830);
j3eval[2]=((IKabs(((((-1.0)*r20*x829))+((r21*sj5)))))+(IKabs(((((-1.0)*cj4*r20*x828))+(((-1.0)*cj4*r21*x829))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x831=cj5*cj5;
IkReal x832=cj4*cj4;
IkReal x833=r00*r00;
IkReal x834=r01*r01;
IkReal x835=r02*r02;
IkReal x836=(r00*sj5);
IkReal x837=((2.0)*cj5*r01);
IkReal x838=(cj4*r02*sj4);
IkReal x839=((1.0)*x832);
IkReal x840=(x831*x833);
IkReal x841=(x831*x834);
IkReal x842=(((x832*x835))+(((-1.0)*x833*x839))+((x832*x840))+(((-1.0)*x837*x838))+(((-1.0)*x832*x836*x837))+((x836*x837))+(((-2.0)*x836*x838))+(((-1.0)*x835))+(((-1.0)*x834))+(((-1.0)*x840))+(((-1.0)*x839*x841))+x841);
j3eval[0]=x842;
j3eval[1]=IKsign(x842);
j3eval[2]=((IKabs((((r02*sj4))+((cj4*x836))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x843=cj5*cj5;
IkReal x844=cj4*cj4;
IkReal x845=r00*r00;
IkReal x846=r01*r01;
IkReal x847=r02*r02;
IkReal x848=(r00*sj5);
IkReal x849=((2.0)*cj5*r01);
IkReal x850=(cj4*r02*sj4);
IkReal x851=((1.0)*x844);
IkReal x852=(x843*x845);
IkReal x853=(x843*x846);
CheckValue<IkReal> x854=IKPowWithIntegerCheck(IKsign(((((-1.0)*x852))+(((-1.0)*x845*x851))+(((-1.0)*x849*x850))+(((-2.0)*x848*x850))+((x848*x849))+((x844*x852))+(((-1.0)*x846))+(((-1.0)*x847))+x853+(((-1.0)*x851*x853))+((x844*x847))+(((-1.0)*x844*x848*x849)))),-1);
if(!x854.valid){
continue;
}
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal((((cj4*x848))+((r02*sj4))+((cj4*cj5*r01)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x854.value)))+(x855.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x856=IKsin(j3);
IkReal x857=IKcos(j3);
IkReal x858=(cj4*r00);
IkReal x859=(sj5*x856);
IkReal x860=(sj4*x856);
IkReal x861=(sj5*x857);
IkReal x862=(cj4*cj5*x856);
IkReal x863=((1.0)*cj5*x857);
evalcond[0]=(((r21*x861))+((r21*x862))+((r22*x860))+((cj4*r20*x859))+(((-1.0)*r20*x863)));
evalcond[1]=((((-1.0)*r10*x863))+((r11*x862))+((r11*x861))+((r12*x860))+((cj4*r10*x859)));
evalcond[2]=(((cj5*r00*x856))+(((-1.0)*r01*x859))+((x858*x861))+((cj4*cj5*r01*x857))+((r02*sj4*x857)));
evalcond[3]=((1.0)+((r01*x862))+((r01*x861))+(((-1.0)*r00*x863))+((x858*x859))+((r02*x860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x864=((0.76056338028169)*sj4);
IkReal x865=((0.211267605633803)*sj5);
IkReal x866=((0.76056338028169)*cj4);
IkReal x867=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*x867))+((cj5*r11*x864))+((r11*x865))+((r10*sj5*x864))+(((-1.40845070422535)*py))+(((-1.0)*r12*x866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x864))+((r22*x866))+(((-1.0)*cj5*r21*x864))+(((1.40845070422535)*pz))+(((-1.0)*r21*x865))+((r20*x867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x867))+((cj5*r11*x864))+((r11*x865))+((r10*sj5*x864))+(((-1.40845070422535)*py))+(((-1.0)*r12*x866))))+IKsqr(((((-1.0)*r20*sj5*x864))+((r22*x866))+(((-1.0)*cj5*r21*x864))+(((1.40845070422535)*pz))+(((-1.0)*r21*x865))+((r20*x867))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x867))+((cj5*r11*x864))+((r11*x865))+((r10*sj5*x864))+(((-1.40845070422535)*py))+(((-1.0)*r12*x866))), ((((-1.0)*r20*sj5*x864))+((r22*x866))+(((-1.0)*cj5*r21*x864))+(((1.40845070422535)*pz))+(((-1.0)*r21*x865))+((r20*x867))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x868=(r21*sj5);
IkReal x869=((0.54)*sj3);
IkReal x870=(cj5*r10);
IkReal x871=((0.54)*sj4);
IkReal x872=(cj5*r11);
IkReal x873=(r20*sj5);
IkReal x874=(cj5*r20);
IkReal x875=(cj5*r21);
IkReal x876=((0.54)*cj4);
IkReal x877=(r11*sj5);
IkReal x878=(r10*sj5);
IkReal x879=((0.15)*x874);
IkReal x880=((0.15)*x868);
IkReal x881=((0.71)*(IKcos(j1)));
IkReal x882=((0.15)*x877);
IkReal x883=((0.71)*(IKsin(j1)));
IkReal x884=((0.15)*x870);
IkReal x885=(pz+x879);
IkReal x886=(x881+x880);
IkReal x887=(x884+x883);
evalcond[0]=((((-1.0)*x871*x875))+(((-1.0)*x871*x873))+((r22*x876))+(((-1.0)*x886))+x885);
evalcond[1]=((((-1.0)*x871*x878))+(((-1.0)*x871*x872))+((r12*x876))+(((-1.0)*x882))+py+x887);
evalcond[2]=(((cj3*x872*x876))+(((-1.0)*x869*x877))+(((-1.0)*x886))+((x869*x870))+((cj3*r12*x871))+x885+((cj3*x876*x878)));
evalcond[3]=((((-1.0)*x868*x869))+(((-1.0)*x887))+((cj3*x875*x876))+(((-1.0)*py))+((cj3*x873*x876))+((x869*x874))+((cj3*r22*x871))+x882);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x888=(cj1*cj4);
IkReal x889=(r20*sj5);
IkReal x890=(cj4*sj1);
IkReal x891=(cj5*r21);
IkReal x892=(cj1*sj4);
IkReal x893=(cj5*r11);
IkReal x894=(r10*sj5);
IkReal x895=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x894*x895))+((x889*x892))+(((-1.0)*x893*x895))+(((-1.0)*r22*x888))+((x891*x892))+((r12*x890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x889*x895))+(((-1.0)*x892*x894))+(((-1.0)*x892*x893))+((r22*x890))+(((-1.0)*x891*x895))+((r12*x888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x894*x895))+((x889*x892))+(((-1.0)*x893*x895))+(((-1.0)*r22*x888))+((x891*x892))+((r12*x890))))+IKsqr(((((-1.0)*x889*x895))+(((-1.0)*x892*x894))+(((-1.0)*x892*x893))+((r22*x890))+(((-1.0)*x891*x895))+((r12*x888))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x894*x895))+((x889*x892))+(((-1.0)*x893*x895))+(((-1.0)*r22*x888))+((x891*x892))+((r12*x890))), ((((-1.0)*x889*x895))+(((-1.0)*x892*x894))+(((-1.0)*x892*x893))+((r22*x890))+(((-1.0)*x891*x895))+((r12*x888))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x896=IKcos(j2);
IkReal x897=IKsin(j2);
IkReal x898=((0.15)*sj5);
IkReal x899=((0.15)*cj5);
IkReal x900=(r10*sj5);
IkReal x901=(cj5*sj4);
IkReal x902=(cj3*cj4);
IkReal x903=(r20*sj5);
IkReal x904=(cj3*sj4);
IkReal x905=((1.0)*cj4);
IkReal x906=(cj5*sj3);
IkReal x907=(cj1*x896);
IkReal x908=(sj1*x897);
IkReal x909=(cj1*x897);
IkReal x910=(sj1*x896);
IkReal x911=((1.0)*sj3*sj5);
IkReal x912=(x907+x908);
evalcond[0]=(((r11*x901))+(((-1.0)*r12*x905))+((sj4*x900))+x912);
evalcond[1]=(((r21*x901))+(((-1.0)*r22*x905))+(((-1.0)*x909))+((sj4*x903))+x910);
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x910))+(((-1.0)*pz))+(((0.54)*x909))+((r21*x898))+(((-1.0)*r20*x899)));
evalcond[3]=(((r11*x898))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x899))+(((-0.54)*x908))+(((-0.54)*x907)));
evalcond[4]=(((cj5*r21*x902))+((r20*x906))+(((-1.0)*r21*x911))+((x902*x903))+((r22*x904))+x912);
evalcond[5]=(((x900*x902))+((r12*x904))+((r10*x906))+(((-1.0)*r11*x911))+(((-1.0)*x910))+((cj5*r11*x902))+x909);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x913=((1.0)*sj5);
IkReal x914=((1.0)*cj5);
CheckValue<IkReal> x915=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x913))+(((-1.0)*r11*sj4*x914))+((cj4*r12)))),-1);
if(!x915.valid){
continue;
}
CheckValue<IkReal> x916 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x914)))),IkReal(((((-1.0)*cj4*r21*x914))+(((-1.0)*cj4*r20*x913))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x916.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x915.value)))+(x916.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x917=IKsin(j3);
IkReal x918=IKcos(j3);
IkReal x919=(cj4*r00);
IkReal x920=(sj5*x917);
IkReal x921=(sj4*x917);
IkReal x922=(sj5*x918);
IkReal x923=(cj4*cj5*x917);
IkReal x924=((1.0)*cj5*x918);
evalcond[0]=(((cj4*r20*x920))+((r22*x921))+(((-1.0)*r20*x924))+((r21*x923))+((r21*x922)));
evalcond[1]=((((-1.0)*r10*x924))+((r11*x922))+((r11*x923))+((cj4*r10*x920))+((r12*x921)));
evalcond[2]=(((x919*x922))+((cj4*cj5*r01*x918))+((r02*sj4*x918))+(((-1.0)*r01*x920))+((cj5*r00*x917)));
evalcond[3]=((1.0)+((x919*x920))+((r01*x922))+((r01*x923))+(((-1.0)*r00*x924))+((r02*x921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x925=((0.76056338028169)*sj4);
IkReal x926=((0.211267605633803)*sj5);
IkReal x927=((0.76056338028169)*cj4);
IkReal x928=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*x928))+(((-1.0)*r12*x927))+((r10*sj5*x925))+((cj5*r11*x925))+(((-1.40845070422535)*py))+((r11*x926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x926))+((r22*x927))+(((-1.0)*cj5*r21*x925))+(((-1.0)*r20*sj5*x925))+(((1.40845070422535)*pz))+((r20*x928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x928))+(((-1.0)*r12*x927))+((r10*sj5*x925))+((cj5*r11*x925))+(((-1.40845070422535)*py))+((r11*x926))))+IKsqr(((((-1.0)*r21*x926))+((r22*x927))+(((-1.0)*cj5*r21*x925))+(((-1.0)*r20*sj5*x925))+(((1.40845070422535)*pz))+((r20*x928))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x928))+(((-1.0)*r12*x927))+((r10*sj5*x925))+((cj5*r11*x925))+(((-1.40845070422535)*py))+((r11*x926))), ((((-1.0)*r21*x926))+((r22*x927))+(((-1.0)*cj5*r21*x925))+(((-1.0)*r20*sj5*x925))+(((1.40845070422535)*pz))+((r20*x928))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x929=(r21*sj5);
IkReal x930=((0.54)*sj3);
IkReal x931=(cj5*r10);
IkReal x932=((0.54)*sj4);
IkReal x933=(cj5*r11);
IkReal x934=(r20*sj5);
IkReal x935=(cj5*r20);
IkReal x936=(cj5*r21);
IkReal x937=((0.54)*cj4);
IkReal x938=(r11*sj5);
IkReal x939=(r10*sj5);
IkReal x940=((0.15)*x935);
IkReal x941=((0.15)*x929);
IkReal x942=((0.71)*(IKcos(j1)));
IkReal x943=((0.15)*x938);
IkReal x944=((0.71)*(IKsin(j1)));
IkReal x945=((0.15)*x931);
IkReal x946=(pz+x940);
IkReal x947=(x941+x942);
IkReal x948=(x944+x945);
evalcond[0]=((((-1.0)*x947))+((r22*x937))+(((-1.0)*x932*x936))+(((-1.0)*x932*x934))+x946);
evalcond[1]=((((-1.0)*x943))+py+((r12*x937))+(((-1.0)*x932*x939))+(((-1.0)*x932*x933))+x948);
evalcond[2]=(((cj3*x937*x939))+(((-1.0)*x947))+(((-1.0)*x930*x938))+((cj3*r12*x932))+((x930*x931))+((cj3*x933*x937))+x946);
evalcond[3]=((((-1.0)*x948))+(((-1.0)*py))+((x930*x935))+(((-1.0)*x929*x930))+((cj3*x934*x937))+((cj3*r22*x932))+x943+((cj3*x936*x937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x949=(cj1*cj4);
IkReal x950=(r20*sj5);
IkReal x951=(cj4*sj1);
IkReal x952=(cj5*r21);
IkReal x953=(cj1*sj4);
IkReal x954=(cj5*r11);
IkReal x955=(r10*sj5);
IkReal x956=((1.0)*sj1*sj4);
if( IKabs((((x952*x953))+((r12*x951))+(((-1.0)*x954*x956))+(((-1.0)*x955*x956))+((x950*x953))+(((-1.0)*r22*x949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x951))+((r12*x949))+(((-1.0)*x950*x956))+(((-1.0)*x953*x954))+(((-1.0)*x953*x955))+(((-1.0)*x952*x956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x952*x953))+((r12*x951))+(((-1.0)*x954*x956))+(((-1.0)*x955*x956))+((x950*x953))+(((-1.0)*r22*x949))))+IKsqr((((r22*x951))+((r12*x949))+(((-1.0)*x950*x956))+(((-1.0)*x953*x954))+(((-1.0)*x953*x955))+(((-1.0)*x952*x956))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x952*x953))+((r12*x951))+(((-1.0)*x954*x956))+(((-1.0)*x955*x956))+((x950*x953))+(((-1.0)*r22*x949))), (((r22*x951))+((r12*x949))+(((-1.0)*x950*x956))+(((-1.0)*x953*x954))+(((-1.0)*x953*x955))+(((-1.0)*x952*x956))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x957=IKcos(j2);
IkReal x958=IKsin(j2);
IkReal x959=((0.15)*sj5);
IkReal x960=((0.15)*cj5);
IkReal x961=(r10*sj5);
IkReal x962=(cj5*sj4);
IkReal x963=(cj3*cj4);
IkReal x964=(r20*sj5);
IkReal x965=(cj3*sj4);
IkReal x966=((1.0)*cj4);
IkReal x967=(cj5*sj3);
IkReal x968=(cj1*x957);
IkReal x969=(sj1*x958);
IkReal x970=(cj1*x958);
IkReal x971=(sj1*x957);
IkReal x972=((1.0)*sj3*sj5);
IkReal x973=(x968+x969);
evalcond[0]=(((sj4*x961))+((r11*x962))+(((-1.0)*r12*x966))+x973);
evalcond[1]=((((-1.0)*x970))+((sj4*x964))+((r21*x962))+(((-1.0)*r22*x966))+x971);
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x971))+(((0.54)*x970))+(((-1.0)*r20*x960))+(((-1.0)*pz))+((r21*x959)));
evalcond[3]=((((-1.0)*r10*x960))+(((-0.54)*x968))+(((-0.54)*x969))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x959)));
evalcond[4]=(((cj5*r21*x963))+((x963*x964))+((r20*x967))+x973+((r22*x965))+(((-1.0)*r21*x972)));
evalcond[5]=((((-1.0)*x971))+((x961*x963))+((cj5*r11*x963))+((r12*x965))+(((-1.0)*r11*x972))+x970+((r10*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x974=((1.0)*cj5);
IkReal x975=((1.0)*cj4);
CheckValue<IkReal> x976=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x975)))),-1);
if(!x976.valid){
continue;
}
CheckValue<IkReal> x977 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x974)))),IkReal(((((-1.0)*cj4*r11*x974))+(((-1.0)*r10*sj5*x975))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x977.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x976.value)))+(x977.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x978=IKsin(j3);
IkReal x979=IKcos(j3);
IkReal x980=(cj4*r00);
IkReal x981=(sj5*x978);
IkReal x982=(sj4*x978);
IkReal x983=(sj5*x979);
IkReal x984=(cj4*cj5*x978);
IkReal x985=((1.0)*cj5*x979);
evalcond[0]=((((-1.0)*r20*x985))+((r22*x982))+((r21*x983))+((r21*x984))+((cj4*r20*x981)));
evalcond[1]=((((-1.0)*r10*x985))+((r12*x982))+((r11*x984))+((r11*x983))+((cj4*r10*x981)));
evalcond[2]=(((cj5*r00*x978))+((cj4*cj5*r01*x979))+((r02*sj4*x979))+((x980*x983))+(((-1.0)*r01*x981)));
evalcond[3]=((1.0)+(((-1.0)*r00*x985))+((r01*x983))+((r01*x984))+((x980*x981))+((r02*x982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x986=((0.76056338028169)*sj4);
IkReal x987=((0.211267605633803)*sj5);
IkReal x988=((0.76056338028169)*cj4);
IkReal x989=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*x989))+((cj5*r11*x986))+(((-1.40845070422535)*py))+((r10*sj5*x986))+((r11*x987))+(((-1.0)*r12*x988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x987))+((r22*x988))+(((-1.0)*r20*sj5*x986))+(((-1.0)*cj5*r21*x986))+(((1.40845070422535)*pz))+((r20*x989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x989))+((cj5*r11*x986))+(((-1.40845070422535)*py))+((r10*sj5*x986))+((r11*x987))+(((-1.0)*r12*x988))))+IKsqr(((((-1.0)*r21*x987))+((r22*x988))+(((-1.0)*r20*sj5*x986))+(((-1.0)*cj5*r21*x986))+(((1.40845070422535)*pz))+((r20*x989))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x989))+((cj5*r11*x986))+(((-1.40845070422535)*py))+((r10*sj5*x986))+((r11*x987))+(((-1.0)*r12*x988))), ((((-1.0)*r21*x987))+((r22*x988))+(((-1.0)*r20*sj5*x986))+(((-1.0)*cj5*r21*x986))+(((1.40845070422535)*pz))+((r20*x989))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x990=(r21*sj5);
IkReal x991=((0.54)*sj3);
IkReal x992=(cj5*r10);
IkReal x993=((0.54)*sj4);
IkReal x994=(cj5*r11);
IkReal x995=(r20*sj5);
IkReal x996=(cj5*r20);
IkReal x997=(cj5*r21);
IkReal x998=((0.54)*cj4);
IkReal x999=(r11*sj5);
IkReal x1000=(r10*sj5);
IkReal x1001=((0.15)*x996);
IkReal x1002=((0.15)*x990);
IkReal x1003=((0.71)*(IKcos(j1)));
IkReal x1004=((0.15)*x999);
IkReal x1005=((0.71)*(IKsin(j1)));
IkReal x1006=((0.15)*x992);
IkReal x1007=(x1001+pz);
IkReal x1008=(x1003+x1002);
IkReal x1009=(x1006+x1005);
evalcond[0]=(x1007+(((-1.0)*x1008))+((r22*x998))+(((-1.0)*x993*x995))+(((-1.0)*x993*x997)));
evalcond[1]=(((r12*x998))+x1009+(((-1.0)*x1004))+py+(((-1.0)*x1000*x993))+(((-1.0)*x993*x994)));
evalcond[2]=(((x991*x992))+x1007+(((-1.0)*x1008))+(((-1.0)*x991*x999))+((cj3*r12*x993))+((cj3*x994*x998))+((cj3*x1000*x998)));
evalcond[3]=(((x991*x996))+x1004+(((-1.0)*x1009))+(((-1.0)*x990*x991))+(((-1.0)*py))+((cj3*x997*x998))+((cj3*x995*x998))+((cj3*r22*x993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1010=(cj1*cj4);
IkReal x1011=(r20*sj5);
IkReal x1012=(cj4*sj1);
IkReal x1013=(cj5*r21);
IkReal x1014=(cj1*sj4);
IkReal x1015=(cj5*r11);
IkReal x1016=(r10*sj5);
IkReal x1017=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1015*x1017))+((x1013*x1014))+(((-1.0)*r22*x1010))+(((-1.0)*x1016*x1017))+((r12*x1012))+((x1011*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1011*x1017))+((r22*x1012))+(((-1.0)*x1014*x1016))+(((-1.0)*x1014*x1015))+((r12*x1010))+(((-1.0)*x1013*x1017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1015*x1017))+((x1013*x1014))+(((-1.0)*r22*x1010))+(((-1.0)*x1016*x1017))+((r12*x1012))+((x1011*x1014))))+IKsqr(((((-1.0)*x1011*x1017))+((r22*x1012))+(((-1.0)*x1014*x1016))+(((-1.0)*x1014*x1015))+((r12*x1010))+(((-1.0)*x1013*x1017))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1015*x1017))+((x1013*x1014))+(((-1.0)*r22*x1010))+(((-1.0)*x1016*x1017))+((r12*x1012))+((x1011*x1014))), ((((-1.0)*x1011*x1017))+((r22*x1012))+(((-1.0)*x1014*x1016))+(((-1.0)*x1014*x1015))+((r12*x1010))+(((-1.0)*x1013*x1017))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1018=IKcos(j2);
IkReal x1019=IKsin(j2);
IkReal x1020=((0.15)*sj5);
IkReal x1021=((0.15)*cj5);
IkReal x1022=(r10*sj5);
IkReal x1023=(cj5*sj4);
IkReal x1024=(cj3*cj4);
IkReal x1025=(r20*sj5);
IkReal x1026=(cj3*sj4);
IkReal x1027=((1.0)*cj4);
IkReal x1028=(cj5*sj3);
IkReal x1029=(cj1*x1018);
IkReal x1030=(sj1*x1019);
IkReal x1031=(cj1*x1019);
IkReal x1032=(sj1*x1018);
IkReal x1033=((1.0)*sj3*sj5);
IkReal x1034=(x1030+x1029);
evalcond[0]=((((-1.0)*r12*x1027))+x1034+((sj4*x1022))+((r11*x1023)));
evalcond[1]=((((-1.0)*r22*x1027))+((r21*x1023))+x1032+(((-1.0)*x1031))+((sj4*x1025)));
evalcond[2]=((((0.71)*cj1))+((r21*x1020))+(((-0.54)*x1032))+(((0.54)*x1031))+(((-1.0)*r20*x1021))+(((-1.0)*pz)));
evalcond[3]=((((-0.54)*x1030))+(((-0.54)*x1029))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1020))+(((-1.0)*r10*x1021)));
evalcond[4]=(((r20*x1028))+x1034+(((-1.0)*r21*x1033))+((r22*x1026))+((cj5*r21*x1024))+((x1024*x1025)));
evalcond[5]=(x1031+(((-1.0)*x1032))+((r12*x1026))+(((-1.0)*r11*x1033))+((x1022*x1024))+((cj5*r11*x1024))+((r10*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1035=((1.0)*sj4);
IkReal x1036=(cj0*r01);
IkReal x1037=(cj4*sj5);
IkReal x1038=(r11*sj0);
IkReal x1039=((1.0)*cj0*r00);
IkReal x1040=((1.0)*cj4*cj5);
IkReal x1041=((1.0)*r10*sj0);
CheckValue<IkReal> x1042 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1039))+((sj5*x1038))+((sj5*x1036))+(((-1.0)*cj5*x1041)))),IkReal(((((-1.0)*x1037*x1039))+(((-1.0)*x1038*x1040))+(((-1.0)*r12*sj0*x1035))+(((-1.0)*x1037*x1041))+(((-1.0)*cj0*r02*x1035))+(((-1.0)*x1036*x1040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x1035))+((cj4*r22))+(((-1.0)*cj5*r21*x1035)))),-1);
if(!x1043.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1042.value)+(((1.5707963267949)*(x1043.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1044=IKsin(j3);
IkReal x1045=IKcos(j3);
IkReal x1046=(sj4*x1044);
IkReal x1047=(sj5*x1045);
IkReal x1048=(cj4*cj5*x1044);
IkReal x1049=(cj4*sj5*x1044);
IkReal x1050=((1.0)*cj5*x1045);
evalcond[0]=(((r20*x1049))+((r21*x1048))+((r21*x1047))+(((-1.0)*r20*x1050))+((r22*x1046)));
evalcond[1]=(cj0+((r11*x1047))+((r11*x1048))+(((-1.0)*r10*x1050))+((r10*x1049))+((r12*x1046)));
evalcond[2]=((((-1.0)*r00*x1050))+((r02*x1046))+(((-1.0)*sj0))+((r01*x1048))+((r01*x1047))+((r00*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1051=((0.76056338028169)*sj4);
IkReal x1052=((0.211267605633803)*sj5);
IkReal x1053=((0.76056338028169)*cj4);
IkReal x1054=((0.211267605633803)*cj5);
if( IKabs((((r12*x1053))+(((-1.0)*r11*x1052))+((r10*x1054))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1051))+(((-1.0)*cj5*r11*x1051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1051))+(((-1.0)*r20*sj5*x1051))+((r20*x1054))+(((1.40845070422535)*pz))+((r22*x1053))+(((-1.0)*r21*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1053))+(((-1.0)*r11*x1052))+((r10*x1054))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1051))+(((-1.0)*cj5*r11*x1051))))+IKsqr(((((-1.0)*cj5*r21*x1051))+(((-1.0)*r20*sj5*x1051))+((r20*x1054))+(((1.40845070422535)*pz))+((r22*x1053))+(((-1.0)*r21*x1052))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x1053))+(((-1.0)*r11*x1052))+((r10*x1054))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1051))+(((-1.0)*cj5*r11*x1051))), ((((-1.0)*cj5*r21*x1051))+(((-1.0)*r20*sj5*x1051))+((r20*x1054))+(((1.40845070422535)*pz))+((r22*x1053))+(((-1.0)*r21*x1052))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1055=((1.0)*py);
IkReal x1056=((0.54)*sj5);
IkReal x1057=((0.15)*sj5);
IkReal x1058=(cj5*r10);
IkReal x1059=((0.54)*cj5);
IkReal x1060=(cj3*cj4);
IkReal x1061=((0.54)*r12);
IkReal x1062=(cj3*sj4);
IkReal x1063=((0.54)*r22);
IkReal x1064=((0.71)*(IKsin(j1)));
IkReal x1065=(r11*x1057);
IkReal x1066=((0.15)*x1058);
IkReal x1067=(r21*x1057);
IkReal x1068=((0.71)*(IKcos(j1)));
IkReal x1069=((0.15)*cj5*r20);
IkReal x1070=(x1055+x1066);
IkReal x1071=(x1068+x1067);
IkReal x1072=(x1065+x1064);
evalcond[0]=((((-1.0)*r20*sj4*x1056))+x1069+(((-1.0)*r21*sj4*x1059))+pz+((cj4*x1063))+(((-1.0)*x1071)));
evalcond[1]=(x1072+((r11*sj4*x1059))+(((-1.0)*cj4*x1061))+((r10*sj4*x1056))+(((-1.0)*x1070)));
evalcond[2]=(x1072+(((-1.0)*r21*x1059*x1060))+(((-1.0)*r20*sj3*x1059))+(((-1.0)*x1062*x1063))+((r21*sj3*x1056))+(((-1.0)*r20*x1056*x1060))+(((-1.0)*x1070)));
evalcond[3]=(((x1061*x1062))+x1071+((r11*x1059*x1060))+((r10*x1056*x1060))+(((0.54)*sj3*x1058))+(((-1.0)*pz))+(((-1.0)*r11*sj3*x1056))+(((-1.0)*x1069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1073=((1.0)*cj4);
IkReal x1074=(r20*sj5);
IkReal x1075=((1.0)*sj1*sj4);
IkReal x1076=(cj1*cj5*sj4);
IkReal x1077=(r10*sj4*sj5);
if( IKabs(((((-1.0)*cj1*r22*x1073))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1074))+((sj1*x1077))+(((-1.0)*r12*sj1*x1073))+((r21*x1076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1074*x1075))+(((-1.0)*cj5*r21*x1075))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1073))+((cj1*x1077))+((r11*x1076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x1073))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1074))+((sj1*x1077))+(((-1.0)*r12*sj1*x1073))+((r21*x1076))))+IKsqr(((((-1.0)*x1074*x1075))+(((-1.0)*cj5*r21*x1075))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1073))+((cj1*x1077))+((r11*x1076))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x1073))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1074))+((sj1*x1077))+(((-1.0)*r12*sj1*x1073))+((r21*x1076))), ((((-1.0)*x1074*x1075))+(((-1.0)*cj5*r21*x1075))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1073))+((cj1*x1077))+((r11*x1076))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1078=IKsin(j2);
IkReal x1079=IKcos(j2);
IkReal x1080=((0.15)*sj5);
IkReal x1081=((0.15)*cj5);
IkReal x1082=(cj5*sj4);
IkReal x1083=(cj3*cj4);
IkReal x1084=(r20*sj5);
IkReal x1085=(cj3*sj4);
IkReal x1086=(r10*sj5);
IkReal x1087=((1.0)*cj4);
IkReal x1088=(cj5*sj3);
IkReal x1089=(sj1*x1079);
IkReal x1090=(cj1*x1079);
IkReal x1091=((0.54)*x1078);
IkReal x1092=((1.0)*sj3*sj5);
IkReal x1093=(sj1*x1078);
IkReal x1094=((1.0)*cj1*x1078);
evalcond[0]=(x1089+(((-1.0)*x1094))+((sj4*x1084))+(((-1.0)*r22*x1087))+((r21*x1082)));
evalcond[1]=(((r11*x1082))+(((-1.0)*x1093))+(((-1.0)*x1090))+((sj4*x1086))+(((-1.0)*r12*x1087)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1091))+(((-1.0)*pz))+(((-0.54)*x1089))+(((-1.0)*r20*x1081))+((r21*x1080)));
evalcond[3]=((((0.54)*x1090))+(((-1.0)*r10*x1081))+((sj1*x1091))+((r11*x1080))+(((-1.0)*py))+(((0.71)*sj1)));
evalcond[4]=(((cj5*r21*x1083))+x1090+x1093+((r20*x1088))+((r22*x1085))+(((-1.0)*r21*x1092))+((x1083*x1084)));
evalcond[5]=(x1089+((cj5*r11*x1083))+((r12*x1085))+(((-1.0)*x1094))+((r10*x1088))+(((-1.0)*r11*x1092))+((x1083*x1086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1095=((0.76056338028169)*sj4);
IkReal x1096=((0.211267605633803)*sj5);
IkReal x1097=((0.76056338028169)*cj4);
IkReal x1098=((0.211267605633803)*cj5);
if( IKabs((((cj5*r11*x1095))+(((-1.40845070422535)*py))+((r11*x1096))+(((-1.0)*r12*x1097))+(((-1.0)*r10*x1098))+((r10*sj5*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1095))+((r22*x1097))+(((-1.0)*cj5*r21*x1095))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1096))+((r20*x1098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*x1095))+(((-1.40845070422535)*py))+((r11*x1096))+(((-1.0)*r12*x1097))+(((-1.0)*r10*x1098))+((r10*sj5*x1095))))+IKsqr(((((-1.0)*r20*sj5*x1095))+((r22*x1097))+(((-1.0)*cj5*r21*x1095))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1096))+((r20*x1098))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r11*x1095))+(((-1.40845070422535)*py))+((r11*x1096))+(((-1.0)*r12*x1097))+(((-1.0)*r10*x1098))+((r10*sj5*x1095))), ((((-1.0)*r20*sj5*x1095))+((r22*x1097))+(((-1.0)*cj5*r21*x1095))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1096))+((r20*x1098))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1099=(r21*sj5);
IkReal x1100=((0.54)*sj3);
IkReal x1101=(cj5*r10);
IkReal x1102=((0.54)*sj4);
IkReal x1103=(cj5*r11);
IkReal x1104=(r20*sj5);
IkReal x1105=(cj5*r20);
IkReal x1106=(cj5*r21);
IkReal x1107=((0.54)*cj4);
IkReal x1108=(r11*sj5);
IkReal x1109=(r10*sj5);
IkReal x1110=((0.15)*x1105);
IkReal x1111=((0.15)*x1099);
IkReal x1112=((0.71)*(IKcos(j1)));
IkReal x1113=((0.15)*x1108);
IkReal x1114=((0.71)*(IKsin(j1)));
IkReal x1115=((0.15)*x1101);
IkReal x1116=(x1110+pz);
IkReal x1117=(x1111+x1112);
IkReal x1118=(x1115+x1114);
evalcond[0]=(x1116+((r22*x1107))+(((-1.0)*x1117))+(((-1.0)*x1102*x1104))+(((-1.0)*x1102*x1106)));
evalcond[1]=(x1118+py+((r12*x1107))+(((-1.0)*x1113))+(((-1.0)*x1102*x1103))+(((-1.0)*x1102*x1109)));
evalcond[2]=(x1116+(((-1.0)*x1100*x1108))+((cj3*x1107*x1109))+((cj3*r12*x1102))+((x1100*x1101))+(((-1.0)*x1117))+((cj3*x1103*x1107)));
evalcond[3]=(((cj3*x1106*x1107))+x1113+(((-1.0)*py))+((cj3*x1104*x1107))+(((-1.0)*x1099*x1100))+((x1100*x1105))+(((-1.0)*x1118))+((cj3*r22*x1102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1119=(cj1*cj4);
IkReal x1120=(r20*sj5);
IkReal x1121=(cj4*sj1);
IkReal x1122=(cj5*r21);
IkReal x1123=(cj1*sj4);
IkReal x1124=(cj5*r11);
IkReal x1125=(r10*sj5);
IkReal x1126=((1.0)*sj1*sj4);
if( IKabs((((x1120*x1123))+((x1122*x1123))+((r12*x1121))+(((-1.0)*x1125*x1126))+(((-1.0)*x1124*x1126))+(((-1.0)*r22*x1119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1122*x1126))+((r22*x1121))+((r12*x1119))+(((-1.0)*x1123*x1124))+(((-1.0)*x1123*x1125))+(((-1.0)*x1120*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1120*x1123))+((x1122*x1123))+((r12*x1121))+(((-1.0)*x1125*x1126))+(((-1.0)*x1124*x1126))+(((-1.0)*r22*x1119))))+IKsqr(((((-1.0)*x1122*x1126))+((r22*x1121))+((r12*x1119))+(((-1.0)*x1123*x1124))+(((-1.0)*x1123*x1125))+(((-1.0)*x1120*x1126))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1120*x1123))+((x1122*x1123))+((r12*x1121))+(((-1.0)*x1125*x1126))+(((-1.0)*x1124*x1126))+(((-1.0)*r22*x1119))), ((((-1.0)*x1122*x1126))+((r22*x1121))+((r12*x1119))+(((-1.0)*x1123*x1124))+(((-1.0)*x1123*x1125))+(((-1.0)*x1120*x1126))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1127=IKcos(j2);
IkReal x1128=IKsin(j2);
IkReal x1129=((0.15)*sj5);
IkReal x1130=((0.15)*cj5);
IkReal x1131=(r10*sj5);
IkReal x1132=(cj5*sj4);
IkReal x1133=(cj3*cj4);
IkReal x1134=(r20*sj5);
IkReal x1135=(cj3*sj4);
IkReal x1136=((1.0)*cj4);
IkReal x1137=(cj5*sj3);
IkReal x1138=(cj1*x1127);
IkReal x1139=(sj1*x1128);
IkReal x1140=(cj1*x1128);
IkReal x1141=(sj1*x1127);
IkReal x1142=((1.0)*sj3*sj5);
IkReal x1143=(x1139+x1138);
evalcond[0]=(x1143+(((-1.0)*r12*x1136))+((sj4*x1131))+((r11*x1132)));
evalcond[1]=(x1141+((sj4*x1134))+((r21*x1132))+(((-1.0)*x1140))+(((-1.0)*r22*x1136)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x1140))+(((-1.0)*pz))+((r21*x1129))+(((-1.0)*r20*x1130))+(((-0.54)*x1141)));
evalcond[3]=((((-0.54)*x1138))+(((-0.54)*x1139))+(((-1.0)*r10*x1130))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1129)));
evalcond[4]=(x1143+(((-1.0)*r21*x1142))+((r22*x1135))+((cj5*r21*x1133))+((x1133*x1134))+((r20*x1137)));
evalcond[5]=(x1140+((r10*x1137))+((x1131*x1133))+((cj5*r11*x1133))+(((-1.0)*x1141))+((r12*x1135))+(((-1.0)*r11*x1142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1144=((0.76056338028169)*sj4);
IkReal x1145=((0.211267605633803)*sj5);
IkReal x1146=((0.76056338028169)*cj4);
IkReal x1147=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r01*x1145))+(((-1.0)*cj5*r01*x1144))+(((-1.0)*r00*sj5*x1144))+((r02*x1146))+(((1.40845070422535)*px))+((r00*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1146))+(((-1.0)*r21*x1145))+((r20*x1147))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1144))+(((-1.0)*cj5*r21*x1144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1145))+(((-1.0)*cj5*r01*x1144))+(((-1.0)*r00*sj5*x1144))+((r02*x1146))+(((1.40845070422535)*px))+((r00*x1147))))+IKsqr((((r22*x1146))+(((-1.0)*r21*x1145))+((r20*x1147))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1144))+(((-1.0)*cj5*r21*x1144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x1145))+(((-1.0)*cj5*r01*x1144))+(((-1.0)*r00*sj5*x1144))+((r02*x1146))+(((1.40845070422535)*px))+((r00*x1147))), (((r22*x1146))+(((-1.0)*r21*x1145))+((r20*x1147))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1144))+(((-1.0)*cj5*r21*x1144))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1148=((1.0)*px);
IkReal x1149=((0.54)*sj5);
IkReal x1150=((0.15)*sj5);
IkReal x1151=((0.54)*cj5);
IkReal x1152=(cj3*cj4);
IkReal x1153=((0.15)*cj5);
IkReal x1154=((0.54)*r02);
IkReal x1155=(cj3*sj4);
IkReal x1156=((0.54)*r22);
IkReal x1157=(r01*x1150);
IkReal x1158=((0.71)*(IKsin(j1)));
IkReal x1159=(r00*x1153);
IkReal x1160=(r21*x1150);
IkReal x1161=((0.71)*(IKcos(j1)));
IkReal x1162=(r20*x1153);
IkReal x1163=(x1148+x1159);
IkReal x1164=(x1160+x1161);
IkReal x1165=(x1158+x1157);
evalcond[0]=(x1162+(((-1.0)*r20*sj4*x1149))+(((-1.0)*r21*sj4*x1151))+pz+((cj4*x1156))+(((-1.0)*x1164)));
evalcond[1]=(x1165+((r00*sj4*x1149))+(((-1.0)*cj4*x1154))+(((-1.0)*x1163))+((r01*sj4*x1151)));
evalcond[2]=(x1165+(((-1.0)*x1155*x1156))+(((-1.0)*r21*x1151*x1152))+(((-1.0)*r20*x1149*x1152))+((r21*sj3*x1149))+(((-1.0)*r20*sj3*x1151))+(((-1.0)*x1163)));
evalcond[3]=(((r00*sj3*x1151))+x1164+(((-1.0)*r01*sj3*x1149))+((r00*x1149*x1152))+(((-1.0)*pz))+((r01*x1151*x1152))+(((-1.0)*x1162))+((x1154*x1155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1166=((1.0)*cj4);
IkReal x1167=(sj1*sj4);
IkReal x1168=(r20*sj5);
IkReal x1169=(cj5*r01);
IkReal x1170=(cj5*r21);
IkReal x1171=(cj1*sj4);
IkReal x1172=(r00*sj5);
if( IKabs((((x1168*x1171))+(((-1.0)*r02*sj1*x1166))+((x1167*x1172))+(((-1.0)*cj1*r22*x1166))+((x1167*x1169))+((x1170*x1171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1166))+(((-1.0)*x1167*x1170))+(((-1.0)*x1167*x1168))+((x1169*x1171))+((x1171*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1168*x1171))+(((-1.0)*r02*sj1*x1166))+((x1167*x1172))+(((-1.0)*cj1*r22*x1166))+((x1167*x1169))+((x1170*x1171))))+IKsqr((((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1166))+(((-1.0)*x1167*x1170))+(((-1.0)*x1167*x1168))+((x1169*x1171))+((x1171*x1172))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1168*x1171))+(((-1.0)*r02*sj1*x1166))+((x1167*x1172))+(((-1.0)*cj1*r22*x1166))+((x1167*x1169))+((x1170*x1171))), (((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1166))+(((-1.0)*x1167*x1170))+(((-1.0)*x1167*x1168))+((x1169*x1171))+((x1171*x1172))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1173=IKsin(j2);
IkReal x1174=IKcos(j2);
IkReal x1175=(cj3*sj4);
IkReal x1176=(r21*sj5);
IkReal x1177=(cj5*sj4);
IkReal x1178=((0.15)*cj5);
IkReal x1179=((1.0)*cj4);
IkReal x1180=(sj4*sj5);
IkReal x1181=((1.0)*sj3);
IkReal x1182=(cj5*sj3);
IkReal x1183=(r01*sj5);
IkReal x1184=(sj1*x1174);
IkReal x1185=(cj1*x1174);
IkReal x1186=(cj3*cj4*sj5);
IkReal x1187=((0.54)*x1173);
IkReal x1188=(sj1*x1173);
IkReal x1189=(cj3*cj4*cj5);
IkReal x1190=((1.0)*cj1*x1173);
evalcond[0]=(x1184+((r21*x1177))+(((-1.0)*x1190))+(((-1.0)*r22*x1179))+((r20*x1180)));
evalcond[1]=((((-1.0)*r02*x1179))+((r00*x1180))+((r01*x1177))+(((-1.0)*x1188))+(((-1.0)*x1185)));
evalcond[2]=((((0.15)*x1176))+(((0.71)*cj1))+(((-1.0)*r20*x1178))+(((-0.54)*x1184))+(((-1.0)*pz))+((cj1*x1187)));
evalcond[3]=(((sj1*x1187))+(((-1.0)*px))+(((0.71)*sj1))+(((-1.0)*r00*x1178))+(((0.15)*x1183))+(((0.54)*x1185)));
evalcond[4]=((((-1.0)*x1176*x1181))+x1188+x1185+((r21*x1189))+((r22*x1175))+((r20*x1186))+((r20*x1182)));
evalcond[5]=((((-1.0)*x1181*x1183))+((r02*x1175))+x1184+((r00*x1186))+((r00*x1182))+((r01*x1189))+(((-1.0)*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1191=((0.76056338028169)*sj4);
IkReal x1192=((0.211267605633803)*sj5);
IkReal x1193=((0.76056338028169)*cj4);
IkReal x1194=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x1194))+((r01*x1192))+(((-1.40845070422535)*px))+((cj5*r01*x1191))+(((-1.0)*r02*x1193))+((r00*sj5*x1191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1191))+((r22*x1193))+(((-1.0)*r20*sj5*x1191))+(((1.40845070422535)*pz))+((r20*x1194))+(((-1.0)*r21*x1192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1194))+((r01*x1192))+(((-1.40845070422535)*px))+((cj5*r01*x1191))+(((-1.0)*r02*x1193))+((r00*sj5*x1191))))+IKsqr(((((-1.0)*cj5*r21*x1191))+((r22*x1193))+(((-1.0)*r20*sj5*x1191))+(((1.40845070422535)*pz))+((r20*x1194))+(((-1.0)*r21*x1192))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1194))+((r01*x1192))+(((-1.40845070422535)*px))+((cj5*r01*x1191))+(((-1.0)*r02*x1193))+((r00*sj5*x1191))), ((((-1.0)*cj5*r21*x1191))+((r22*x1193))+(((-1.0)*r20*sj5*x1191))+(((1.40845070422535)*pz))+((r20*x1194))+(((-1.0)*r21*x1192))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1195=((0.54)*sj5);
IkReal x1196=((0.15)*sj5);
IkReal x1197=((0.54)*cj5);
IkReal x1198=(cj3*cj4);
IkReal x1199=((0.15)*cj5);
IkReal x1200=((0.54)*r02);
IkReal x1201=(cj3*sj4);
IkReal x1202=((0.54)*r22);
IkReal x1203=(r20*x1199);
IkReal x1204=(r21*x1196);
IkReal x1205=((0.71)*(IKcos(j1)));
IkReal x1206=(r01*x1196);
IkReal x1207=((0.71)*(IKsin(j1)));
IkReal x1208=(r00*x1199);
IkReal x1209=(x1203+pz);
IkReal x1210=(x1205+x1204);
IkReal x1211=(x1208+x1207);
evalcond[0]=((((-1.0)*r20*sj4*x1195))+x1209+(((-1.0)*r21*sj4*x1197))+(((-1.0)*x1210))+((cj4*x1202)));
evalcond[1]=(x1211+(((-1.0)*r00*sj4*x1195))+px+(((-1.0)*r01*sj4*x1197))+(((-1.0)*x1206))+((cj4*x1200)));
evalcond[2]=(x1209+((r01*x1197*x1198))+((x1200*x1201))+((r00*sj3*x1197))+(((-1.0)*x1210))+(((-1.0)*r01*sj3*x1195))+((r00*x1195*x1198)));
evalcond[3]=(x1206+((r20*sj3*x1197))+(((-1.0)*px))+(((-1.0)*r21*sj3*x1195))+((r21*x1197*x1198))+((r20*x1195*x1198))+((x1201*x1202))+(((-1.0)*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1212=(cj4*r22);
IkReal x1213=((1.0)*cj1);
IkReal x1214=(r20*sj5);
IkReal x1215=(cj4*r02);
IkReal x1216=(cj5*r21);
IkReal x1217=(cj1*sj4);
IkReal x1218=(cj5*r01);
IkReal x1219=(r00*sj5);
IkReal x1220=((1.0)*sj1*sj4);
if( IKabs((((x1214*x1217))+(((-1.0)*x1218*x1220))+(((-1.0)*x1212*x1213))+((sj1*x1215))+((x1216*x1217))+(((-1.0)*x1219*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1214*x1220))+(((-1.0)*sj4*x1213*x1219))+(((-1.0)*sj4*x1213*x1218))+((sj1*x1212))+(((-1.0)*x1216*x1220))+((cj1*x1215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1214*x1217))+(((-1.0)*x1218*x1220))+(((-1.0)*x1212*x1213))+((sj1*x1215))+((x1216*x1217))+(((-1.0)*x1219*x1220))))+IKsqr(((((-1.0)*x1214*x1220))+(((-1.0)*sj4*x1213*x1219))+(((-1.0)*sj4*x1213*x1218))+((sj1*x1212))+(((-1.0)*x1216*x1220))+((cj1*x1215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1214*x1217))+(((-1.0)*x1218*x1220))+(((-1.0)*x1212*x1213))+((sj1*x1215))+((x1216*x1217))+(((-1.0)*x1219*x1220))), ((((-1.0)*x1214*x1220))+(((-1.0)*sj4*x1213*x1219))+(((-1.0)*sj4*x1213*x1218))+((sj1*x1212))+(((-1.0)*x1216*x1220))+((cj1*x1215))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1221=IKcos(j2);
IkReal x1222=IKsin(j2);
IkReal x1223=(cj3*sj4);
IkReal x1224=(r21*sj5);
IkReal x1225=(cj5*sj4);
IkReal x1226=((0.15)*cj5);
IkReal x1227=((1.0)*cj4);
IkReal x1228=(sj4*sj5);
IkReal x1229=((1.0)*sj3);
IkReal x1230=(cj5*sj3);
IkReal x1231=(r01*sj5);
IkReal x1232=(cj1*x1221);
IkReal x1233=(sj1*x1222);
IkReal x1234=(cj3*cj4*sj5);
IkReal x1235=(cj1*x1222);
IkReal x1236=(sj1*x1221);
IkReal x1237=(cj3*cj4*cj5);
IkReal x1238=(x1232+x1233);
evalcond[0]=(x1238+((r01*x1225))+((r00*x1228))+(((-1.0)*r02*x1227)));
evalcond[1]=((((-1.0)*x1235))+((r20*x1228))+x1236+((r21*x1225))+(((-1.0)*r22*x1227)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1224))+(((-1.0)*r20*x1226))+(((0.54)*x1235))+(((-1.0)*pz))+(((-0.54)*x1236)));
evalcond[3]=((((0.15)*x1231))+(((-1.0)*r00*x1226))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x1233))+(((-0.54)*x1232)));
evalcond[4]=(x1238+(((-1.0)*x1224*x1229))+((r20*x1230))+((r20*x1234))+((r22*x1223))+((r21*x1237)));
evalcond[5]=((((-1.0)*x1236))+x1235+((r00*x1230))+((r00*x1234))+((r01*x1237))+((r02*x1223))+(((-1.0)*x1229*x1231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1239=(cj5*sj4);
IkReal x1240=(cj0*r01);
IkReal x1241=((0.54)*cj0);
IkReal x1242=(sj4*sj5);
CheckValue<IkReal> x1243=IKPowWithIntegerCheck(cj0,-2);
if(!x1243.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1243.value)*(((((0.15)*sj5*x1240))+(((-1.0)*cj4*r02*x1241))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))+((r00*x1241*x1242))+(((0.54)*x1239*x1240)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r20*x1242))+(((-0.76056338028169)*r21*x1239))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1243.value)*(((((0.15)*sj5*x1240))+(((-1.0)*cj4*r02*x1241))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))+((r00*x1241*x1242))+(((0.54)*x1239*x1240))))))+IKsqr(((((-0.76056338028169)*r20*x1242))+(((-0.76056338028169)*r21*x1239))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1243.value)*(((((0.15)*sj5*x1240))+(((-1.0)*cj4*r02*x1241))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))+((r00*x1241*x1242))+(((0.54)*x1239*x1240))))), ((((-0.76056338028169)*r20*x1242))+(((-0.76056338028169)*r21*x1239))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1244=IKsin(j1);
IkReal x1245=IKcos(j1);
IkReal x1246=((0.15)*sj5);
IkReal x1247=(r21*sj0);
IkReal x1248=((0.54)*r20);
IkReal x1249=(sj4*sj5);
IkReal x1250=(cj5*sj3);
IkReal x1251=(cj3*cj5);
IkReal x1252=((0.15)*cj5);
IkReal x1253=(r11*sj0);
IkReal x1254=((0.54)*r01);
IkReal x1255=((0.54)*r00);
IkReal x1256=(cj3*sj0);
IkReal x1257=(cj4*sj5);
IkReal x1258=((1.0)*py);
IkReal x1259=(cj0*r21);
IkReal x1260=((0.54)*sj4);
IkReal x1261=((0.54)*r10);
IkReal x1262=(cj0*r11);
IkReal x1263=(cj5*sj4);
IkReal x1264=((1.0)*px);
IkReal x1265=((0.54)*cj4);
IkReal x1266=(cj0*cj3);
IkReal x1267=((1.0)*pz);
IkReal x1268=((0.71)*x1244);
IkReal x1269=(cj0*x1265);
IkReal x1270=((0.54)*sj3*sj5);
IkReal x1271=((0.71)*x1245);
IkReal x1272=(cj0*sj0*x1268);
evalcond[0]=((((-1.0)*cj5*r21*x1260))+(((-1.0)*x1271))+((r22*x1265))+(((-1.0)*r21*x1246))+pz+((r20*x1252))+(((-1.0)*x1248*x1249)));
evalcond[1]=(((x1246*x1253))+((cj5*x1253*x1260))+(((-1.0)*r10*sj0*x1252))+(((-1.0)*r12*sj0*x1265))+((sj0*x1249*x1261))+(((-1.0)*sj0*x1258))+((x1268*(sj0*sj0))));
evalcond[2]=(((cj0*x1249*x1255))+(((-1.0)*cj0*x1264))+(((-1.0)*cj0*r00*x1252))+(((-1.0)*r02*x1269))+((cj0*x1254*x1263))+((x1268*(cj0*cj0)))+((cj0*r01*x1246)));
evalcond[3]=(((sj0*x1271))+(((-1.0)*r11*x1270))+((x1250*x1261))+((cj3*r12*x1260))+((x1246*x1247))+((r11*x1251*x1265))+((cj3*x1257*x1261))+(((-1.0)*r20*sj0*x1252))+(((-1.0)*sj0*x1267)));
evalcond[4]=(((x1246*x1259))+((cj0*x1271))+(((-1.0)*cj0*x1267))+(((-1.0)*cj0*r20*x1252))+((cj3*r02*x1260))+(((-1.0)*sj3*sj5*x1254))+((x1250*x1255))+((cj4*x1251*x1254))+((cj3*x1255*x1257)));
evalcond[5]=((((-1.0)*x1258))+(((-1.0)*sj0*x1248*x1250))+((x1247*x1270))+((sj0*x1268))+(((-1.0)*x1247*x1251*x1265))+(((-1.0)*x1248*x1256*x1257))+((r11*x1246))+(((-1.0)*r10*x1252))+(((-1.0)*r22*x1256*x1260)));
evalcond[6]=((((-1.0)*x1248*x1257*x1266))+((cj0*x1268))+((x1259*x1270))+(((-1.0)*r00*x1252))+((r01*x1246))+(((-1.0)*x1251*x1259*x1265))+(((-1.0)*cj0*x1248*x1250))+(((-1.0)*r22*x1260*x1266))+(((-1.0)*x1264)));
evalcond[7]=(((cj5*x1260*x1262))+((cj0*x1249*x1261))+(((-1.0)*r12*x1269))+x1272+(((-1.0)*r00*sj0*x1252))+((r01*sj0*x1246))+(((-1.0)*sj0*x1264)));
evalcond[8]=(x1272+((x1246*x1262))+(((-1.0)*cj0*x1258))+(((-1.0)*r02*sj0*x1265))+((sj0*x1254*x1263))+((sj0*x1249*x1255))+(((-1.0)*cj0*r10*x1252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1273=((1.0)*cj4);
IkReal x1274=(sj1*sj4);
IkReal x1275=(r20*sj5);
IkReal x1276=(cj5*r01);
IkReal x1277=(cj5*r21);
IkReal x1278=(cj1*sj4);
IkReal x1279=(r00*sj5);
if( IKabs((((x1275*x1278))+((x1277*x1278))+((x1274*x1279))+((x1274*x1276))+(((-1.0)*r02*sj1*x1273))+(((-1.0)*cj1*r22*x1273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1276*x1278))+(((-1.0)*cj1*r02*x1273))+(((-1.0)*x1274*x1277))+(((-1.0)*x1274*x1275))+((cj4*r22*sj1))+((x1278*x1279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1275*x1278))+((x1277*x1278))+((x1274*x1279))+((x1274*x1276))+(((-1.0)*r02*sj1*x1273))+(((-1.0)*cj1*r22*x1273))))+IKsqr((((x1276*x1278))+(((-1.0)*cj1*r02*x1273))+(((-1.0)*x1274*x1277))+(((-1.0)*x1274*x1275))+((cj4*r22*sj1))+((x1278*x1279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1275*x1278))+((x1277*x1278))+((x1274*x1279))+((x1274*x1276))+(((-1.0)*r02*sj1*x1273))+(((-1.0)*cj1*r22*x1273))), (((x1276*x1278))+(((-1.0)*cj1*r02*x1273))+(((-1.0)*x1274*x1277))+(((-1.0)*x1274*x1275))+((cj4*r22*sj1))+((x1278*x1279))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1280=IKsin(j2);
IkReal x1281=IKcos(j2);
IkReal x1282=(cj3*sj4);
IkReal x1283=(r21*sj5);
IkReal x1284=(cj5*sj4);
IkReal x1285=((0.15)*cj5);
IkReal x1286=((1.0)*cj4);
IkReal x1287=(sj4*sj5);
IkReal x1288=((1.0)*sj3);
IkReal x1289=(cj5*sj3);
IkReal x1290=(r01*sj5);
IkReal x1291=(sj1*x1281);
IkReal x1292=(cj1*x1281);
IkReal x1293=(cj3*cj4*sj5);
IkReal x1294=((0.54)*x1280);
IkReal x1295=(sj1*x1280);
IkReal x1296=(cj3*cj4*cj5);
IkReal x1297=((1.0)*cj1*x1280);
evalcond[0]=(x1291+(((-1.0)*x1297))+(((-1.0)*r22*x1286))+((r20*x1287))+((r21*x1284)));
evalcond[1]=((((-1.0)*r02*x1286))+((r01*x1284))+((r00*x1287))+(((-1.0)*x1292))+(((-1.0)*x1295)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1283))+(((-0.54)*x1291))+((cj1*x1294))+(((-1.0)*pz))+(((-1.0)*r20*x1285)));
evalcond[3]=(((sj1*x1294))+(((0.54)*x1292))+(((-1.0)*r00*x1285))+(((-1.0)*px))+(((0.15)*x1290))+(((0.71)*sj1)));
evalcond[4]=(((r20*x1293))+x1292+x1295+((r21*x1296))+((r22*x1282))+((r20*x1289))+(((-1.0)*x1283*x1288)));
evalcond[5]=(x1291+((r02*x1282))+(((-1.0)*x1297))+(((-1.0)*x1288*x1290))+((r00*x1289))+((r01*x1296))+((r00*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1298=(cj4*r22);
IkReal x1299=((1.0)*cj1);
IkReal x1300=(r20*sj5);
IkReal x1301=(cj4*r02);
IkReal x1302=(cj5*r21);
IkReal x1303=(cj1*sj4);
IkReal x1304=(cj5*r01);
IkReal x1305=(r00*sj5);
IkReal x1306=((1.0)*sj1*sj4);
if( IKabs((((x1300*x1303))+((x1302*x1303))+(((-1.0)*x1298*x1299))+(((-1.0)*x1305*x1306))+((sj1*x1301))+(((-1.0)*x1304*x1306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1298))+(((-1.0)*x1300*x1306))+((cj1*x1301))+(((-1.0)*sj4*x1299*x1305))+(((-1.0)*sj4*x1299*x1304))+(((-1.0)*x1302*x1306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1300*x1303))+((x1302*x1303))+(((-1.0)*x1298*x1299))+(((-1.0)*x1305*x1306))+((sj1*x1301))+(((-1.0)*x1304*x1306))))+IKsqr((((sj1*x1298))+(((-1.0)*x1300*x1306))+((cj1*x1301))+(((-1.0)*sj4*x1299*x1305))+(((-1.0)*sj4*x1299*x1304))+(((-1.0)*x1302*x1306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1300*x1303))+((x1302*x1303))+(((-1.0)*x1298*x1299))+(((-1.0)*x1305*x1306))+((sj1*x1301))+(((-1.0)*x1304*x1306))), (((sj1*x1298))+(((-1.0)*x1300*x1306))+((cj1*x1301))+(((-1.0)*sj4*x1299*x1305))+(((-1.0)*sj4*x1299*x1304))+(((-1.0)*x1302*x1306))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1307=IKcos(j2);
IkReal x1308=IKsin(j2);
IkReal x1309=(cj3*sj4);
IkReal x1310=(r21*sj5);
IkReal x1311=(cj5*sj4);
IkReal x1312=((0.15)*cj5);
IkReal x1313=((1.0)*cj4);
IkReal x1314=(sj4*sj5);
IkReal x1315=((1.0)*sj3);
IkReal x1316=(cj5*sj3);
IkReal x1317=(r01*sj5);
IkReal x1318=(cj1*x1307);
IkReal x1319=(sj1*x1308);
IkReal x1320=(cj3*cj4*sj5);
IkReal x1321=(cj1*x1308);
IkReal x1322=(sj1*x1307);
IkReal x1323=(cj3*cj4*cj5);
IkReal x1324=(x1319+x1318);
evalcond[0]=(x1324+((r00*x1314))+((r01*x1311))+(((-1.0)*r02*x1313)));
evalcond[1]=(x1322+(((-1.0)*r22*x1313))+(((-1.0)*x1321))+((r21*x1311))+((r20*x1314)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x1322))+(((-1.0)*pz))+(((-1.0)*r20*x1312))+(((0.15)*x1310))+(((0.54)*x1321)));
evalcond[3]=((((-0.54)*x1319))+(((-0.54)*x1318))+(((-1.0)*r00*x1312))+(((-0.71)*sj1))+(((-1.0)*px))+(((0.15)*x1317)));
evalcond[4]=(x1324+((r21*x1323))+((r22*x1309))+(((-1.0)*x1310*x1315))+((r20*x1320))+((r20*x1316)));
evalcond[5]=(x1321+((r00*x1316))+(((-1.0)*x1315*x1317))+((r01*x1323))+((r00*x1320))+(((-1.0)*x1322))+((r02*x1309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1325=((1.0)*cj4);
IkReal x1326=(r20*sj5);
IkReal x1327=((1.0)*sj1*sj4);
IkReal x1328=(cj1*cj5*sj4);
IkReal x1329=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x1325))+((cj5*r11*sj1*sj4))+((r21*x1328))+((cj1*sj4*x1326))+(((-1.0)*cj1*r22*x1325))+((sj1*x1329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1327))+(((-1.0)*cj1*r12*x1325))+((cj4*r22*sj1))+((r11*x1328))+(((-1.0)*x1326*x1327))+((cj1*x1329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x1325))+((cj5*r11*sj1*sj4))+((r21*x1328))+((cj1*sj4*x1326))+(((-1.0)*cj1*r22*x1325))+((sj1*x1329))))+IKsqr(((((-1.0)*cj5*r21*x1327))+(((-1.0)*cj1*r12*x1325))+((cj4*r22*sj1))+((r11*x1328))+(((-1.0)*x1326*x1327))+((cj1*x1329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x1325))+((cj5*r11*sj1*sj4))+((r21*x1328))+((cj1*sj4*x1326))+(((-1.0)*cj1*r22*x1325))+((sj1*x1329))), ((((-1.0)*cj5*r21*x1327))+(((-1.0)*cj1*r12*x1325))+((cj4*r22*sj1))+((r11*x1328))+(((-1.0)*x1326*x1327))+((cj1*x1329))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1330=IKsin(j2);
IkReal x1331=IKcos(j2);
IkReal x1332=((0.15)*sj5);
IkReal x1333=((0.15)*cj5);
IkReal x1334=(cj5*sj4);
IkReal x1335=(cj3*cj4);
IkReal x1336=(r20*sj5);
IkReal x1337=(cj3*sj4);
IkReal x1338=(r10*sj5);
IkReal x1339=((1.0)*cj4);
IkReal x1340=(cj5*sj3);
IkReal x1341=(sj1*x1331);
IkReal x1342=(cj1*x1331);
IkReal x1343=((0.54)*x1330);
IkReal x1344=((1.0)*sj3*sj5);
IkReal x1345=(sj1*x1330);
IkReal x1346=((1.0)*cj1*x1330);
evalcond[0]=(x1341+((sj4*x1336))+(((-1.0)*x1346))+(((-1.0)*r22*x1339))+((r21*x1334)));
evalcond[1]=(((sj4*x1338))+((r11*x1334))+(((-1.0)*r12*x1339))+(((-1.0)*x1345))+(((-1.0)*x1342)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1343))+((r21*x1332))+(((-1.0)*pz))+(((-1.0)*r20*x1333))+(((-0.54)*x1341)));
evalcond[3]=(((sj1*x1343))+((r11*x1332))+(((0.54)*x1342))+(((-1.0)*py))+(((-1.0)*r10*x1333))+(((0.71)*sj1)));
evalcond[4]=(x1342+x1345+(((-1.0)*r21*x1344))+((x1335*x1336))+((r22*x1337))+((r20*x1340))+((cj5*r21*x1335)));
evalcond[5]=(x1341+((r12*x1337))+(((-1.0)*x1346))+((cj5*r11*x1335))+((x1335*x1338))+(((-1.0)*r11*x1344))+((r10*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1347=(cj1*cj4);
IkReal x1348=(r20*sj5);
IkReal x1349=(cj4*sj1);
IkReal x1350=(cj5*r21);
IkReal x1351=(cj1*sj4);
IkReal x1352=(cj5*r11);
IkReal x1353=(r10*sj5);
IkReal x1354=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1352*x1354))+((x1348*x1351))+((r12*x1349))+((x1350*x1351))+(((-1.0)*r22*x1347))+(((-1.0)*x1353*x1354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1353))+((r22*x1349))+(((-1.0)*x1350*x1354))+((r12*x1347))+(((-1.0)*x1348*x1354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1352*x1354))+((x1348*x1351))+((r12*x1349))+((x1350*x1351))+(((-1.0)*r22*x1347))+(((-1.0)*x1353*x1354))))+IKsqr(((((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1353))+((r22*x1349))+(((-1.0)*x1350*x1354))+((r12*x1347))+(((-1.0)*x1348*x1354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1352*x1354))+((x1348*x1351))+((r12*x1349))+((x1350*x1351))+(((-1.0)*r22*x1347))+(((-1.0)*x1353*x1354))), ((((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1353))+((r22*x1349))+(((-1.0)*x1350*x1354))+((r12*x1347))+(((-1.0)*x1348*x1354))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1355=IKcos(j2);
IkReal x1356=IKsin(j2);
IkReal x1357=((0.15)*sj5);
IkReal x1358=((0.15)*cj5);
IkReal x1359=(r10*sj5);
IkReal x1360=(cj5*sj4);
IkReal x1361=(cj3*cj4);
IkReal x1362=(r20*sj5);
IkReal x1363=(cj3*sj4);
IkReal x1364=((1.0)*cj4);
IkReal x1365=(cj5*sj3);
IkReal x1366=(cj1*x1355);
IkReal x1367=(sj1*x1356);
IkReal x1368=(cj1*x1356);
IkReal x1369=(sj1*x1355);
IkReal x1370=((1.0)*sj3*sj5);
IkReal x1371=(x1366+x1367);
evalcond[0]=(x1371+(((-1.0)*r12*x1364))+((sj4*x1359))+((r11*x1360)));
evalcond[1]=(x1369+(((-1.0)*x1368))+((sj4*x1362))+(((-1.0)*r22*x1364))+((r21*x1360)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x1368))+(((-1.0)*r20*x1358))+(((-1.0)*pz))+(((-0.54)*x1369))+((r21*x1357)));
evalcond[3]=((((-1.0)*r10*x1358))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1357))+(((-0.54)*x1366))+(((-0.54)*x1367)));
evalcond[4]=(x1371+((r22*x1363))+((x1361*x1362))+((r20*x1365))+(((-1.0)*r21*x1370))+((cj5*r21*x1361)));
evalcond[5]=(x1368+((cj5*r11*x1361))+(((-1.0)*x1369))+((r10*x1365))+((x1359*x1361))+(((-1.0)*r11*x1370))+((r12*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1372=(cj5*sj4);
IkReal x1373=((1.0)*sj0);
IkReal x1374=(cj4*r22);
IkReal x1375=(cj1*sj4*sj5);
IkReal x1376=((1.0)*cj4*r12);
IkReal x1377=(sj1*sj4*sj5);
CheckValue<IkReal> x1378=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1378.valid){
continue;
}
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal((((r11*sj1*x1372))+((r10*x1377))+((r20*sj0*x1375))+(((-1.0)*cj1*x1373*x1374))+((cj1*r21*sj0*x1372))+(((-1.0)*sj1*x1376)))),IkReal(((((-1.0)*r20*x1373*x1377))+((r10*x1375))+(((-1.0)*r21*sj1*x1372*x1373))+((cj1*r11*x1372))+(((-1.0)*cj1*x1376))+((sj0*sj1*x1374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1378.value)))+(x1379.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1380=IKsin(j2);
IkReal x1381=IKcos(j2);
IkReal x1382=(cj3*sj4);
IkReal x1383=(cj0*sj1);
IkReal x1384=((0.15)*sj5);
IkReal x1385=((0.15)*cj5);
IkReal x1386=(cj5*r01);
IkReal x1387=(cj3*cj4);
IkReal x1388=(cj5*sj4);
IkReal x1389=((1.0)*cj0);
IkReal x1390=(r20*sj5);
IkReal x1391=(sj0*sj1);
IkReal x1392=(r10*sj5);
IkReal x1393=((1.0)*cj4);
IkReal x1394=(cj5*sj3);
IkReal x1395=(r00*sj5);
IkReal x1396=(cj1*x1381);
IkReal x1397=((0.54)*x1380);
IkReal x1398=((1.0)*x1380);
IkReal x1399=((1.0)*sj3*sj5);
IkReal x1400=(sj1*x1381);
IkReal x1401=(sj0*x1398);
evalcond[0]=(((sj4*x1390))+((r21*x1388))+x1400+(((-1.0)*r22*x1393))+(((-1.0)*cj1*x1398)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*r20*x1385))+((r21*x1384))+(((-1.0)*pz))+((cj1*x1397))+(((-0.54)*x1400)));
evalcond[2]=((((-1.0)*r02*x1393))+(((-1.0)*x1389*x1396))+((sj4*x1386))+(((-1.0)*x1383*x1398))+((sj4*x1395)));
evalcond[3]=((((-1.0)*r12*x1393))+(((-1.0)*x1391*x1398))+((sj4*x1392))+(((-1.0)*sj0*x1396))+((r11*x1388)));
evalcond[4]=((((-1.0)*r00*x1385))+(((-1.0)*px))+(((0.54)*cj0*x1396))+((r01*x1384))+(((0.71)*x1383))+((x1383*x1397)));
evalcond[5]=((((-1.0)*r10*x1385))+(((-1.0)*py))+((r11*x1384))+(((0.71)*x1391))+((x1391*x1397))+(((0.54)*sj0*x1396)));
evalcond[6]=(x1396+(((-1.0)*r21*x1399))+((cj5*r21*x1387))+((r20*x1394))+((sj1*x1380))+((x1387*x1390))+((r22*x1382)));
evalcond[7]=(((x1381*x1383))+(((-1.0)*r01*x1399))+(((-1.0)*cj1*x1380*x1389))+((x1387*x1395))+((x1386*x1387))+((r00*x1394))+((r02*x1382)));
evalcond[8]=(((r10*x1394))+(((-1.0)*cj1*x1401))+((x1387*x1392))+((cj5*r11*x1387))+((r12*x1382))+((x1381*x1391))+(((-1.0)*r11*x1399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1402=(sj1*sj4);
IkReal x1403=(cj5*r01);
IkReal x1404=((1.0)*cj0);
IkReal x1405=(r20*sj5);
IkReal x1406=(cj4*r22);
IkReal x1407=(r00*sj5);
IkReal x1408=(cj1*sj4);
IkReal x1409=(cj5*r21);
IkReal x1410=((1.0)*cj4*r02);
CheckValue<IkReal> x1411=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1411.valid){
continue;
}
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal((((cj0*x1408*x1409))+(((-1.0)*cj1*x1404*x1406))+((cj0*x1405*x1408))+(((-1.0)*sj1*x1410))+((x1402*x1407))+((x1402*x1403)))),IkReal(((((-1.0)*cj1*x1410))+((x1403*x1408))+((cj0*sj1*x1406))+(((-1.0)*x1402*x1404*x1409))+(((-1.0)*x1402*x1404*x1405))+((x1407*x1408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1411.value)))+(x1412.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1413=IKsin(j2);
IkReal x1414=IKcos(j2);
IkReal x1415=(cj3*sj4);
IkReal x1416=(cj0*sj1);
IkReal x1417=((0.15)*sj5);
IkReal x1418=((0.15)*cj5);
IkReal x1419=(cj5*r01);
IkReal x1420=(cj3*cj4);
IkReal x1421=(cj5*sj4);
IkReal x1422=((1.0)*cj0);
IkReal x1423=(r20*sj5);
IkReal x1424=(sj0*sj1);
IkReal x1425=(r10*sj5);
IkReal x1426=((1.0)*cj4);
IkReal x1427=(cj5*sj3);
IkReal x1428=(r00*sj5);
IkReal x1429=(cj1*x1414);
IkReal x1430=((0.54)*x1413);
IkReal x1431=((1.0)*x1413);
IkReal x1432=((1.0)*sj3*sj5);
IkReal x1433=(sj1*x1414);
IkReal x1434=(sj0*x1431);
evalcond[0]=(((r21*x1421))+(((-1.0)*cj1*x1431))+((sj4*x1423))+x1433+(((-1.0)*r22*x1426)));
evalcond[1]=(((r21*x1417))+(((0.71)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1418))+(((-0.54)*x1433))+((cj1*x1430)));
evalcond[2]=(((sj4*x1428))+((sj4*x1419))+(((-1.0)*x1416*x1431))+(((-1.0)*x1422*x1429))+(((-1.0)*r02*x1426)));
evalcond[3]=(((r11*x1421))+((sj4*x1425))+(((-1.0)*r12*x1426))+(((-1.0)*sj0*x1429))+(((-1.0)*x1424*x1431)));
evalcond[4]=(((x1416*x1430))+(((-1.0)*px))+((r01*x1417))+(((0.54)*cj0*x1429))+(((-1.0)*r00*x1418))+(((0.71)*x1416)));
evalcond[5]=((((-1.0)*r10*x1418))+(((0.71)*x1424))+(((0.54)*sj0*x1429))+((x1424*x1430))+(((-1.0)*py))+((r11*x1417)));
evalcond[6]=(((x1420*x1423))+((cj5*r21*x1420))+((r22*x1415))+x1429+(((-1.0)*r21*x1432))+((sj1*x1413))+((r20*x1427)));
evalcond[7]=(((r00*x1427))+((x1420*x1428))+(((-1.0)*cj1*x1413*x1422))+(((-1.0)*r01*x1432))+((x1419*x1420))+((r02*x1415))+((x1414*x1416)));
evalcond[8]=((((-1.0)*r11*x1432))+((x1420*x1425))+((x1414*x1424))+(((-1.0)*cj1*x1434))+((r10*x1427))+((r12*x1415))+((cj5*r11*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1435=(cj5*sj4);
IkReal x1436=((0.54)*sj0);
IkReal x1437=(sj4*sj5);
IkReal x1438=((0.15)*sj0);
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(sj0,-2);
if(!x1439.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1439.value)*(((((-1.0)*cj4*r12*x1436))+((r10*x1436*x1437))+(((-1.0)*cj5*r10*x1438))+((r11*sj5*x1438))+(((-1.0)*py*sj0))+((r11*x1435*x1436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r20*x1437))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r21*x1435))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1439.value)*(((((-1.0)*cj4*r12*x1436))+((r10*x1436*x1437))+(((-1.0)*cj5*r10*x1438))+((r11*sj5*x1438))+(((-1.0)*py*sj0))+((r11*x1435*x1436))))))+IKsqr(((((-0.76056338028169)*r20*x1437))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r21*x1435))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1439.value)*(((((-1.0)*cj4*r12*x1436))+((r10*x1436*x1437))+(((-1.0)*cj5*r10*x1438))+((r11*sj5*x1438))+(((-1.0)*py*sj0))+((r11*x1435*x1436))))), ((((-0.76056338028169)*r20*x1437))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r21*x1435))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1440=IKsin(j1);
IkReal x1441=IKcos(j1);
IkReal x1442=((0.15)*sj5);
IkReal x1443=(r21*sj0);
IkReal x1444=((0.54)*r20);
IkReal x1445=(sj4*sj5);
IkReal x1446=(cj5*sj3);
IkReal x1447=(cj3*cj5);
IkReal x1448=((0.15)*cj5);
IkReal x1449=(r11*sj0);
IkReal x1450=((0.54)*r01);
IkReal x1451=((0.54)*r00);
IkReal x1452=(cj3*sj0);
IkReal x1453=(cj4*sj5);
IkReal x1454=((1.0)*py);
IkReal x1455=(cj0*r21);
IkReal x1456=((0.54)*sj4);
IkReal x1457=((0.54)*r10);
IkReal x1458=(cj0*r11);
IkReal x1459=(cj5*sj4);
IkReal x1460=((1.0)*px);
IkReal x1461=((0.54)*cj4);
IkReal x1462=(cj0*cj3);
IkReal x1463=((1.0)*pz);
IkReal x1464=((0.71)*x1440);
IkReal x1465=(cj0*x1461);
IkReal x1466=((0.54)*sj3*sj5);
IkReal x1467=((0.71)*x1441);
IkReal x1468=(cj0*sj0*x1464);
evalcond[0]=((((-1.0)*r21*x1442))+(((-1.0)*x1467))+(((-1.0)*cj5*r21*x1456))+pz+((r22*x1461))+((r20*x1448))+(((-1.0)*x1444*x1445)));
evalcond[1]=(((x1442*x1449))+(((-1.0)*sj0*x1454))+((sj0*x1445*x1457))+(((-1.0)*r12*sj0*x1461))+((x1464*(sj0*sj0)))+((cj5*x1449*x1456))+(((-1.0)*r10*sj0*x1448)));
evalcond[2]=((((-1.0)*r02*x1465))+(((-1.0)*cj0*x1460))+((x1464*(cj0*cj0)))+((cj0*r01*x1442))+((cj0*x1450*x1459))+((cj0*x1445*x1451))+(((-1.0)*cj0*r00*x1448)));
evalcond[3]=(((x1446*x1457))+((x1442*x1443))+(((-1.0)*r20*sj0*x1448))+(((-1.0)*sj0*x1463))+((sj0*x1467))+(((-1.0)*r11*x1466))+((r11*x1447*x1461))+((cj3*x1453*x1457))+((cj3*r12*x1456)));
evalcond[4]=(((x1446*x1451))+((cj0*x1467))+((cj3*r02*x1456))+(((-1.0)*cj0*r20*x1448))+(((-1.0)*cj0*x1463))+((cj3*x1451*x1453))+((cj4*x1447*x1450))+(((-1.0)*sj3*sj5*x1450))+((x1442*x1455)));
evalcond[5]=(((r11*x1442))+(((-1.0)*x1443*x1447*x1461))+(((-1.0)*x1454))+(((-1.0)*r22*x1452*x1456))+(((-1.0)*r10*x1448))+(((-1.0)*x1444*x1452*x1453))+((x1443*x1466))+(((-1.0)*sj0*x1444*x1446))+((sj0*x1464)));
evalcond[6]=((((-1.0)*x1444*x1453*x1462))+(((-1.0)*r00*x1448))+(((-1.0)*cj0*x1444*x1446))+(((-1.0)*x1447*x1455*x1461))+((cj0*x1464))+(((-1.0)*x1460))+((x1455*x1466))+(((-1.0)*r22*x1456*x1462))+((r01*x1442)));
evalcond[7]=((((-1.0)*sj0*x1460))+(((-1.0)*r00*sj0*x1448))+x1468+((cj5*x1456*x1458))+(((-1.0)*r12*x1465))+((cj0*x1445*x1457))+((r01*sj0*x1442)));
evalcond[8]=(((sj0*x1445*x1451))+((sj0*x1450*x1459))+(((-1.0)*r02*sj0*x1461))+x1468+(((-1.0)*cj0*r10*x1448))+((x1442*x1458))+(((-1.0)*cj0*x1454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1469=((1.0)*cj4);
IkReal x1470=(sj1*sj4);
IkReal x1471=(r20*sj5);
IkReal x1472=(cj5*r01);
IkReal x1473=(cj5*r21);
IkReal x1474=(cj1*sj4);
IkReal x1475=(r00*sj5);
if( IKabs((((x1471*x1474))+(((-1.0)*cj1*r22*x1469))+((x1470*x1475))+((x1470*x1472))+(((-1.0)*r02*sj1*x1469))+((x1473*x1474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1474*x1475))+((cj4*r22*sj1))+((x1472*x1474))+(((-1.0)*x1470*x1473))+(((-1.0)*x1470*x1471))+(((-1.0)*cj1*r02*x1469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1471*x1474))+(((-1.0)*cj1*r22*x1469))+((x1470*x1475))+((x1470*x1472))+(((-1.0)*r02*sj1*x1469))+((x1473*x1474))))+IKsqr((((x1474*x1475))+((cj4*r22*sj1))+((x1472*x1474))+(((-1.0)*x1470*x1473))+(((-1.0)*x1470*x1471))+(((-1.0)*cj1*r02*x1469))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1471*x1474))+(((-1.0)*cj1*r22*x1469))+((x1470*x1475))+((x1470*x1472))+(((-1.0)*r02*sj1*x1469))+((x1473*x1474))), (((x1474*x1475))+((cj4*r22*sj1))+((x1472*x1474))+(((-1.0)*x1470*x1473))+(((-1.0)*x1470*x1471))+(((-1.0)*cj1*r02*x1469))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1476=IKsin(j2);
IkReal x1477=IKcos(j2);
IkReal x1478=(cj3*sj4);
IkReal x1479=(r21*sj5);
IkReal x1480=(cj5*sj4);
IkReal x1481=((0.15)*cj5);
IkReal x1482=((1.0)*cj4);
IkReal x1483=(sj4*sj5);
IkReal x1484=((1.0)*sj3);
IkReal x1485=(cj5*sj3);
IkReal x1486=(r01*sj5);
IkReal x1487=(sj1*x1477);
IkReal x1488=(cj1*x1477);
IkReal x1489=(cj3*cj4*sj5);
IkReal x1490=((0.54)*x1476);
IkReal x1491=(sj1*x1476);
IkReal x1492=(cj3*cj4*cj5);
IkReal x1493=((1.0)*cj1*x1476);
evalcond[0]=(((r20*x1483))+(((-1.0)*x1493))+((r21*x1480))+(((-1.0)*r22*x1482))+x1487);
evalcond[1]=(((r01*x1480))+((r00*x1483))+(((-1.0)*x1491))+(((-1.0)*x1488))+(((-1.0)*r02*x1482)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1479))+((cj1*x1490))+(((-1.0)*r20*x1481))+(((-0.54)*x1487))+(((-1.0)*pz)));
evalcond[3]=((((0.15)*x1486))+((sj1*x1490))+(((-1.0)*r00*x1481))+(((-1.0)*px))+(((0.71)*sj1))+(((0.54)*x1488)));
evalcond[4]=((((-1.0)*x1479*x1484))+((r20*x1485))+((r20*x1489))+((r22*x1478))+((r21*x1492))+x1491+x1488);
evalcond[5]=(((r00*x1485))+((r00*x1489))+(((-1.0)*x1493))+(((-1.0)*x1484*x1486))+((r01*x1492))+((r02*x1478))+x1487);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1494=(cj4*r22);
IkReal x1495=((1.0)*cj1);
IkReal x1496=(r20*sj5);
IkReal x1497=(cj4*r02);
IkReal x1498=(cj5*r21);
IkReal x1499=(cj1*sj4);
IkReal x1500=(cj5*r01);
IkReal x1501=(r00*sj5);
IkReal x1502=((1.0)*sj1*sj4);
if( IKabs((((x1498*x1499))+(((-1.0)*x1494*x1495))+((sj1*x1497))+(((-1.0)*x1501*x1502))+((x1496*x1499))+(((-1.0)*x1500*x1502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x1495*x1500))+(((-1.0)*sj4*x1495*x1501))+(((-1.0)*x1498*x1502))+((sj1*x1494))+((cj1*x1497))+(((-1.0)*x1496*x1502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1498*x1499))+(((-1.0)*x1494*x1495))+((sj1*x1497))+(((-1.0)*x1501*x1502))+((x1496*x1499))+(((-1.0)*x1500*x1502))))+IKsqr(((((-1.0)*sj4*x1495*x1500))+(((-1.0)*sj4*x1495*x1501))+(((-1.0)*x1498*x1502))+((sj1*x1494))+((cj1*x1497))+(((-1.0)*x1496*x1502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1498*x1499))+(((-1.0)*x1494*x1495))+((sj1*x1497))+(((-1.0)*x1501*x1502))+((x1496*x1499))+(((-1.0)*x1500*x1502))), ((((-1.0)*sj4*x1495*x1500))+(((-1.0)*sj4*x1495*x1501))+(((-1.0)*x1498*x1502))+((sj1*x1494))+((cj1*x1497))+(((-1.0)*x1496*x1502))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1503=IKcos(j2);
IkReal x1504=IKsin(j2);
IkReal x1505=(cj3*sj4);
IkReal x1506=(r21*sj5);
IkReal x1507=(cj5*sj4);
IkReal x1508=((0.15)*cj5);
IkReal x1509=((1.0)*cj4);
IkReal x1510=(sj4*sj5);
IkReal x1511=((1.0)*sj3);
IkReal x1512=(cj5*sj3);
IkReal x1513=(r01*sj5);
IkReal x1514=(cj1*x1503);
IkReal x1515=(sj1*x1504);
IkReal x1516=(cj3*cj4*sj5);
IkReal x1517=(cj1*x1504);
IkReal x1518=(sj1*x1503);
IkReal x1519=(cj3*cj4*cj5);
IkReal x1520=(x1515+x1514);
evalcond[0]=(((r01*x1507))+((r00*x1510))+(((-1.0)*r02*x1509))+x1520);
evalcond[1]=((((-1.0)*r22*x1509))+(((-1.0)*x1517))+((r20*x1510))+x1518+((r21*x1507)));
evalcond[2]=((((-1.0)*r20*x1508))+(((0.71)*cj1))+(((-1.0)*pz))+(((0.15)*x1506))+(((-0.54)*x1518))+(((0.54)*x1517)));
evalcond[3]=((((-1.0)*r00*x1508))+(((-0.71)*sj1))+(((-1.0)*px))+(((0.15)*x1513))+(((-0.54)*x1515))+(((-0.54)*x1514)));
evalcond[4]=(((r20*x1516))+((r20*x1512))+(((-1.0)*x1506*x1511))+x1520+((r22*x1505))+((r21*x1519)));
evalcond[5]=((((-1.0)*x1518))+((r01*x1519))+((r00*x1516))+((r00*x1512))+x1517+((r02*x1505))+(((-1.0)*x1511*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1521=((1.0)*cj4);
IkReal x1522=(r20*sj5);
IkReal x1523=((1.0)*sj1*sj4);
IkReal x1524=(cj1*cj5*sj4);
IkReal x1525=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((sj1*x1525))+((r21*x1524))+((cj1*sj4*x1522))+(((-1.0)*r12*sj1*x1521))+(((-1.0)*cj1*r22*x1521)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x1521))+((r11*x1524))+((cj1*x1525))+((cj4*r22*sj1))+(((-1.0)*x1522*x1523))+(((-1.0)*cj5*r21*x1523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((sj1*x1525))+((r21*x1524))+((cj1*sj4*x1522))+(((-1.0)*r12*sj1*x1521))+(((-1.0)*cj1*r22*x1521))))+IKsqr(((((-1.0)*cj1*r12*x1521))+((r11*x1524))+((cj1*x1525))+((cj4*r22*sj1))+(((-1.0)*x1522*x1523))+(((-1.0)*cj5*r21*x1523))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((sj1*x1525))+((r21*x1524))+((cj1*sj4*x1522))+(((-1.0)*r12*sj1*x1521))+(((-1.0)*cj1*r22*x1521))), ((((-1.0)*cj1*r12*x1521))+((r11*x1524))+((cj1*x1525))+((cj4*r22*sj1))+(((-1.0)*x1522*x1523))+(((-1.0)*cj5*r21*x1523))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1526=IKsin(j2);
IkReal x1527=IKcos(j2);
IkReal x1528=((0.15)*sj5);
IkReal x1529=((0.15)*cj5);
IkReal x1530=(cj5*sj4);
IkReal x1531=(cj3*cj4);
IkReal x1532=(r20*sj5);
IkReal x1533=(cj3*sj4);
IkReal x1534=(r10*sj5);
IkReal x1535=((1.0)*cj4);
IkReal x1536=(cj5*sj3);
IkReal x1537=(sj1*x1527);
IkReal x1538=(cj1*x1527);
IkReal x1539=((0.54)*x1526);
IkReal x1540=((1.0)*sj3*sj5);
IkReal x1541=(sj1*x1526);
IkReal x1542=((1.0)*cj1*x1526);
evalcond[0]=((((-1.0)*r22*x1535))+((r21*x1530))+x1537+((sj4*x1532))+(((-1.0)*x1542)));
evalcond[1]=((((-1.0)*x1541))+(((-1.0)*x1538))+(((-1.0)*r12*x1535))+((r11*x1530))+((sj4*x1534)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1539))+(((-1.0)*pz))+((r21*x1528))+(((-0.54)*x1537))+(((-1.0)*r20*x1529)));
evalcond[3]=(((r11*x1528))+((sj1*x1539))+(((-1.0)*py))+(((0.71)*sj1))+(((-1.0)*r10*x1529))+(((0.54)*x1538)));
evalcond[4]=(((cj5*r21*x1531))+((x1531*x1532))+((r20*x1536))+x1541+x1538+(((-1.0)*r21*x1540))+((r22*x1533)));
evalcond[5]=(((r12*x1533))+((r10*x1536))+((x1531*x1534))+x1537+((cj5*r11*x1531))+(((-1.0)*r11*x1540))+(((-1.0)*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1543=(cj1*cj4);
IkReal x1544=(r20*sj5);
IkReal x1545=(cj4*sj1);
IkReal x1546=(cj5*r21);
IkReal x1547=(cj1*sj4);
IkReal x1548=(cj5*r11);
IkReal x1549=(r10*sj5);
IkReal x1550=((1.0)*sj1*sj4);
if( IKabs((((x1544*x1547))+(((-1.0)*x1549*x1550))+(((-1.0)*r22*x1543))+((r12*x1545))+(((-1.0)*x1548*x1550))+((x1546*x1547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1547*x1548))+(((-1.0)*x1547*x1549))+(((-1.0)*x1546*x1550))+((r12*x1543))+(((-1.0)*x1544*x1550))+((r22*x1545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1544*x1547))+(((-1.0)*x1549*x1550))+(((-1.0)*r22*x1543))+((r12*x1545))+(((-1.0)*x1548*x1550))+((x1546*x1547))))+IKsqr(((((-1.0)*x1547*x1548))+(((-1.0)*x1547*x1549))+(((-1.0)*x1546*x1550))+((r12*x1543))+(((-1.0)*x1544*x1550))+((r22*x1545))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1544*x1547))+(((-1.0)*x1549*x1550))+(((-1.0)*r22*x1543))+((r12*x1545))+(((-1.0)*x1548*x1550))+((x1546*x1547))), ((((-1.0)*x1547*x1548))+(((-1.0)*x1547*x1549))+(((-1.0)*x1546*x1550))+((r12*x1543))+(((-1.0)*x1544*x1550))+((r22*x1545))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1551=IKcos(j2);
IkReal x1552=IKsin(j2);
IkReal x1553=((0.15)*sj5);
IkReal x1554=((0.15)*cj5);
IkReal x1555=(r10*sj5);
IkReal x1556=(cj5*sj4);
IkReal x1557=(cj3*cj4);
IkReal x1558=(r20*sj5);
IkReal x1559=(cj3*sj4);
IkReal x1560=((1.0)*cj4);
IkReal x1561=(cj5*sj3);
IkReal x1562=(cj1*x1551);
IkReal x1563=(sj1*x1552);
IkReal x1564=(cj1*x1552);
IkReal x1565=(sj1*x1551);
IkReal x1566=((1.0)*sj3*sj5);
IkReal x1567=(x1562+x1563);
evalcond[0]=(((sj4*x1555))+((r11*x1556))+x1567+(((-1.0)*r12*x1560)));
evalcond[1]=(((sj4*x1558))+(((-1.0)*r22*x1560))+x1565+((r21*x1556))+(((-1.0)*x1564)));
evalcond[2]=((((0.54)*x1564))+(((0.71)*cj1))+(((-0.54)*x1565))+(((-1.0)*pz))+(((-1.0)*r20*x1554))+((r21*x1553)));
evalcond[3]=(((r11*x1553))+(((-0.54)*x1562))+(((-0.54)*x1563))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x1554)));
evalcond[4]=(((r20*x1561))+((cj5*r21*x1557))+((x1557*x1558))+((r22*x1559))+x1567+(((-1.0)*r21*x1566)));
evalcond[5]=(((x1555*x1557))+((cj5*r11*x1557))+((r12*x1559))+x1564+((r10*x1561))+(((-1.0)*r11*x1566))+(((-1.0)*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1568=(cj5*sj4);
IkReal x1569=((1.0)*sj0);
IkReal x1570=(cj4*r22);
IkReal x1571=(cj1*sj4*sj5);
IkReal x1572=((1.0)*cj4*r12);
IkReal x1573=(sj1*sj4*sj5);
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1572))+(((-1.0)*cj1*x1569*x1570))+((r20*sj0*x1571))+((r11*sj1*x1568))+((cj1*r21*sj0*x1568))+((r10*x1573)))),IkReal(((((-1.0)*r20*x1569*x1573))+(((-1.0)*cj1*x1572))+((sj0*sj1*x1570))+((r10*x1571))+((cj1*r11*x1568))+(((-1.0)*r21*sj1*x1568*x1569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1575.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1574.value)))+(x1575.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1576=IKsin(j2);
IkReal x1577=IKcos(j2);
IkReal x1578=(cj3*sj4);
IkReal x1579=(cj0*sj1);
IkReal x1580=((0.15)*sj5);
IkReal x1581=((0.15)*cj5);
IkReal x1582=(cj5*r01);
IkReal x1583=(cj3*cj4);
IkReal x1584=(cj5*sj4);
IkReal x1585=((1.0)*cj0);
IkReal x1586=(r20*sj5);
IkReal x1587=(sj0*sj1);
IkReal x1588=(r10*sj5);
IkReal x1589=((1.0)*cj4);
IkReal x1590=(cj5*sj3);
IkReal x1591=(r00*sj5);
IkReal x1592=(cj1*x1577);
IkReal x1593=((0.54)*x1576);
IkReal x1594=((1.0)*x1576);
IkReal x1595=((1.0)*sj3*sj5);
IkReal x1596=(sj1*x1577);
IkReal x1597=(sj0*x1594);
evalcond[0]=(((sj4*x1586))+(((-1.0)*cj1*x1594))+x1596+(((-1.0)*r22*x1589))+((r21*x1584)));
evalcond[1]=((((0.71)*cj1))+((cj1*x1593))+(((-0.54)*x1596))+(((-1.0)*pz))+(((-1.0)*r20*x1581))+((r21*x1580)));
evalcond[2]=((((-1.0)*x1585*x1592))+(((-1.0)*r02*x1589))+((sj4*x1591))+((sj4*x1582))+(((-1.0)*x1579*x1594)));
evalcond[3]=(((r11*x1584))+((sj4*x1588))+(((-1.0)*sj0*x1592))+(((-1.0)*r12*x1589))+(((-1.0)*x1587*x1594)));
evalcond[4]=((((0.71)*x1579))+((r01*x1580))+(((-1.0)*r00*x1581))+(((-1.0)*px))+(((0.54)*cj0*x1592))+((x1579*x1593)));
evalcond[5]=(((x1587*x1593))+(((0.71)*x1587))+((r11*x1580))+(((0.54)*sj0*x1592))+(((-1.0)*py))+(((-1.0)*r10*x1581)));
evalcond[6]=(((r20*x1590))+((cj5*r21*x1583))+((x1583*x1586))+((sj1*x1576))+x1592+((r22*x1578))+(((-1.0)*r21*x1595)));
evalcond[7]=(((r00*x1590))+(((-1.0)*cj1*x1576*x1585))+((x1582*x1583))+((x1583*x1591))+(((-1.0)*r01*x1595))+((x1577*x1579))+((r02*x1578)));
evalcond[8]=(((cj5*r11*x1583))+((r12*x1578))+((x1583*x1588))+(((-1.0)*cj1*x1597))+((x1577*x1587))+((r10*x1590))+(((-1.0)*r11*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1598=(sj1*sj4);
IkReal x1599=(cj5*r01);
IkReal x1600=((1.0)*cj0);
IkReal x1601=(r20*sj5);
IkReal x1602=(cj4*r22);
IkReal x1603=(r00*sj5);
IkReal x1604=(cj1*sj4);
IkReal x1605=(cj5*r21);
IkReal x1606=((1.0)*cj4*r02);
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((((cj0*x1601*x1604))+((cj0*x1604*x1605))+((x1598*x1599))+(((-1.0)*cj1*x1600*x1602))+((x1598*x1603))+(((-1.0)*sj1*x1606)))),IkReal(((((-1.0)*cj1*x1606))+((cj0*sj1*x1602))+((x1599*x1604))+(((-1.0)*x1598*x1600*x1605))+(((-1.0)*x1598*x1600*x1601))+((x1603*x1604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1608.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1607.value)+(((1.5707963267949)*(x1608.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1609=IKsin(j2);
IkReal x1610=IKcos(j2);
IkReal x1611=(cj3*sj4);
IkReal x1612=(cj0*sj1);
IkReal x1613=((0.15)*sj5);
IkReal x1614=((0.15)*cj5);
IkReal x1615=(cj5*r01);
IkReal x1616=(cj3*cj4);
IkReal x1617=(cj5*sj4);
IkReal x1618=((1.0)*cj0);
IkReal x1619=(r20*sj5);
IkReal x1620=(sj0*sj1);
IkReal x1621=(r10*sj5);
IkReal x1622=((1.0)*cj4);
IkReal x1623=(cj5*sj3);
IkReal x1624=(r00*sj5);
IkReal x1625=(cj1*x1610);
IkReal x1626=((0.54)*x1609);
IkReal x1627=((1.0)*x1609);
IkReal x1628=((1.0)*sj3*sj5);
IkReal x1629=(sj1*x1610);
IkReal x1630=(sj0*x1627);
evalcond[0]=(((r21*x1617))+x1629+(((-1.0)*r22*x1622))+((sj4*x1619))+(((-1.0)*cj1*x1627)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*r20*x1614))+((r21*x1613))+(((-0.54)*x1629))+(((-1.0)*pz))+((cj1*x1626)));
evalcond[2]=((((-1.0)*r02*x1622))+((sj4*x1624))+((sj4*x1615))+(((-1.0)*x1612*x1627))+(((-1.0)*x1618*x1625)));
evalcond[3]=((((-1.0)*r12*x1622))+((r11*x1617))+((sj4*x1621))+(((-1.0)*x1620*x1627))+(((-1.0)*sj0*x1625)));
evalcond[4]=((((0.71)*x1612))+((r01*x1613))+(((-1.0)*r00*x1614))+(((-1.0)*px))+((x1612*x1626))+(((0.54)*cj0*x1625)));
evalcond[5]=(((x1620*x1626))+(((0.71)*x1620))+(((-1.0)*py))+(((0.54)*sj0*x1625))+((r11*x1613))+(((-1.0)*r10*x1614)));
evalcond[6]=(((r20*x1623))+(((-1.0)*r21*x1628))+x1625+((sj1*x1609))+((cj5*r21*x1616))+((x1616*x1619))+((r22*x1611)));
evalcond[7]=(((r00*x1623))+(((-1.0)*r01*x1628))+(((-1.0)*cj1*x1609*x1618))+((x1615*x1616))+((x1616*x1624))+((x1610*x1612))+((r02*x1611)));
evalcond[8]=((((-1.0)*r11*x1628))+((cj5*r11*x1616))+((r12*x1611))+(((-1.0)*cj1*x1630))+((x1616*x1621))+((r10*x1623))+((x1610*x1620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1631=(r21*sj0);
IkReal x1632=((1.0)*cj4);
IkReal x1633=((1.0)*r20*sj0);
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+(((-1.0)*r12*x1632))+((r10*sj4*sj5)))),-1);
if(!x1634.valid){
continue;
}
CheckValue<IkReal> x1635 = IKatan2WithCheck(IkReal((((sj5*x1631))+(((-1.0)*cj5*x1633)))),IkReal(((((-1.0)*r20*sj0*sj5*x1632))+(((-1.0)*r22*sj0*sj4))+(((-1.0)*cj5*x1631*x1632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1635.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1634.value)))+(x1635.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1636=IKsin(j3);
IkReal x1637=IKcos(j3);
IkReal x1638=(sj4*x1636);
IkReal x1639=(sj5*x1637);
IkReal x1640=(cj4*cj5*x1636);
IkReal x1641=(cj4*sj5*x1636);
IkReal x1642=((1.0)*cj5*x1637);
evalcond[0]=(((r21*x1639))+((r21*x1640))+((r20*x1641))+(((-1.0)*r20*x1642))+((r22*x1638)));
evalcond[1]=(((r11*x1640))+cj0+((r10*x1641))+((r11*x1639))+((r12*x1638))+(((-1.0)*r10*x1642)));
evalcond[2]=(((r02*x1638))+(((-1.0)*sj0))+(((-1.0)*r00*x1642))+((r00*x1641))+((r01*x1639))+((r01*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1643=((0.76056338028169)*sj4);
IkReal x1644=((0.211267605633803)*sj5);
IkReal x1645=((0.76056338028169)*cj4);
IkReal x1646=((0.211267605633803)*cj5);
if( IKabs((((r10*x1646))+(((-1.0)*cj5*r11*x1643))+(((-1.0)*r11*x1644))+((r12*x1645))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1643))+((r20*x1646))+(((-1.0)*r20*sj5*x1643))+(((-1.0)*r21*x1644))+(((1.40845070422535)*pz))+((r22*x1645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1646))+(((-1.0)*cj5*r11*x1643))+(((-1.0)*r11*x1644))+((r12*x1645))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1643))))+IKsqr(((((-1.0)*cj5*r21*x1643))+((r20*x1646))+(((-1.0)*r20*sj5*x1643))+(((-1.0)*r21*x1644))+(((1.40845070422535)*pz))+((r22*x1645))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x1646))+(((-1.0)*cj5*r11*x1643))+(((-1.0)*r11*x1644))+((r12*x1645))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1643))), ((((-1.0)*cj5*r21*x1643))+((r20*x1646))+(((-1.0)*r20*sj5*x1643))+(((-1.0)*r21*x1644))+(((1.40845070422535)*pz))+((r22*x1645))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1647=((1.0)*py);
IkReal x1648=((0.54)*sj5);
IkReal x1649=((0.15)*sj5);
IkReal x1650=(cj5*r10);
IkReal x1651=((0.54)*cj5);
IkReal x1652=(cj3*cj4);
IkReal x1653=((0.54)*r12);
IkReal x1654=(cj3*sj4);
IkReal x1655=((0.54)*r22);
IkReal x1656=((0.71)*(IKsin(j1)));
IkReal x1657=(r11*x1649);
IkReal x1658=((0.15)*x1650);
IkReal x1659=(r21*x1649);
IkReal x1660=((0.71)*(IKcos(j1)));
IkReal x1661=((0.15)*cj5*r20);
IkReal x1662=(x1658+x1647);
IkReal x1663=(x1660+x1659);
IkReal x1664=(x1656+x1657);
evalcond[0]=(((cj4*x1655))+(((-1.0)*r21*sj4*x1651))+x1661+pz+(((-1.0)*x1663))+(((-1.0)*r20*sj4*x1648)));
evalcond[1]=((((-1.0)*cj4*x1653))+x1664+((r11*sj4*x1651))+((r10*sj4*x1648))+(((-1.0)*x1662)));
evalcond[2]=((((-1.0)*x1654*x1655))+x1664+(((-1.0)*r21*x1651*x1652))+(((-1.0)*r20*sj3*x1651))+(((-1.0)*x1662))+(((-1.0)*r20*x1648*x1652))+((r21*sj3*x1648)));
evalcond[3]=((((-1.0)*r11*sj3*x1648))+((r11*x1651*x1652))+x1663+(((-1.0)*pz))+(((-1.0)*x1661))+((r10*x1648*x1652))+((x1653*x1654))+(((0.54)*sj3*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1665=((1.0)*cj4);
IkReal x1666=(r20*sj5);
IkReal x1667=((1.0)*sj1*sj4);
IkReal x1668=(cj1*cj5*sj4);
IkReal x1669=(r10*sj4*sj5);
if( IKabs((((sj1*x1669))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1666))+(((-1.0)*r12*sj1*x1665))+(((-1.0)*cj1*r22*x1665))+((r21*x1668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1667))+((cj1*x1669))+((r11*x1668))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1665))+(((-1.0)*x1666*x1667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1669))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1666))+(((-1.0)*r12*sj1*x1665))+(((-1.0)*cj1*r22*x1665))+((r21*x1668))))+IKsqr(((((-1.0)*cj5*r21*x1667))+((cj1*x1669))+((r11*x1668))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1665))+(((-1.0)*x1666*x1667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1669))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1666))+(((-1.0)*r12*sj1*x1665))+(((-1.0)*cj1*r22*x1665))+((r21*x1668))), ((((-1.0)*cj5*r21*x1667))+((cj1*x1669))+((r11*x1668))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1665))+(((-1.0)*x1666*x1667))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1670=IKsin(j2);
IkReal x1671=IKcos(j2);
IkReal x1672=((0.15)*sj5);
IkReal x1673=((0.15)*cj5);
IkReal x1674=(cj5*sj4);
IkReal x1675=(cj3*cj4);
IkReal x1676=(r20*sj5);
IkReal x1677=(cj3*sj4);
IkReal x1678=(r10*sj5);
IkReal x1679=((1.0)*cj4);
IkReal x1680=(cj5*sj3);
IkReal x1681=(sj1*x1671);
IkReal x1682=(cj1*x1671);
IkReal x1683=((0.54)*x1670);
IkReal x1684=((1.0)*sj3*sj5);
IkReal x1685=(sj1*x1670);
IkReal x1686=((1.0)*cj1*x1670);
evalcond[0]=(((r21*x1674))+(((-1.0)*x1686))+((sj4*x1676))+x1681+(((-1.0)*r22*x1679)));
evalcond[1]=(((sj4*x1678))+(((-1.0)*x1682))+(((-1.0)*x1685))+(((-1.0)*r12*x1679))+((r11*x1674)));
evalcond[2]=(((r21*x1672))+((cj1*x1683))+(((0.71)*cj1))+(((-0.54)*x1681))+(((-1.0)*pz))+(((-1.0)*r20*x1673)));
evalcond[3]=(((sj1*x1683))+(((-1.0)*r10*x1673))+(((-1.0)*py))+(((0.54)*x1682))+(((0.71)*sj1))+((r11*x1672)));
evalcond[4]=(((x1675*x1676))+x1682+x1685+(((-1.0)*r21*x1684))+((cj5*r21*x1675))+((r22*x1677))+((r20*x1680)));
evalcond[5]=(((x1675*x1678))+(((-1.0)*r11*x1684))+(((-1.0)*x1686))+((r10*x1680))+x1681+((cj5*r11*x1675))+((r12*x1677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1687=((0.76056338028169)*sj4);
IkReal x1688=((0.211267605633803)*sj5);
IkReal x1689=((0.76056338028169)*cj4);
IkReal x1690=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r12*x1689))+((r11*x1688))+((r10*sj5*x1687))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1690))+((cj5*r11*x1687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1687))+((r20*x1690))+((r22*x1689))+(((-1.0)*cj5*r21*x1687))+(((-1.0)*r21*x1688))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1689))+((r11*x1688))+((r10*sj5*x1687))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1690))+((cj5*r11*x1687))))+IKsqr(((((-1.0)*r20*sj5*x1687))+((r20*x1690))+((r22*x1689))+(((-1.0)*cj5*r21*x1687))+(((-1.0)*r21*x1688))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1689))+((r11*x1688))+((r10*sj5*x1687))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1690))+((cj5*r11*x1687))), ((((-1.0)*r20*sj5*x1687))+((r20*x1690))+((r22*x1689))+(((-1.0)*cj5*r21*x1687))+(((-1.0)*r21*x1688))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1691=(r21*sj5);
IkReal x1692=((0.54)*sj3);
IkReal x1693=(cj5*r10);
IkReal x1694=((0.54)*sj4);
IkReal x1695=(cj5*r11);
IkReal x1696=(r20*sj5);
IkReal x1697=(cj5*r20);
IkReal x1698=(cj5*r21);
IkReal x1699=((0.54)*cj4);
IkReal x1700=(r11*sj5);
IkReal x1701=(r10*sj5);
IkReal x1702=((0.15)*x1697);
IkReal x1703=((0.15)*x1691);
IkReal x1704=((0.71)*(IKcos(j1)));
IkReal x1705=((0.15)*x1700);
IkReal x1706=((0.71)*(IKsin(j1)));
IkReal x1707=((0.15)*x1693);
IkReal x1708=(x1702+pz);
IkReal x1709=(x1703+x1704);
IkReal x1710=(x1706+x1707);
evalcond[0]=(x1708+(((-1.0)*x1694*x1698))+(((-1.0)*x1694*x1696))+((r22*x1699))+(((-1.0)*x1709)));
evalcond[1]=(((r12*x1699))+x1710+(((-1.0)*x1694*x1695))+(((-1.0)*x1705))+py+(((-1.0)*x1694*x1701)));
evalcond[2]=(((cj3*r12*x1694))+x1708+((cj3*x1695*x1699))+((x1692*x1693))+(((-1.0)*x1709))+((cj3*x1699*x1701))+(((-1.0)*x1692*x1700)));
evalcond[3]=(((cj3*r22*x1694))+x1705+(((-1.0)*x1710))+((cj3*x1698*x1699))+((x1692*x1697))+(((-1.0)*x1691*x1692))+(((-1.0)*py))+((cj3*x1696*x1699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1711=(cj1*cj4);
IkReal x1712=(r20*sj5);
IkReal x1713=(cj4*sj1);
IkReal x1714=(cj5*r21);
IkReal x1715=(cj1*sj4);
IkReal x1716=(cj5*r11);
IkReal x1717=(r10*sj5);
IkReal x1718=((1.0)*sj1*sj4);
if( IKabs((((x1712*x1715))+((r12*x1713))+((x1714*x1715))+(((-1.0)*x1716*x1718))+(((-1.0)*r22*x1711))+(((-1.0)*x1717*x1718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1714*x1718))+((r22*x1713))+(((-1.0)*x1712*x1718))+((r12*x1711))+(((-1.0)*x1715*x1717))+(((-1.0)*x1715*x1716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1712*x1715))+((r12*x1713))+((x1714*x1715))+(((-1.0)*x1716*x1718))+(((-1.0)*r22*x1711))+(((-1.0)*x1717*x1718))))+IKsqr(((((-1.0)*x1714*x1718))+((r22*x1713))+(((-1.0)*x1712*x1718))+((r12*x1711))+(((-1.0)*x1715*x1717))+(((-1.0)*x1715*x1716))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1712*x1715))+((r12*x1713))+((x1714*x1715))+(((-1.0)*x1716*x1718))+(((-1.0)*r22*x1711))+(((-1.0)*x1717*x1718))), ((((-1.0)*x1714*x1718))+((r22*x1713))+(((-1.0)*x1712*x1718))+((r12*x1711))+(((-1.0)*x1715*x1717))+(((-1.0)*x1715*x1716))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1719=IKcos(j2);
IkReal x1720=IKsin(j2);
IkReal x1721=((0.15)*sj5);
IkReal x1722=((0.15)*cj5);
IkReal x1723=(r10*sj5);
IkReal x1724=(cj5*sj4);
IkReal x1725=(cj3*cj4);
IkReal x1726=(r20*sj5);
IkReal x1727=(cj3*sj4);
IkReal x1728=((1.0)*cj4);
IkReal x1729=(cj5*sj3);
IkReal x1730=(cj1*x1719);
IkReal x1731=(sj1*x1720);
IkReal x1732=(cj1*x1720);
IkReal x1733=(sj1*x1719);
IkReal x1734=((1.0)*sj3*sj5);
IkReal x1735=(x1731+x1730);
evalcond[0]=(x1735+(((-1.0)*r12*x1728))+((sj4*x1723))+((r11*x1724)));
evalcond[1]=((((-1.0)*r22*x1728))+x1733+((r21*x1724))+((sj4*x1726))+(((-1.0)*x1732)));
evalcond[2]=((((0.71)*cj1))+((r21*x1721))+(((0.54)*x1732))+(((-0.54)*x1733))+(((-1.0)*pz))+(((-1.0)*r20*x1722)));
evalcond[3]=((((-1.0)*r10*x1722))+(((-0.54)*x1731))+(((-0.54)*x1730))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1721)));
evalcond[4]=(((x1725*x1726))+x1735+((r22*x1727))+((cj5*r21*x1725))+((r20*x1729))+(((-1.0)*r21*x1734)));
evalcond[5]=(((x1723*x1725))+(((-1.0)*r11*x1734))+x1732+((r10*x1729))+((cj5*r11*x1725))+((r12*x1727))+(((-1.0)*x1733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1736=((0.76056338028169)*sj4);
IkReal x1737=((0.211267605633803)*sj5);
IkReal x1738=((0.76056338028169)*cj4);
IkReal x1739=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x1736))+((r00*x1739))+(((-1.0)*r01*x1737))+((r02*x1738))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x1736)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1738))+(((-1.0)*r20*sj5*x1736))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1736))+((r20*x1739))+(((-1.0)*r21*x1737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x1736))+((r00*x1739))+(((-1.0)*r01*x1737))+((r02*x1738))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x1736))))+IKsqr((((r22*x1738))+(((-1.0)*r20*sj5*x1736))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1736))+((r20*x1739))+(((-1.0)*r21*x1737))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x1736))+((r00*x1739))+(((-1.0)*r01*x1737))+((r02*x1738))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x1736))), (((r22*x1738))+(((-1.0)*r20*sj5*x1736))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1736))+((r20*x1739))+(((-1.0)*r21*x1737))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1740=((1.0)*px);
IkReal x1741=((0.54)*sj5);
IkReal x1742=((0.15)*sj5);
IkReal x1743=((0.54)*cj5);
IkReal x1744=(cj3*cj4);
IkReal x1745=((0.15)*cj5);
IkReal x1746=((0.54)*r02);
IkReal x1747=(cj3*sj4);
IkReal x1748=((0.54)*r22);
IkReal x1749=(r01*x1742);
IkReal x1750=((0.71)*(IKsin(j1)));
IkReal x1751=(r00*x1745);
IkReal x1752=(r21*x1742);
IkReal x1753=((0.71)*(IKcos(j1)));
IkReal x1754=(r20*x1745);
IkReal x1755=(x1740+x1751);
IkReal x1756=(x1753+x1752);
IkReal x1757=(x1749+x1750);
evalcond[0]=((((-1.0)*r21*sj4*x1743))+((cj4*x1748))+(((-1.0)*r20*sj4*x1741))+x1754+(((-1.0)*x1756))+pz);
evalcond[1]=((((-1.0)*cj4*x1746))+x1757+((r00*sj4*x1741))+((r01*sj4*x1743))+(((-1.0)*x1755)));
evalcond[2]=(((r21*sj3*x1741))+x1757+(((-1.0)*r20*x1741*x1744))+(((-1.0)*x1755))+(((-1.0)*x1747*x1748))+(((-1.0)*r20*sj3*x1743))+(((-1.0)*r21*x1743*x1744)));
evalcond[3]=(x1756+((x1746*x1747))+(((-1.0)*pz))+((r00*x1741*x1744))+(((-1.0)*x1754))+((r01*x1743*x1744))+(((-1.0)*r01*sj3*x1741))+((r00*sj3*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1758=((1.0)*cj4);
IkReal x1759=(sj1*sj4);
IkReal x1760=(r20*sj5);
IkReal x1761=(cj5*r01);
IkReal x1762=(cj5*r21);
IkReal x1763=(cj1*sj4);
IkReal x1764=(r00*sj5);
if( IKabs(((((-1.0)*cj1*r22*x1758))+((x1759*x1764))+((x1759*x1761))+((x1762*x1763))+(((-1.0)*r02*sj1*x1758))+((x1760*x1763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r02*x1758))+(((-1.0)*x1759*x1760))+(((-1.0)*x1759*x1762))+((cj4*r22*sj1))+((x1761*x1763))+((x1763*x1764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x1758))+((x1759*x1764))+((x1759*x1761))+((x1762*x1763))+(((-1.0)*r02*sj1*x1758))+((x1760*x1763))))+IKsqr(((((-1.0)*cj1*r02*x1758))+(((-1.0)*x1759*x1760))+(((-1.0)*x1759*x1762))+((cj4*r22*sj1))+((x1761*x1763))+((x1763*x1764))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x1758))+((x1759*x1764))+((x1759*x1761))+((x1762*x1763))+(((-1.0)*r02*sj1*x1758))+((x1760*x1763))), ((((-1.0)*cj1*r02*x1758))+(((-1.0)*x1759*x1760))+(((-1.0)*x1759*x1762))+((cj4*r22*sj1))+((x1761*x1763))+((x1763*x1764))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1765=IKsin(j2);
IkReal x1766=IKcos(j2);
IkReal x1767=(cj3*sj4);
IkReal x1768=(r21*sj5);
IkReal x1769=(cj5*sj4);
IkReal x1770=((0.15)*cj5);
IkReal x1771=((1.0)*cj4);
IkReal x1772=(sj4*sj5);
IkReal x1773=((1.0)*sj3);
IkReal x1774=(cj5*sj3);
IkReal x1775=(r01*sj5);
IkReal x1776=(sj1*x1766);
IkReal x1777=(cj1*x1766);
IkReal x1778=(cj3*cj4*sj5);
IkReal x1779=((0.54)*x1765);
IkReal x1780=(sj1*x1765);
IkReal x1781=(cj3*cj4*cj5);
IkReal x1782=((1.0)*cj1*x1765);
evalcond[0]=(((r21*x1769))+(((-1.0)*x1782))+x1776+((r20*x1772))+(((-1.0)*r22*x1771)));
evalcond[1]=((((-1.0)*x1777))+((r01*x1769))+((r00*x1772))+(((-1.0)*r02*x1771))+(((-1.0)*x1780)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x1770))+(((0.15)*x1768))+(((-1.0)*pz))+(((-0.54)*x1776))+((cj1*x1779)));
evalcond[3]=((((-1.0)*px))+(((0.15)*x1775))+(((0.71)*sj1))+(((-1.0)*r00*x1770))+((sj1*x1779))+(((0.54)*x1777)));
evalcond[4]=(x1780+x1777+((r21*x1781))+((r20*x1778))+((r20*x1774))+((r22*x1767))+(((-1.0)*x1768*x1773)));
evalcond[5]=((((-1.0)*x1782))+x1776+((r00*x1778))+((r00*x1774))+(((-1.0)*x1773*x1775))+((r02*x1767))+((r01*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1783=((0.76056338028169)*sj4);
IkReal x1784=((0.211267605633803)*sj5);
IkReal x1785=((0.76056338028169)*cj4);
IkReal x1786=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x1786))+((r00*sj5*x1783))+((cj5*r01*x1783))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1785))+((r01*x1784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1786))+(((-1.0)*r20*sj5*x1783))+(((-1.0)*cj5*r21*x1783))+((r22*x1785))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1786))+((r00*sj5*x1783))+((cj5*r01*x1783))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1785))+((r01*x1784))))+IKsqr((((r20*x1786))+(((-1.0)*r20*sj5*x1783))+(((-1.0)*cj5*r21*x1783))+((r22*x1785))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1784))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1786))+((r00*sj5*x1783))+((cj5*r01*x1783))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1785))+((r01*x1784))), (((r20*x1786))+(((-1.0)*r20*sj5*x1783))+(((-1.0)*cj5*r21*x1783))+((r22*x1785))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1784))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1787=((0.54)*sj5);
IkReal x1788=((0.15)*sj5);
IkReal x1789=((0.54)*cj5);
IkReal x1790=(cj3*cj4);
IkReal x1791=((0.15)*cj5);
IkReal x1792=((0.54)*r02);
IkReal x1793=(cj3*sj4);
IkReal x1794=((0.54)*r22);
IkReal x1795=(r20*x1791);
IkReal x1796=(r21*x1788);
IkReal x1797=((0.71)*(IKcos(j1)));
IkReal x1798=(r01*x1788);
IkReal x1799=((0.71)*(IKsin(j1)));
IkReal x1800=(r00*x1791);
IkReal x1801=(x1795+pz);
IkReal x1802=(x1797+x1796);
IkReal x1803=(x1799+x1800);
evalcond[0]=((((-1.0)*r20*sj4*x1787))+(((-1.0)*x1802))+x1801+(((-1.0)*r21*sj4*x1789))+((cj4*x1794)));
evalcond[1]=((((-1.0)*x1798))+(((-1.0)*r01*sj4*x1789))+px+x1803+(((-1.0)*r00*sj4*x1787))+((cj4*x1792)));
evalcond[2]=(((r01*x1789*x1790))+(((-1.0)*x1802))+x1801+(((-1.0)*r01*sj3*x1787))+((x1792*x1793))+((r00*x1787*x1790))+((r00*sj3*x1789)));
evalcond[3]=(((x1793*x1794))+((r20*x1787*x1790))+x1798+((r21*x1789*x1790))+(((-1.0)*x1803))+(((-1.0)*px))+(((-1.0)*r21*sj3*x1787))+((r20*sj3*x1789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1804=(cj4*r22);
IkReal x1805=((1.0)*cj1);
IkReal x1806=(r20*sj5);
IkReal x1807=(cj4*r02);
IkReal x1808=(cj5*r21);
IkReal x1809=(cj1*sj4);
IkReal x1810=(cj5*r01);
IkReal x1811=(r00*sj5);
IkReal x1812=((1.0)*sj1*sj4);
if( IKabs((((sj1*x1807))+((x1806*x1809))+((x1808*x1809))+(((-1.0)*x1811*x1812))+(((-1.0)*x1804*x1805))+(((-1.0)*x1810*x1812)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1804))+(((-1.0)*x1808*x1812))+(((-1.0)*sj4*x1805*x1811))+(((-1.0)*sj4*x1805*x1810))+(((-1.0)*x1806*x1812))+((cj1*x1807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1807))+((x1806*x1809))+((x1808*x1809))+(((-1.0)*x1811*x1812))+(((-1.0)*x1804*x1805))+(((-1.0)*x1810*x1812))))+IKsqr((((sj1*x1804))+(((-1.0)*x1808*x1812))+(((-1.0)*sj4*x1805*x1811))+(((-1.0)*sj4*x1805*x1810))+(((-1.0)*x1806*x1812))+((cj1*x1807))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1807))+((x1806*x1809))+((x1808*x1809))+(((-1.0)*x1811*x1812))+(((-1.0)*x1804*x1805))+(((-1.0)*x1810*x1812))), (((sj1*x1804))+(((-1.0)*x1808*x1812))+(((-1.0)*sj4*x1805*x1811))+(((-1.0)*sj4*x1805*x1810))+(((-1.0)*x1806*x1812))+((cj1*x1807))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1813=IKcos(j2);
IkReal x1814=IKsin(j2);
IkReal x1815=(cj3*sj4);
IkReal x1816=(r21*sj5);
IkReal x1817=(cj5*sj4);
IkReal x1818=((0.15)*cj5);
IkReal x1819=((1.0)*cj4);
IkReal x1820=(sj4*sj5);
IkReal x1821=((1.0)*sj3);
IkReal x1822=(cj5*sj3);
IkReal x1823=(r01*sj5);
IkReal x1824=(cj1*x1813);
IkReal x1825=(sj1*x1814);
IkReal x1826=(cj3*cj4*sj5);
IkReal x1827=(cj1*x1814);
IkReal x1828=(sj1*x1813);
IkReal x1829=(cj3*cj4*cj5);
IkReal x1830=(x1825+x1824);
evalcond[0]=(((r00*x1820))+(((-1.0)*r02*x1819))+((r01*x1817))+x1830);
evalcond[1]=((((-1.0)*x1827))+x1828+((r21*x1817))+(((-1.0)*r22*x1819))+((r20*x1820)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1816))+(((-0.54)*x1828))+(((-1.0)*pz))+(((0.54)*x1827))+(((-1.0)*r20*x1818)));
evalcond[3]=((((-0.54)*x1825))+(((-0.54)*x1824))+(((-0.71)*sj1))+(((-1.0)*px))+(((-1.0)*r00*x1818))+(((0.15)*x1823)));
evalcond[4]=(((r22*x1815))+x1830+(((-1.0)*x1816*x1821))+((r21*x1829))+((r20*x1826))+((r20*x1822)));
evalcond[5]=((((-1.0)*x1821*x1823))+((r02*x1815))+(((-1.0)*x1828))+((r00*x1826))+((r00*x1822))+((r01*x1829))+x1827);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1831=(cj5*sj4);
IkReal x1832=(cj0*r01);
IkReal x1833=((0.54)*cj0);
IkReal x1834=(sj4*sj5);
CheckValue<IkReal> x1835=IKPowWithIntegerCheck(cj0,-2);
if(!x1835.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1835.value)*(((((0.54)*x1831*x1832))+((r00*x1833*x1834))+(((0.15)*sj5*x1832))+(((-1.0)*cj4*r02*x1833))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r21*x1831))+(((-0.76056338028169)*r20*x1834))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1835.value)*(((((0.54)*x1831*x1832))+((r00*x1833*x1834))+(((0.15)*sj5*x1832))+(((-1.0)*cj4*r02*x1833))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.76056338028169)*r21*x1831))+(((-0.76056338028169)*r20*x1834))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1835.value)*(((((0.54)*x1831*x1832))+((r00*x1833*x1834))+(((0.15)*sj5*x1832))+(((-1.0)*cj4*r02*x1833))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))))), ((((-0.76056338028169)*r21*x1831))+(((-0.76056338028169)*r20*x1834))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1836=IKsin(j1);
IkReal x1837=IKcos(j1);
IkReal x1838=((0.15)*sj5);
IkReal x1839=(r21*sj0);
IkReal x1840=((0.54)*r20);
IkReal x1841=(sj4*sj5);
IkReal x1842=(cj5*sj3);
IkReal x1843=(cj3*cj5);
IkReal x1844=((0.15)*cj5);
IkReal x1845=(r11*sj0);
IkReal x1846=((0.54)*r01);
IkReal x1847=((0.54)*r00);
IkReal x1848=(cj3*sj0);
IkReal x1849=(cj4*sj5);
IkReal x1850=((1.0)*py);
IkReal x1851=(cj0*r21);
IkReal x1852=((0.54)*sj4);
IkReal x1853=((0.54)*r10);
IkReal x1854=(cj0*r11);
IkReal x1855=(cj5*sj4);
IkReal x1856=((1.0)*px);
IkReal x1857=((0.54)*cj4);
IkReal x1858=(cj0*cj3);
IkReal x1859=((1.0)*pz);
IkReal x1860=((0.71)*x1836);
IkReal x1861=(cj0*x1857);
IkReal x1862=((0.54)*sj3*sj5);
IkReal x1863=((0.71)*x1837);
IkReal x1864=(cj0*sj0*x1860);
evalcond[0]=((((-1.0)*r21*x1838))+((r22*x1857))+pz+((r20*x1844))+(((-1.0)*x1840*x1841))+(((-1.0)*x1863))+(((-1.0)*cj5*r21*x1852)));
evalcond[1]=(((x1838*x1845))+((x1860*(sj0*sj0)))+((sj0*x1841*x1853))+(((-1.0)*r10*sj0*x1844))+((cj5*x1845*x1852))+(((-1.0)*sj0*x1850))+(((-1.0)*r12*sj0*x1857)));
evalcond[2]=((((-1.0)*cj0*r00*x1844))+((x1860*(cj0*cj0)))+(((-1.0)*r02*x1861))+((cj0*x1841*x1847))+((cj0*x1846*x1855))+(((-1.0)*cj0*x1856))+((cj0*r01*x1838)));
evalcond[3]=(((x1842*x1853))+((x1838*x1839))+((cj3*x1849*x1853))+(((-1.0)*r20*sj0*x1844))+(((-1.0)*r11*x1862))+((cj3*r12*x1852))+(((-1.0)*sj0*x1859))+((r11*x1843*x1857))+((sj0*x1863)));
evalcond[4]=((((-1.0)*cj0*r20*x1844))+((x1838*x1851))+((cj3*x1847*x1849))+((cj0*x1863))+(((-1.0)*cj0*x1859))+((x1842*x1847))+((cj3*r02*x1852))+((cj4*x1843*x1846))+(((-1.0)*sj3*sj5*x1846)));
evalcond[5]=((((-1.0)*x1839*x1843*x1857))+(((-1.0)*sj0*x1840*x1842))+(((-1.0)*r10*x1844))+((r11*x1838))+(((-1.0)*r22*x1848*x1852))+((sj0*x1860))+(((-1.0)*x1840*x1848*x1849))+(((-1.0)*x1850))+((x1839*x1862)));
evalcond[6]=(((r01*x1838))+((x1851*x1862))+(((-1.0)*r22*x1852*x1858))+(((-1.0)*cj0*x1840*x1842))+(((-1.0)*r00*x1844))+((cj0*x1860))+(((-1.0)*x1843*x1851*x1857))+(((-1.0)*x1840*x1849*x1858))+(((-1.0)*x1856)));
evalcond[7]=(((r01*sj0*x1838))+((cj5*x1852*x1854))+(((-1.0)*r12*x1861))+x1864+(((-1.0)*sj0*x1856))+(((-1.0)*r00*sj0*x1844))+((cj0*x1841*x1853)));
evalcond[8]=(((sj0*x1846*x1855))+((sj0*x1841*x1847))+((x1838*x1854))+(((-1.0)*cj0*r10*x1844))+(((-1.0)*cj0*x1850))+x1864+(((-1.0)*r02*sj0*x1857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1865=((1.0)*cj4);
IkReal x1866=(sj1*sj4);
IkReal x1867=(r20*sj5);
IkReal x1868=(cj5*r01);
IkReal x1869=(cj5*r21);
IkReal x1870=(cj1*sj4);
IkReal x1871=(r00*sj5);
if( IKabs((((x1866*x1871))+((x1866*x1868))+((x1869*x1870))+(((-1.0)*r02*sj1*x1865))+((x1867*x1870))+(((-1.0)*cj1*r22*x1865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1866*x1867))+(((-1.0)*x1866*x1869))+(((-1.0)*cj1*r02*x1865))+((cj4*r22*sj1))+((x1868*x1870))+((x1870*x1871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1866*x1871))+((x1866*x1868))+((x1869*x1870))+(((-1.0)*r02*sj1*x1865))+((x1867*x1870))+(((-1.0)*cj1*r22*x1865))))+IKsqr(((((-1.0)*x1866*x1867))+(((-1.0)*x1866*x1869))+(((-1.0)*cj1*r02*x1865))+((cj4*r22*sj1))+((x1868*x1870))+((x1870*x1871))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1866*x1871))+((x1866*x1868))+((x1869*x1870))+(((-1.0)*r02*sj1*x1865))+((x1867*x1870))+(((-1.0)*cj1*r22*x1865))), ((((-1.0)*x1866*x1867))+(((-1.0)*x1866*x1869))+(((-1.0)*cj1*r02*x1865))+((cj4*r22*sj1))+((x1868*x1870))+((x1870*x1871))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1872=IKsin(j2);
IkReal x1873=IKcos(j2);
IkReal x1874=(cj3*sj4);
IkReal x1875=(r21*sj5);
IkReal x1876=(cj5*sj4);
IkReal x1877=((0.15)*cj5);
IkReal x1878=((1.0)*cj4);
IkReal x1879=(sj4*sj5);
IkReal x1880=((1.0)*sj3);
IkReal x1881=(cj5*sj3);
IkReal x1882=(r01*sj5);
IkReal x1883=(sj1*x1873);
IkReal x1884=(cj1*x1873);
IkReal x1885=(cj3*cj4*sj5);
IkReal x1886=((0.54)*x1872);
IkReal x1887=(sj1*x1872);
IkReal x1888=(cj3*cj4*cj5);
IkReal x1889=((1.0)*cj1*x1872);
evalcond[0]=((((-1.0)*r22*x1878))+((r20*x1879))+x1883+((r21*x1876))+(((-1.0)*x1889)));
evalcond[1]=((((-1.0)*r02*x1878))+((r01*x1876))+((r00*x1879))+(((-1.0)*x1887))+(((-1.0)*x1884)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1875))+(((-0.54)*x1883))+((cj1*x1886))+(((-1.0)*pz))+(((-1.0)*r20*x1877)));
evalcond[3]=((((0.15)*x1882))+(((0.54)*x1884))+(((-1.0)*r00*x1877))+(((-1.0)*px))+(((0.71)*sj1))+((sj1*x1886)));
evalcond[4]=(((r21*x1888))+((r22*x1874))+((r20*x1885))+((r20*x1881))+(((-1.0)*x1875*x1880))+x1887+x1884);
evalcond[5]=((((-1.0)*x1880*x1882))+((r02*x1874))+((r00*x1881))+((r00*x1885))+((r01*x1888))+x1883+(((-1.0)*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1890=(cj4*r22);
IkReal x1891=((1.0)*cj1);
IkReal x1892=(r20*sj5);
IkReal x1893=(cj4*r02);
IkReal x1894=(cj5*r21);
IkReal x1895=(cj1*sj4);
IkReal x1896=(cj5*r01);
IkReal x1897=(r00*sj5);
IkReal x1898=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1897*x1898))+((x1892*x1895))+(((-1.0)*x1890*x1891))+((sj1*x1893))+(((-1.0)*x1896*x1898))+((x1894*x1895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1892*x1898))+(((-1.0)*sj4*x1891*x1897))+(((-1.0)*sj4*x1891*x1896))+((cj1*x1893))+(((-1.0)*x1894*x1898))+((sj1*x1890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1897*x1898))+((x1892*x1895))+(((-1.0)*x1890*x1891))+((sj1*x1893))+(((-1.0)*x1896*x1898))+((x1894*x1895))))+IKsqr(((((-1.0)*x1892*x1898))+(((-1.0)*sj4*x1891*x1897))+(((-1.0)*sj4*x1891*x1896))+((cj1*x1893))+(((-1.0)*x1894*x1898))+((sj1*x1890))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1897*x1898))+((x1892*x1895))+(((-1.0)*x1890*x1891))+((sj1*x1893))+(((-1.0)*x1896*x1898))+((x1894*x1895))), ((((-1.0)*x1892*x1898))+(((-1.0)*sj4*x1891*x1897))+(((-1.0)*sj4*x1891*x1896))+((cj1*x1893))+(((-1.0)*x1894*x1898))+((sj1*x1890))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1899=IKcos(j2);
IkReal x1900=IKsin(j2);
IkReal x1901=(cj3*sj4);
IkReal x1902=(r21*sj5);
IkReal x1903=(cj5*sj4);
IkReal x1904=((0.15)*cj5);
IkReal x1905=((1.0)*cj4);
IkReal x1906=(sj4*sj5);
IkReal x1907=((1.0)*sj3);
IkReal x1908=(cj5*sj3);
IkReal x1909=(r01*sj5);
IkReal x1910=(cj1*x1899);
IkReal x1911=(sj1*x1900);
IkReal x1912=(cj3*cj4*sj5);
IkReal x1913=(cj1*x1900);
IkReal x1914=(sj1*x1899);
IkReal x1915=(cj3*cj4*cj5);
IkReal x1916=(x1911+x1910);
evalcond[0]=(((r01*x1903))+((r00*x1906))+x1916+(((-1.0)*r02*x1905)));
evalcond[1]=((((-1.0)*r22*x1905))+((r21*x1903))+(((-1.0)*x1913))+x1914+((r20*x1906)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1902))+(((-1.0)*pz))+(((-1.0)*r20*x1904))+(((-0.54)*x1914))+(((0.54)*x1913)));
evalcond[3]=((((0.15)*x1909))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x1911))+(((-0.54)*x1910))+(((-1.0)*r00*x1904)));
evalcond[4]=((((-1.0)*x1902*x1907))+x1916+((r22*x1901))+((r21*x1915))+((r20*x1912))+((r20*x1908)));
evalcond[5]=((((-1.0)*x1907*x1909))+((r00*x1908))+((r00*x1912))+((r01*x1915))+(((-1.0)*x1914))+x1913+((r02*x1901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1917=((1.0)*cj4);
IkReal x1918=(r20*sj5);
IkReal x1919=((1.0)*sj1*sj4);
IkReal x1920=(cj1*cj5*sj4);
IkReal x1921=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((cj1*sj4*x1918))+(((-1.0)*cj1*r22*x1917))+(((-1.0)*r12*sj1*x1917))+((r21*x1920))+((sj1*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x1917))+((cj1*x1921))+(((-1.0)*cj5*r21*x1919))+((cj4*r22*sj1))+((r11*x1920))+(((-1.0)*x1918*x1919)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((cj1*sj4*x1918))+(((-1.0)*cj1*r22*x1917))+(((-1.0)*r12*sj1*x1917))+((r21*x1920))+((sj1*x1921))))+IKsqr(((((-1.0)*cj1*r12*x1917))+((cj1*x1921))+(((-1.0)*cj5*r21*x1919))+((cj4*r22*sj1))+((r11*x1920))+(((-1.0)*x1918*x1919))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((cj1*sj4*x1918))+(((-1.0)*cj1*r22*x1917))+(((-1.0)*r12*sj1*x1917))+((r21*x1920))+((sj1*x1921))), ((((-1.0)*cj1*r12*x1917))+((cj1*x1921))+(((-1.0)*cj5*r21*x1919))+((cj4*r22*sj1))+((r11*x1920))+(((-1.0)*x1918*x1919))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1922=IKsin(j2);
IkReal x1923=IKcos(j2);
IkReal x1924=((0.15)*sj5);
IkReal x1925=((0.15)*cj5);
IkReal x1926=(cj5*sj4);
IkReal x1927=(cj3*cj4);
IkReal x1928=(r20*sj5);
IkReal x1929=(cj3*sj4);
IkReal x1930=(r10*sj5);
IkReal x1931=((1.0)*cj4);
IkReal x1932=(cj5*sj3);
IkReal x1933=(sj1*x1923);
IkReal x1934=(cj1*x1923);
IkReal x1935=((0.54)*x1922);
IkReal x1936=((1.0)*sj3*sj5);
IkReal x1937=(sj1*x1922);
IkReal x1938=((1.0)*cj1*x1922);
evalcond[0]=(((sj4*x1928))+(((-1.0)*r22*x1931))+x1933+((r21*x1926))+(((-1.0)*x1938)));
evalcond[1]=((((-1.0)*x1934))+(((-1.0)*x1937))+((sj4*x1930))+(((-1.0)*r12*x1931))+((r11*x1926)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1935))+(((-1.0)*r20*x1925))+(((-1.0)*pz))+(((-0.54)*x1933))+((r21*x1924)));
evalcond[3]=((((-1.0)*py))+((sj1*x1935))+(((0.71)*sj1))+((r11*x1924))+(((-1.0)*r10*x1925))+(((0.54)*x1934)));
evalcond[4]=(((cj5*r21*x1927))+((x1927*x1928))+((r22*x1929))+(((-1.0)*r21*x1936))+x1937+x1934+((r20*x1932)));
evalcond[5]=(((cj5*r11*x1927))+x1933+(((-1.0)*r11*x1936))+((x1927*x1930))+((r10*x1932))+((r12*x1929))+(((-1.0)*x1938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1939=(cj1*cj4);
IkReal x1940=(r20*sj5);
IkReal x1941=(cj4*sj1);
IkReal x1942=(cj5*r21);
IkReal x1943=(cj1*sj4);
IkReal x1944=(cj5*r11);
IkReal x1945=(r10*sj5);
IkReal x1946=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*r22*x1939))+(((-1.0)*x1945*x1946))+((r12*x1941))+(((-1.0)*x1944*x1946))+((x1940*x1943))+((x1942*x1943)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1942*x1946))+(((-1.0)*x1943*x1945))+(((-1.0)*x1943*x1944))+(((-1.0)*x1940*x1946))+((r22*x1941))+((r12*x1939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1939))+(((-1.0)*x1945*x1946))+((r12*x1941))+(((-1.0)*x1944*x1946))+((x1940*x1943))+((x1942*x1943))))+IKsqr(((((-1.0)*x1942*x1946))+(((-1.0)*x1943*x1945))+(((-1.0)*x1943*x1944))+(((-1.0)*x1940*x1946))+((r22*x1941))+((r12*x1939))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1939))+(((-1.0)*x1945*x1946))+((r12*x1941))+(((-1.0)*x1944*x1946))+((x1940*x1943))+((x1942*x1943))), ((((-1.0)*x1942*x1946))+(((-1.0)*x1943*x1945))+(((-1.0)*x1943*x1944))+(((-1.0)*x1940*x1946))+((r22*x1941))+((r12*x1939))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1947=IKcos(j2);
IkReal x1948=IKsin(j2);
IkReal x1949=((0.15)*sj5);
IkReal x1950=((0.15)*cj5);
IkReal x1951=(r10*sj5);
IkReal x1952=(cj5*sj4);
IkReal x1953=(cj3*cj4);
IkReal x1954=(r20*sj5);
IkReal x1955=(cj3*sj4);
IkReal x1956=((1.0)*cj4);
IkReal x1957=(cj5*sj3);
IkReal x1958=(cj1*x1947);
IkReal x1959=(sj1*x1948);
IkReal x1960=(cj1*x1948);
IkReal x1961=(sj1*x1947);
IkReal x1962=((1.0)*sj3*sj5);
IkReal x1963=(x1959+x1958);
evalcond[0]=(((r11*x1952))+x1963+(((-1.0)*r12*x1956))+((sj4*x1951)));
evalcond[1]=((((-1.0)*r22*x1956))+(((-1.0)*x1960))+((r21*x1952))+x1961+((sj4*x1954)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*pz))+((r21*x1949))+(((-0.54)*x1961))+(((0.54)*x1960))+(((-1.0)*r20*x1950)));
evalcond[3]=(((r11*x1949))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x1950))+(((-0.54)*x1959))+(((-0.54)*x1958)));
evalcond[4]=(((r20*x1957))+((cj5*r21*x1953))+((r22*x1955))+x1963+((x1953*x1954))+(((-1.0)*r21*x1962)));
evalcond[5]=(((r12*x1955))+((x1951*x1953))+(((-1.0)*x1961))+((r10*x1957))+x1960+((cj5*r11*x1953))+(((-1.0)*r11*x1962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1964=(cj5*sj4);
IkReal x1965=((1.0)*sj0);
IkReal x1966=(cj4*r22);
IkReal x1967=(cj1*sj4*sj5);
IkReal x1968=((1.0)*cj4*r12);
IkReal x1969=(sj1*sj4*sj5);
CheckValue<IkReal> x1970=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1970.valid){
continue;
}
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal((((r20*sj0*x1967))+((r11*sj1*x1964))+((r10*x1969))+((cj1*r21*sj0*x1964))+(((-1.0)*sj1*x1968))+(((-1.0)*cj1*x1965*x1966)))),IkReal(((((-1.0)*r20*x1965*x1969))+((r10*x1967))+((sj0*sj1*x1966))+(((-1.0)*r21*sj1*x1964*x1965))+(((-1.0)*cj1*x1968))+((cj1*r11*x1964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1970.value)))+(x1971.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1972=IKsin(j2);
IkReal x1973=IKcos(j2);
IkReal x1974=(cj3*sj4);
IkReal x1975=(cj0*sj1);
IkReal x1976=((0.15)*sj5);
IkReal x1977=((0.15)*cj5);
IkReal x1978=(cj5*r01);
IkReal x1979=(cj3*cj4);
IkReal x1980=(cj5*sj4);
IkReal x1981=((1.0)*cj0);
IkReal x1982=(r20*sj5);
IkReal x1983=(sj0*sj1);
IkReal x1984=(r10*sj5);
IkReal x1985=((1.0)*cj4);
IkReal x1986=(cj5*sj3);
IkReal x1987=(r00*sj5);
IkReal x1988=(cj1*x1973);
IkReal x1989=((0.54)*x1972);
IkReal x1990=((1.0)*x1972);
IkReal x1991=((1.0)*sj3*sj5);
IkReal x1992=(sj1*x1973);
IkReal x1993=(sj0*x1990);
evalcond[0]=(((r21*x1980))+x1992+((sj4*x1982))+(((-1.0)*cj1*x1990))+(((-1.0)*r22*x1985)));
evalcond[1]=((((0.71)*cj1))+((r21*x1976))+(((-1.0)*pz))+((cj1*x1989))+(((-1.0)*r20*x1977))+(((-0.54)*x1992)));
evalcond[2]=((((-1.0)*x1981*x1988))+(((-1.0)*r02*x1985))+((sj4*x1987))+((sj4*x1978))+(((-1.0)*x1975*x1990)));
evalcond[3]=((((-1.0)*x1983*x1990))+(((-1.0)*sj0*x1988))+((r11*x1980))+(((-1.0)*r12*x1985))+((sj4*x1984)));
evalcond[4]=(((x1975*x1989))+(((0.54)*cj0*x1988))+(((-1.0)*r00*x1977))+(((-1.0)*px))+((r01*x1976))+(((0.71)*x1975)));
evalcond[5]=((((0.54)*sj0*x1988))+((r11*x1976))+(((-1.0)*py))+(((-1.0)*r10*x1977))+(((0.71)*x1983))+((x1983*x1989)));
evalcond[6]=((((-1.0)*r21*x1991))+((cj5*r21*x1979))+((sj1*x1972))+((r22*x1974))+((x1979*x1982))+x1988+((r20*x1986)));
evalcond[7]=(((r02*x1974))+(((-1.0)*cj1*x1972*x1981))+(((-1.0)*r01*x1991))+((x1979*x1987))+((x1973*x1975))+((r00*x1986))+((x1978*x1979)));
evalcond[8]=(((r12*x1974))+((r10*x1986))+((cj5*r11*x1979))+((x1979*x1984))+((x1973*x1983))+(((-1.0)*cj1*x1993))+(((-1.0)*r11*x1991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1994=(sj1*sj4);
IkReal x1995=(cj5*r01);
IkReal x1996=((1.0)*cj0);
IkReal x1997=(r20*sj5);
IkReal x1998=(cj4*r22);
IkReal x1999=(r00*sj5);
IkReal x2000=(cj1*sj4);
IkReal x2001=(cj5*r21);
IkReal x2002=((1.0)*cj4*r02);
CheckValue<IkReal> x2003 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2002))+(((-1.0)*cj1*x1996*x1998))+((x1994*x1999))+((x1994*x1995))+((cj0*x1997*x2000))+((cj0*x2000*x2001)))),IkReal(((((-1.0)*x1994*x1996*x1997))+((x1999*x2000))+((cj0*sj1*x1998))+(((-1.0)*cj1*x2002))+((x1995*x2000))+(((-1.0)*x1994*x1996*x2001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2003.valid){
continue;
}
CheckValue<IkReal> x2004=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2004.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2003.value)+(((1.5707963267949)*(x2004.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2005=IKsin(j2);
IkReal x2006=IKcos(j2);
IkReal x2007=(cj3*sj4);
IkReal x2008=(cj0*sj1);
IkReal x2009=((0.15)*sj5);
IkReal x2010=((0.15)*cj5);
IkReal x2011=(cj5*r01);
IkReal x2012=(cj3*cj4);
IkReal x2013=(cj5*sj4);
IkReal x2014=((1.0)*cj0);
IkReal x2015=(r20*sj5);
IkReal x2016=(sj0*sj1);
IkReal x2017=(r10*sj5);
IkReal x2018=((1.0)*cj4);
IkReal x2019=(cj5*sj3);
IkReal x2020=(r00*sj5);
IkReal x2021=(cj1*x2006);
IkReal x2022=((0.54)*x2005);
IkReal x2023=((1.0)*x2005);
IkReal x2024=((1.0)*sj3*sj5);
IkReal x2025=(sj1*x2006);
IkReal x2026=(sj0*x2023);
evalcond[0]=(((sj4*x2015))+x2025+(((-1.0)*cj1*x2023))+((r21*x2013))+(((-1.0)*r22*x2018)));
evalcond[1]=((((-1.0)*r20*x2010))+((r21*x2009))+(((0.71)*cj1))+(((-1.0)*pz))+((cj1*x2022))+(((-0.54)*x2025)));
evalcond[2]=(((sj4*x2011))+(((-1.0)*x2008*x2023))+(((-1.0)*x2014*x2021))+(((-1.0)*r02*x2018))+((sj4*x2020)));
evalcond[3]=(((sj4*x2017))+(((-1.0)*x2016*x2023))+(((-1.0)*sj0*x2021))+(((-1.0)*r12*x2018))+((r11*x2013)));
evalcond[4]=(((r01*x2009))+(((0.54)*cj0*x2021))+(((0.71)*x2008))+((x2008*x2022))+(((-1.0)*px))+(((-1.0)*r00*x2010)));
evalcond[5]=(((r11*x2009))+(((0.54)*sj0*x2021))+(((-1.0)*py))+(((0.71)*x2016))+((x2016*x2022))+(((-1.0)*r10*x2010)));
evalcond[6]=(((r22*x2007))+((cj5*r21*x2012))+((r20*x2019))+x2021+((sj1*x2005))+((x2012*x2015))+(((-1.0)*r21*x2024)));
evalcond[7]=((((-1.0)*r01*x2024))+((r00*x2019))+(((-1.0)*cj1*x2005*x2014))+((r02*x2007))+((x2011*x2012))+((x2012*x2020))+((x2006*x2008)));
evalcond[8]=(((r12*x2007))+((r10*x2019))+(((-1.0)*cj1*x2026))+(((-1.0)*r11*x2024))+((cj5*r11*x2012))+((x2012*x2017))+((x2006*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2027=(cj5*sj4);
IkReal x2028=((0.54)*sj0);
IkReal x2029=(sj4*sj5);
IkReal x2030=((0.15)*sj0);
CheckValue<IkReal> x2031=IKPowWithIntegerCheck(sj0,-2);
if(!x2031.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2031.value)*((((r11*x2027*x2028))+(((-1.0)*cj4*r12*x2028))+(((-1.0)*py*sj0))+((r10*x2028*x2029))+(((-1.0)*cj5*r10*x2030))+((r11*sj5*x2030)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r21*x2027))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r20*x2029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2031.value)*((((r11*x2027*x2028))+(((-1.0)*cj4*r12*x2028))+(((-1.0)*py*sj0))+((r10*x2028*x2029))+(((-1.0)*cj5*r10*x2030))+((r11*sj5*x2030))))))+IKsqr(((((-0.76056338028169)*r21*x2027))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r20*x2029))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2031.value)*((((r11*x2027*x2028))+(((-1.0)*cj4*r12*x2028))+(((-1.0)*py*sj0))+((r10*x2028*x2029))+(((-1.0)*cj5*r10*x2030))+((r11*sj5*x2030))))), ((((-0.76056338028169)*r21*x2027))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r20*x2029))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2032=IKsin(j1);
IkReal x2033=IKcos(j1);
IkReal x2034=((0.15)*sj5);
IkReal x2035=(r21*sj0);
IkReal x2036=((0.54)*r20);
IkReal x2037=(sj4*sj5);
IkReal x2038=(cj5*sj3);
IkReal x2039=(cj3*cj5);
IkReal x2040=((0.15)*cj5);
IkReal x2041=(r11*sj0);
IkReal x2042=((0.54)*r01);
IkReal x2043=((0.54)*r00);
IkReal x2044=(cj3*sj0);
IkReal x2045=(cj4*sj5);
IkReal x2046=((1.0)*py);
IkReal x2047=(cj0*r21);
IkReal x2048=((0.54)*sj4);
IkReal x2049=((0.54)*r10);
IkReal x2050=(cj0*r11);
IkReal x2051=(cj5*sj4);
IkReal x2052=((1.0)*px);
IkReal x2053=((0.54)*cj4);
IkReal x2054=(cj0*cj3);
IkReal x2055=((1.0)*pz);
IkReal x2056=((0.71)*x2032);
IkReal x2057=(cj0*x2053);
IkReal x2058=((0.54)*sj3*sj5);
IkReal x2059=((0.71)*x2033);
IkReal x2060=(cj0*sj0*x2056);
evalcond[0]=((((-1.0)*x2036*x2037))+((r22*x2053))+((r20*x2040))+(((-1.0)*cj5*r21*x2048))+pz+(((-1.0)*x2059))+(((-1.0)*r21*x2034)));
evalcond[1]=((((-1.0)*sj0*x2046))+(((-1.0)*r10*sj0*x2040))+((sj0*x2037*x2049))+((cj5*x2041*x2048))+(((-1.0)*r12*sj0*x2053))+((x2034*x2041))+((x2056*(sj0*sj0))));
evalcond[2]=((((-1.0)*r02*x2057))+(((-1.0)*cj0*r00*x2040))+(((-1.0)*cj0*x2052))+((cj0*r01*x2034))+((x2056*(cj0*cj0)))+((cj0*x2037*x2043))+((cj0*x2042*x2051)));
evalcond[3]=(((x2034*x2035))+((r11*x2039*x2053))+((cj3*x2045*x2049))+((sj0*x2059))+(((-1.0)*r11*x2058))+(((-1.0)*r20*sj0*x2040))+(((-1.0)*sj0*x2055))+((cj3*r12*x2048))+((x2038*x2049)));
evalcond[4]=(((cj4*x2039*x2042))+(((-1.0)*sj3*sj5*x2042))+((cj3*r02*x2048))+((cj0*x2059))+(((-1.0)*cj0*r20*x2040))+(((-1.0)*cj0*x2055))+((cj3*x2043*x2045))+((x2034*x2047))+((x2038*x2043)));
evalcond[5]=((((-1.0)*x2036*x2044*x2045))+(((-1.0)*r22*x2044*x2048))+(((-1.0)*x2046))+(((-1.0)*r10*x2040))+((sj0*x2056))+(((-1.0)*x2035*x2039*x2053))+((x2035*x2058))+(((-1.0)*sj0*x2036*x2038))+((r11*x2034)));
evalcond[6]=(((r01*x2034))+((x2047*x2058))+((cj0*x2056))+(((-1.0)*x2036*x2045*x2054))+(((-1.0)*r22*x2048*x2054))+(((-1.0)*x2052))+(((-1.0)*r00*x2040))+(((-1.0)*cj0*x2036*x2038))+(((-1.0)*x2039*x2047*x2053)));
evalcond[7]=(x2060+(((-1.0)*r12*x2057))+((r01*sj0*x2034))+((cj5*x2048*x2050))+(((-1.0)*sj0*x2052))+((cj0*x2037*x2049))+(((-1.0)*r00*sj0*x2040)));
evalcond[8]=(((sj0*x2037*x2043))+x2060+(((-1.0)*r02*sj0*x2053))+(((-1.0)*cj0*x2046))+((sj0*x2042*x2051))+(((-1.0)*cj0*r10*x2040))+((x2034*x2050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2061=((1.0)*cj4);
IkReal x2062=(sj1*sj4);
IkReal x2063=(r20*sj5);
IkReal x2064=(cj5*r01);
IkReal x2065=(cj5*r21);
IkReal x2066=(cj1*sj4);
IkReal x2067=(r00*sj5);
if( IKabs(((((-1.0)*r02*sj1*x2061))+(((-1.0)*cj1*r22*x2061))+((x2062*x2064))+((x2062*x2067))+((x2063*x2066))+((x2065*x2066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2066*x2067))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2061))+(((-1.0)*x2062*x2063))+(((-1.0)*x2062*x2065))+((x2064*x2066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x2061))+(((-1.0)*cj1*r22*x2061))+((x2062*x2064))+((x2062*x2067))+((x2063*x2066))+((x2065*x2066))))+IKsqr((((x2066*x2067))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2061))+(((-1.0)*x2062*x2063))+(((-1.0)*x2062*x2065))+((x2064*x2066))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*sj1*x2061))+(((-1.0)*cj1*r22*x2061))+((x2062*x2064))+((x2062*x2067))+((x2063*x2066))+((x2065*x2066))), (((x2066*x2067))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2061))+(((-1.0)*x2062*x2063))+(((-1.0)*x2062*x2065))+((x2064*x2066))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2068=IKsin(j2);
IkReal x2069=IKcos(j2);
IkReal x2070=(cj3*sj4);
IkReal x2071=(r21*sj5);
IkReal x2072=(cj5*sj4);
IkReal x2073=((0.15)*cj5);
IkReal x2074=((1.0)*cj4);
IkReal x2075=(sj4*sj5);
IkReal x2076=((1.0)*sj3);
IkReal x2077=(cj5*sj3);
IkReal x2078=(r01*sj5);
IkReal x2079=(sj1*x2069);
IkReal x2080=(cj1*x2069);
IkReal x2081=(cj3*cj4*sj5);
IkReal x2082=((0.54)*x2068);
IkReal x2083=(sj1*x2068);
IkReal x2084=(cj3*cj4*cj5);
IkReal x2085=((1.0)*cj1*x2068);
evalcond[0]=(x2079+(((-1.0)*r22*x2074))+(((-1.0)*x2085))+((r20*x2075))+((r21*x2072)));
evalcond[1]=((((-1.0)*r02*x2074))+(((-1.0)*x2080))+(((-1.0)*x2083))+((r01*x2072))+((r00*x2075)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2082))+(((-1.0)*pz))+(((-1.0)*r20*x2073))+(((-0.54)*x2079))+(((0.15)*x2071)));
evalcond[3]=(((sj1*x2082))+(((-1.0)*px))+(((-1.0)*r00*x2073))+(((0.15)*x2078))+(((0.54)*x2080))+(((0.71)*sj1)));
evalcond[4]=(((r22*x2070))+(((-1.0)*x2071*x2076))+x2083+x2080+((r20*x2081))+((r20*x2077))+((r21*x2084)));
evalcond[5]=(x2079+(((-1.0)*x2085))+(((-1.0)*x2076*x2078))+((r02*x2070))+((r01*x2084))+((r00*x2077))+((r00*x2081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2086=(cj4*r22);
IkReal x2087=((1.0)*cj1);
IkReal x2088=(r20*sj5);
IkReal x2089=(cj4*r02);
IkReal x2090=(cj5*r21);
IkReal x2091=(cj1*sj4);
IkReal x2092=(cj5*r01);
IkReal x2093=(r00*sj5);
IkReal x2094=((1.0)*sj1*sj4);
if( IKabs((((x2088*x2091))+((sj1*x2089))+(((-1.0)*x2086*x2087))+((x2090*x2091))+(((-1.0)*x2093*x2094))+(((-1.0)*x2092*x2094)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2090*x2094))+(((-1.0)*sj4*x2087*x2092))+(((-1.0)*sj4*x2087*x2093))+((sj1*x2086))+((cj1*x2089))+(((-1.0)*x2088*x2094)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2088*x2091))+((sj1*x2089))+(((-1.0)*x2086*x2087))+((x2090*x2091))+(((-1.0)*x2093*x2094))+(((-1.0)*x2092*x2094))))+IKsqr(((((-1.0)*x2090*x2094))+(((-1.0)*sj4*x2087*x2092))+(((-1.0)*sj4*x2087*x2093))+((sj1*x2086))+((cj1*x2089))+(((-1.0)*x2088*x2094))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2088*x2091))+((sj1*x2089))+(((-1.0)*x2086*x2087))+((x2090*x2091))+(((-1.0)*x2093*x2094))+(((-1.0)*x2092*x2094))), ((((-1.0)*x2090*x2094))+(((-1.0)*sj4*x2087*x2092))+(((-1.0)*sj4*x2087*x2093))+((sj1*x2086))+((cj1*x2089))+(((-1.0)*x2088*x2094))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2095=IKcos(j2);
IkReal x2096=IKsin(j2);
IkReal x2097=(cj3*sj4);
IkReal x2098=(r21*sj5);
IkReal x2099=(cj5*sj4);
IkReal x2100=((0.15)*cj5);
IkReal x2101=((1.0)*cj4);
IkReal x2102=(sj4*sj5);
IkReal x2103=((1.0)*sj3);
IkReal x2104=(cj5*sj3);
IkReal x2105=(r01*sj5);
IkReal x2106=(cj1*x2095);
IkReal x2107=(sj1*x2096);
IkReal x2108=(cj3*cj4*sj5);
IkReal x2109=(cj1*x2096);
IkReal x2110=(sj1*x2095);
IkReal x2111=(cj3*cj4*cj5);
IkReal x2112=(x2107+x2106);
evalcond[0]=((((-1.0)*r02*x2101))+((r01*x2099))+x2112+((r00*x2102)));
evalcond[1]=(((r20*x2102))+(((-1.0)*r22*x2101))+x2110+((r21*x2099))+(((-1.0)*x2109)));
evalcond[2]=((((-0.54)*x2110))+(((0.71)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2100))+(((0.54)*x2109))+(((0.15)*x2098)));
evalcond[3]=((((-0.54)*x2106))+(((-0.54)*x2107))+(((0.15)*x2105))+(((-1.0)*r00*x2100))+(((-0.71)*sj1))+(((-1.0)*px)));
evalcond[4]=(((r20*x2108))+((r20*x2104))+((r21*x2111))+x2112+((r22*x2097))+(((-1.0)*x2098*x2103)));
evalcond[5]=((((-1.0)*x2103*x2105))+((r01*x2111))+x2109+((r00*x2104))+((r00*x2108))+((r02*x2097))+(((-1.0)*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2113=((1.0)*cj4);
IkReal x2114=(r20*sj5);
IkReal x2115=((1.0)*sj1*sj4);
IkReal x2116=(cj1*cj5*sj4);
IkReal x2117=(r10*sj4*sj5);
if( IKabs((((cj1*sj4*x2114))+((cj5*r11*sj1*sj4))+((sj1*x2117))+((r21*x2116))+(((-1.0)*cj1*r22*x2113))+(((-1.0)*r12*sj1*x2113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2114*x2115))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2115))+(((-1.0)*cj1*r12*x2113))+((cj1*x2117))+((r11*x2116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*sj4*x2114))+((cj5*r11*sj1*sj4))+((sj1*x2117))+((r21*x2116))+(((-1.0)*cj1*r22*x2113))+(((-1.0)*r12*sj1*x2113))))+IKsqr(((((-1.0)*x2114*x2115))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2115))+(((-1.0)*cj1*r12*x2113))+((cj1*x2117))+((r11*x2116))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*sj4*x2114))+((cj5*r11*sj1*sj4))+((sj1*x2117))+((r21*x2116))+(((-1.0)*cj1*r22*x2113))+(((-1.0)*r12*sj1*x2113))), ((((-1.0)*x2114*x2115))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2115))+(((-1.0)*cj1*r12*x2113))+((cj1*x2117))+((r11*x2116))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2118=IKsin(j2);
IkReal x2119=IKcos(j2);
IkReal x2120=((0.15)*sj5);
IkReal x2121=((0.15)*cj5);
IkReal x2122=(cj5*sj4);
IkReal x2123=(cj3*cj4);
IkReal x2124=(r20*sj5);
IkReal x2125=(cj3*sj4);
IkReal x2126=(r10*sj5);
IkReal x2127=((1.0)*cj4);
IkReal x2128=(cj5*sj3);
IkReal x2129=(sj1*x2119);
IkReal x2130=(cj1*x2119);
IkReal x2131=((0.54)*x2118);
IkReal x2132=((1.0)*sj3*sj5);
IkReal x2133=(sj1*x2118);
IkReal x2134=((1.0)*cj1*x2118);
evalcond[0]=((((-1.0)*x2134))+(((-1.0)*r22*x2127))+x2129+((r21*x2122))+((sj4*x2124)));
evalcond[1]=(((r11*x2122))+(((-1.0)*r12*x2127))+((sj4*x2126))+(((-1.0)*x2133))+(((-1.0)*x2130)));
evalcond[2]=((((0.71)*cj1))+((r21*x2120))+(((-1.0)*pz))+(((-0.54)*x2129))+((cj1*x2131))+(((-1.0)*r20*x2121)));
evalcond[3]=((((-1.0)*r10*x2121))+((r11*x2120))+(((-1.0)*py))+(((0.54)*x2130))+(((0.71)*sj1))+((sj1*x2131)));
evalcond[4]=(((x2123*x2124))+((r20*x2128))+x2133+x2130+(((-1.0)*r21*x2132))+((r22*x2125))+((cj5*r21*x2123)));
evalcond[5]=(((x2123*x2126))+((cj5*r11*x2123))+(((-1.0)*x2134))+((r12*x2125))+(((-1.0)*r11*x2132))+((r10*x2128))+x2129);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2135=(cj1*cj4);
IkReal x2136=(r20*sj5);
IkReal x2137=(cj4*sj1);
IkReal x2138=(cj5*r21);
IkReal x2139=(cj1*sj4);
IkReal x2140=(cj5*r11);
IkReal x2141=(r10*sj5);
IkReal x2142=((1.0)*sj1*sj4);
if( IKabs((((x2136*x2139))+((r12*x2137))+(((-1.0)*x2140*x2142))+((x2138*x2139))+(((-1.0)*x2141*x2142))+(((-1.0)*r22*x2135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2138*x2142))+(((-1.0)*x2136*x2142))+((r12*x2135))+((r22*x2137))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2136*x2139))+((r12*x2137))+(((-1.0)*x2140*x2142))+((x2138*x2139))+(((-1.0)*x2141*x2142))+(((-1.0)*r22*x2135))))+IKsqr(((((-1.0)*x2138*x2142))+(((-1.0)*x2136*x2142))+((r12*x2135))+((r22*x2137))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2141))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2136*x2139))+((r12*x2137))+(((-1.0)*x2140*x2142))+((x2138*x2139))+(((-1.0)*x2141*x2142))+(((-1.0)*r22*x2135))), ((((-1.0)*x2138*x2142))+(((-1.0)*x2136*x2142))+((r12*x2135))+((r22*x2137))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2141))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2143=IKcos(j2);
IkReal x2144=IKsin(j2);
IkReal x2145=((0.15)*sj5);
IkReal x2146=((0.15)*cj5);
IkReal x2147=(r10*sj5);
IkReal x2148=(cj5*sj4);
IkReal x2149=(cj3*cj4);
IkReal x2150=(r20*sj5);
IkReal x2151=(cj3*sj4);
IkReal x2152=((1.0)*cj4);
IkReal x2153=(cj5*sj3);
IkReal x2154=(cj1*x2143);
IkReal x2155=(sj1*x2144);
IkReal x2156=(cj1*x2144);
IkReal x2157=(sj1*x2143);
IkReal x2158=((1.0)*sj3*sj5);
IkReal x2159=(x2154+x2155);
evalcond[0]=(((r11*x2148))+x2159+(((-1.0)*r12*x2152))+((sj4*x2147)));
evalcond[1]=(x2157+((sj4*x2150))+((r21*x2148))+(((-1.0)*r22*x2152))+(((-1.0)*x2156)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2157))+(((-1.0)*pz))+(((0.54)*x2156))+((r21*x2145))+(((-1.0)*r20*x2146)));
evalcond[3]=(((r11*x2145))+(((-0.71)*sj1))+(((-0.54)*x2155))+(((-0.54)*x2154))+(((-1.0)*py))+(((-1.0)*r10*x2146)));
evalcond[4]=(((x2149*x2150))+((r20*x2153))+x2159+((cj5*r21*x2149))+((r22*x2151))+(((-1.0)*r21*x2158)));
evalcond[5]=(x2156+(((-1.0)*r11*x2158))+((r10*x2153))+((cj5*r11*x2149))+((r12*x2151))+(((-1.0)*x2157))+((x2147*x2149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2160=(cj5*sj4);
IkReal x2161=((1.0)*sj0);
IkReal x2162=(cj4*r22);
IkReal x2163=(cj1*sj4*sj5);
IkReal x2164=((1.0)*cj4*r12);
IkReal x2165=(sj1*sj4*sj5);
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2166.valid){
continue;
}
CheckValue<IkReal> x2167 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2164))+((cj1*r21*sj0*x2160))+((r20*sj0*x2163))+(((-1.0)*cj1*x2161*x2162))+((r10*x2165))+((r11*sj1*x2160)))),IkReal((((sj0*sj1*x2162))+(((-1.0)*r21*sj1*x2160*x2161))+((cj1*r11*x2160))+(((-1.0)*r20*x2161*x2165))+((r10*x2163))+(((-1.0)*cj1*x2164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2167.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2166.value)))+(x2167.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2168=IKsin(j2);
IkReal x2169=IKcos(j2);
IkReal x2170=(cj3*sj4);
IkReal x2171=(cj0*sj1);
IkReal x2172=((0.15)*sj5);
IkReal x2173=((0.15)*cj5);
IkReal x2174=(cj5*r01);
IkReal x2175=(cj3*cj4);
IkReal x2176=(cj5*sj4);
IkReal x2177=((1.0)*cj0);
IkReal x2178=(r20*sj5);
IkReal x2179=(sj0*sj1);
IkReal x2180=(r10*sj5);
IkReal x2181=((1.0)*cj4);
IkReal x2182=(cj5*sj3);
IkReal x2183=(r00*sj5);
IkReal x2184=(cj1*x2169);
IkReal x2185=((0.54)*x2168);
IkReal x2186=((1.0)*x2168);
IkReal x2187=((1.0)*sj3*sj5);
IkReal x2188=(sj1*x2169);
IkReal x2189=(sj0*x2186);
evalcond[0]=(((r21*x2176))+x2188+(((-1.0)*r22*x2181))+(((-1.0)*cj1*x2186))+((sj4*x2178)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*r20*x2173))+((r21*x2172))+((cj1*x2185))+(((-1.0)*pz))+(((-0.54)*x2188)));
evalcond[2]=((((-1.0)*x2171*x2186))+(((-1.0)*r02*x2181))+(((-1.0)*x2177*x2184))+((sj4*x2183))+((sj4*x2174)));
evalcond[3]=(((r11*x2176))+(((-1.0)*x2179*x2186))+((sj4*x2180))+(((-1.0)*sj0*x2184))+(((-1.0)*r12*x2181)));
evalcond[4]=(((r01*x2172))+(((0.71)*x2171))+(((0.54)*cj0*x2184))+(((-1.0)*px))+(((-1.0)*r00*x2173))+((x2171*x2185)));
evalcond[5]=(((x2179*x2185))+((r11*x2172))+(((0.71)*x2179))+(((-1.0)*py))+(((0.54)*sj0*x2184))+(((-1.0)*r10*x2173)));
evalcond[6]=(((r22*x2170))+((sj1*x2168))+(((-1.0)*r21*x2187))+x2184+((r20*x2182))+((x2175*x2178))+((cj5*r21*x2175)));
evalcond[7]=(((x2174*x2175))+((r02*x2170))+((x2175*x2183))+(((-1.0)*cj1*x2168*x2177))+((x2169*x2171))+(((-1.0)*r01*x2187))+((r00*x2182)));
evalcond[8]=(((cj5*r11*x2175))+((x2175*x2180))+(((-1.0)*r11*x2187))+(((-1.0)*cj1*x2189))+((x2169*x2179))+((r12*x2170))+((r10*x2182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2190=(sj1*sj4);
IkReal x2191=(cj5*r01);
IkReal x2192=((1.0)*cj0);
IkReal x2193=(r20*sj5);
IkReal x2194=(cj4*r22);
IkReal x2195=(r00*sj5);
IkReal x2196=(cj1*sj4);
IkReal x2197=(cj5*r21);
IkReal x2198=((1.0)*cj4*r02);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x2192*x2194))+((x2190*x2195))+((x2190*x2191))+(((-1.0)*sj1*x2198))+((cj0*x2193*x2196))+((cj0*x2196*x2197)))),IkReal((((cj0*sj1*x2194))+((x2191*x2196))+(((-1.0)*x2190*x2192*x2193))+(((-1.0)*x2190*x2192*x2197))+(((-1.0)*cj1*x2198))+((x2195*x2196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2200.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2199.value)+(((1.5707963267949)*(x2200.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2201=IKsin(j2);
IkReal x2202=IKcos(j2);
IkReal x2203=(cj3*sj4);
IkReal x2204=(cj0*sj1);
IkReal x2205=((0.15)*sj5);
IkReal x2206=((0.15)*cj5);
IkReal x2207=(cj5*r01);
IkReal x2208=(cj3*cj4);
IkReal x2209=(cj5*sj4);
IkReal x2210=((1.0)*cj0);
IkReal x2211=(r20*sj5);
IkReal x2212=(sj0*sj1);
IkReal x2213=(r10*sj5);
IkReal x2214=((1.0)*cj4);
IkReal x2215=(cj5*sj3);
IkReal x2216=(r00*sj5);
IkReal x2217=(cj1*x2202);
IkReal x2218=((0.54)*x2201);
IkReal x2219=((1.0)*x2201);
IkReal x2220=((1.0)*sj3*sj5);
IkReal x2221=(sj1*x2202);
IkReal x2222=(sj0*x2219);
evalcond[0]=(x2221+(((-1.0)*cj1*x2219))+(((-1.0)*r22*x2214))+((sj4*x2211))+((r21*x2209)));
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2221))+((cj1*x2218))+(((-1.0)*r20*x2206))+(((-1.0)*pz))+((r21*x2205)));
evalcond[2]=((((-1.0)*x2210*x2217))+(((-1.0)*x2204*x2219))+((sj4*x2207))+((sj4*x2216))+(((-1.0)*r02*x2214)));
evalcond[3]=((((-1.0)*sj0*x2217))+((r11*x2209))+(((-1.0)*r12*x2214))+((sj4*x2213))+(((-1.0)*x2212*x2219)));
evalcond[4]=(((r01*x2205))+(((-1.0)*px))+((x2204*x2218))+(((-1.0)*r00*x2206))+(((0.54)*cj0*x2217))+(((0.71)*x2204)));
evalcond[5]=((((0.54)*sj0*x2217))+(((-1.0)*r10*x2206))+((r11*x2205))+(((-1.0)*py))+((x2212*x2218))+(((0.71)*x2212)));
evalcond[6]=(((cj5*r21*x2208))+(((-1.0)*r21*x2220))+((r20*x2215))+x2217+((sj1*x2201))+((r22*x2203))+((x2208*x2211)));
evalcond[7]=(((x2202*x2204))+((r02*x2203))+((r00*x2215))+(((-1.0)*cj1*x2201*x2210))+(((-1.0)*r01*x2220))+((x2207*x2208))+((x2208*x2216)));
evalcond[8]=(((x2202*x2212))+((r12*x2203))+((cj5*r11*x2208))+(((-1.0)*r11*x2220))+((r10*x2215))+((x2208*x2213))+(((-1.0)*cj1*x2222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2223=(cj0*r21);
IkReal x2224=((1.0)*cj5);
IkReal x2225=((1.0)*cj0);
CheckValue<IkReal> x2226 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2224))+((sj5*x2223)))),IkReal(((((-1.0)*cj4*x2223*x2224))+(((-1.0)*r22*sj4*x2225))+(((-1.0)*cj4*r20*sj5*x2225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2226.valid){
continue;
}
CheckValue<IkReal> x2227=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((r00*sj4*sj5))+((cj5*r01*sj4)))),-1);
if(!x2227.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2226.value)+(((1.5707963267949)*(x2227.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2228=IKsin(j3);
IkReal x2229=IKcos(j3);
IkReal x2230=(sj4*x2228);
IkReal x2231=(sj5*x2229);
IkReal x2232=(cj4*cj5*x2228);
IkReal x2233=(cj4*sj5*x2228);
IkReal x2234=((1.0)*cj5*x2229);
evalcond[0]=((((-1.0)*r20*x2234))+((r22*x2230))+((r21*x2232))+((r21*x2231))+((r20*x2233)));
evalcond[1]=((((-1.0)*r10*x2234))+cj0+((r10*x2233))+((r11*x2232))+((r11*x2231))+((r12*x2230)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2230))+(((-1.0)*r00*x2234))+((r01*x2231))+((r01*x2232))+((r00*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2235=((0.76056338028169)*sj4);
IkReal x2236=((0.211267605633803)*sj5);
IkReal x2237=((0.76056338028169)*cj4);
IkReal x2238=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*sj5*x2235))+((r10*x2238))+(((-1.0)*cj5*r11*x2235))+(((-1.0)*r11*x2236))+(((1.40845070422535)*py))+((r12*x2237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2236))+(((-1.0)*cj5*r21*x2235))+(((-1.0)*r20*sj5*x2235))+((r22*x2237))+((r20*x2238))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj5*x2235))+((r10*x2238))+(((-1.0)*cj5*r11*x2235))+(((-1.0)*r11*x2236))+(((1.40845070422535)*py))+((r12*x2237))))+IKsqr(((((-1.0)*r21*x2236))+(((-1.0)*cj5*r21*x2235))+(((-1.0)*r20*sj5*x2235))+((r22*x2237))+((r20*x2238))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*sj5*x2235))+((r10*x2238))+(((-1.0)*cj5*r11*x2235))+(((-1.0)*r11*x2236))+(((1.40845070422535)*py))+((r12*x2237))), ((((-1.0)*r21*x2236))+(((-1.0)*cj5*r21*x2235))+(((-1.0)*r20*sj5*x2235))+((r22*x2237))+((r20*x2238))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2239=((1.0)*py);
IkReal x2240=((0.54)*sj5);
IkReal x2241=((0.15)*sj5);
IkReal x2242=(cj5*r10);
IkReal x2243=((0.54)*cj5);
IkReal x2244=(cj3*cj4);
IkReal x2245=((0.54)*r12);
IkReal x2246=(cj3*sj4);
IkReal x2247=((0.54)*r22);
IkReal x2248=((0.71)*(IKsin(j1)));
IkReal x2249=(r11*x2241);
IkReal x2250=((0.15)*x2242);
IkReal x2251=(r21*x2241);
IkReal x2252=((0.71)*(IKcos(j1)));
IkReal x2253=((0.15)*cj5*r20);
IkReal x2254=(x2239+x2250);
IkReal x2255=(x2252+x2251);
IkReal x2256=(x2248+x2249);
evalcond[0]=(x2253+(((-1.0)*x2255))+pz+(((-1.0)*r21*sj4*x2243))+((cj4*x2247))+(((-1.0)*r20*sj4*x2240)));
evalcond[1]=((((-1.0)*cj4*x2245))+x2256+((r10*sj4*x2240))+((r11*sj4*x2243))+(((-1.0)*x2254)));
evalcond[2]=(x2256+(((-1.0)*r20*sj3*x2243))+(((-1.0)*x2254))+(((-1.0)*r20*x2240*x2244))+(((-1.0)*x2246*x2247))+((r21*sj3*x2240))+(((-1.0)*r21*x2243*x2244)));
evalcond[3]=(x2255+(((0.54)*sj3*x2242))+(((-1.0)*x2253))+(((-1.0)*pz))+((r10*x2240*x2244))+(((-1.0)*r11*sj3*x2240))+((r11*x2243*x2244))+((x2245*x2246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2257=((1.0)*cj4);
IkReal x2258=(r20*sj5);
IkReal x2259=((1.0)*sj1*sj4);
IkReal x2260=(cj1*cj5*sj4);
IkReal x2261=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x2257))+((sj1*x2261))+((cj1*sj4*x2258))+((cj5*r11*sj1*sj4))+((r21*x2260))+(((-1.0)*cj1*r22*x2257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x2257))+((cj1*x2261))+(((-1.0)*x2258*x2259))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2259))+((r11*x2260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x2257))+((sj1*x2261))+((cj1*sj4*x2258))+((cj5*r11*sj1*sj4))+((r21*x2260))+(((-1.0)*cj1*r22*x2257))))+IKsqr(((((-1.0)*cj1*r12*x2257))+((cj1*x2261))+(((-1.0)*x2258*x2259))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2259))+((r11*x2260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x2257))+((sj1*x2261))+((cj1*sj4*x2258))+((cj5*r11*sj1*sj4))+((r21*x2260))+(((-1.0)*cj1*r22*x2257))), ((((-1.0)*cj1*r12*x2257))+((cj1*x2261))+(((-1.0)*x2258*x2259))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2259))+((r11*x2260))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2262=IKsin(j2);
IkReal x2263=IKcos(j2);
IkReal x2264=((0.15)*sj5);
IkReal x2265=((0.15)*cj5);
IkReal x2266=(cj5*sj4);
IkReal x2267=(cj3*cj4);
IkReal x2268=(r20*sj5);
IkReal x2269=(cj3*sj4);
IkReal x2270=(r10*sj5);
IkReal x2271=((1.0)*cj4);
IkReal x2272=(cj5*sj3);
IkReal x2273=(sj1*x2263);
IkReal x2274=(cj1*x2263);
IkReal x2275=((0.54)*x2262);
IkReal x2276=((1.0)*sj3*sj5);
IkReal x2277=(sj1*x2262);
IkReal x2278=((1.0)*cj1*x2262);
evalcond[0]=(((sj4*x2268))+x2273+((r21*x2266))+(((-1.0)*r22*x2271))+(((-1.0)*x2278)));
evalcond[1]=(((sj4*x2270))+((r11*x2266))+(((-1.0)*r12*x2271))+(((-1.0)*x2274))+(((-1.0)*x2277)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2275))+((r21*x2264))+(((-1.0)*r20*x2265))+(((-0.54)*x2273))+(((-1.0)*pz)));
evalcond[3]=(((sj1*x2275))+(((0.54)*x2274))+((r11*x2264))+(((-1.0)*py))+(((0.71)*sj1))+(((-1.0)*r10*x2265)));
evalcond[4]=(x2274+x2277+((cj5*r21*x2267))+(((-1.0)*r21*x2276))+((r22*x2269))+((r20*x2272))+((x2267*x2268)));
evalcond[5]=(x2273+((cj5*r11*x2267))+((r10*x2272))+((r12*x2269))+(((-1.0)*x2278))+((x2267*x2270))+(((-1.0)*r11*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2279=((0.76056338028169)*sj4);
IkReal x2280=((0.211267605633803)*sj5);
IkReal x2281=((0.76056338028169)*cj4);
IkReal x2282=((0.211267605633803)*cj5);
if( IKabs((((r11*x2280))+((r10*sj5*x2279))+(((-1.0)*r12*x2281))+(((-1.0)*r10*x2282))+((cj5*r11*x2279))+(((-1.40845070422535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x2279))+(((-1.0)*r20*sj5*x2279))+((r20*x2282))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2280))+((r22*x2281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2280))+((r10*sj5*x2279))+(((-1.0)*r12*x2281))+(((-1.0)*r10*x2282))+((cj5*r11*x2279))+(((-1.40845070422535)*py))))+IKsqr(((((-1.0)*cj5*r21*x2279))+(((-1.0)*r20*sj5*x2279))+((r20*x2282))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2280))+((r22*x2281))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x2280))+((r10*sj5*x2279))+(((-1.0)*r12*x2281))+(((-1.0)*r10*x2282))+((cj5*r11*x2279))+(((-1.40845070422535)*py))), ((((-1.0)*cj5*r21*x2279))+(((-1.0)*r20*sj5*x2279))+((r20*x2282))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2280))+((r22*x2281))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2283=(r21*sj5);
IkReal x2284=((0.54)*sj3);
IkReal x2285=(cj5*r10);
IkReal x2286=((0.54)*sj4);
IkReal x2287=(cj5*r11);
IkReal x2288=(r20*sj5);
IkReal x2289=(cj5*r20);
IkReal x2290=(cj5*r21);
IkReal x2291=((0.54)*cj4);
IkReal x2292=(r11*sj5);
IkReal x2293=(r10*sj5);
IkReal x2294=((0.15)*x2289);
IkReal x2295=((0.15)*x2283);
IkReal x2296=((0.71)*(IKcos(j1)));
IkReal x2297=((0.15)*x2292);
IkReal x2298=((0.71)*(IKsin(j1)));
IkReal x2299=((0.15)*x2285);
IkReal x2300=(x2294+pz);
IkReal x2301=(x2296+x2295);
IkReal x2302=(x2299+x2298);
evalcond[0]=(x2300+((r22*x2291))+(((-1.0)*x2286*x2290))+(((-1.0)*x2301))+(((-1.0)*x2286*x2288)));
evalcond[1]=(x2302+(((-1.0)*x2286*x2293))+py+(((-1.0)*x2286*x2287))+(((-1.0)*x2297))+((r12*x2291)));
evalcond[2]=(((cj3*x2287*x2291))+x2300+((cj3*r12*x2286))+(((-1.0)*x2301))+(((-1.0)*x2284*x2292))+((cj3*x2291*x2293))+((x2284*x2285)));
evalcond[3]=(x2297+(((-1.0)*x2302))+(((-1.0)*py))+((cj3*x2290*x2291))+((cj3*r22*x2286))+((cj3*x2288*x2291))+(((-1.0)*x2283*x2284))+((x2284*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2303=(cj1*cj4);
IkReal x2304=(r20*sj5);
IkReal x2305=(cj4*sj1);
IkReal x2306=(cj5*r21);
IkReal x2307=(cj1*sj4);
IkReal x2308=(cj5*r11);
IkReal x2309=(r10*sj5);
IkReal x2310=((1.0)*sj1*sj4);
if( IKabs((((r12*x2305))+((x2304*x2307))+(((-1.0)*x2309*x2310))+((x2306*x2307))+(((-1.0)*x2308*x2310))+(((-1.0)*r22*x2303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2303))+(((-1.0)*x2304*x2310))+(((-1.0)*x2307*x2309))+(((-1.0)*x2307*x2308))+((r22*x2305))+(((-1.0)*x2306*x2310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2305))+((x2304*x2307))+(((-1.0)*x2309*x2310))+((x2306*x2307))+(((-1.0)*x2308*x2310))+(((-1.0)*r22*x2303))))+IKsqr((((r12*x2303))+(((-1.0)*x2304*x2310))+(((-1.0)*x2307*x2309))+(((-1.0)*x2307*x2308))+((r22*x2305))+(((-1.0)*x2306*x2310))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x2305))+((x2304*x2307))+(((-1.0)*x2309*x2310))+((x2306*x2307))+(((-1.0)*x2308*x2310))+(((-1.0)*r22*x2303))), (((r12*x2303))+(((-1.0)*x2304*x2310))+(((-1.0)*x2307*x2309))+(((-1.0)*x2307*x2308))+((r22*x2305))+(((-1.0)*x2306*x2310))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2311=IKcos(j2);
IkReal x2312=IKsin(j2);
IkReal x2313=((0.15)*sj5);
IkReal x2314=((0.15)*cj5);
IkReal x2315=(r10*sj5);
IkReal x2316=(cj5*sj4);
IkReal x2317=(cj3*cj4);
IkReal x2318=(r20*sj5);
IkReal x2319=(cj3*sj4);
IkReal x2320=((1.0)*cj4);
IkReal x2321=(cj5*sj3);
IkReal x2322=(cj1*x2311);
IkReal x2323=(sj1*x2312);
IkReal x2324=(cj1*x2312);
IkReal x2325=(sj1*x2311);
IkReal x2326=((1.0)*sj3*sj5);
IkReal x2327=(x2323+x2322);
evalcond[0]=(x2327+((r11*x2316))+(((-1.0)*r12*x2320))+((sj4*x2315)));
evalcond[1]=(((r21*x2316))+(((-1.0)*r22*x2320))+x2325+((sj4*x2318))+(((-1.0)*x2324)));
evalcond[2]=((((-1.0)*r20*x2314))+(((0.71)*cj1))+(((-0.54)*x2325))+((r21*x2313))+(((0.54)*x2324))+(((-1.0)*pz)));
evalcond[3]=((((-0.54)*x2323))+(((-0.54)*x2322))+((r11*x2313))+(((-1.0)*r10*x2314))+(((-0.71)*sj1))+(((-1.0)*py)));
evalcond[4]=(((x2317*x2318))+x2327+((r22*x2319))+((cj5*r21*x2317))+((r20*x2321))+(((-1.0)*r21*x2326)));
evalcond[5]=(((r10*x2321))+((cj5*r11*x2317))+((x2315*x2317))+x2324+((r12*x2319))+(((-1.0)*r11*x2326))+(((-1.0)*x2325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2328=((0.76056338028169)*sj4);
IkReal x2329=((0.211267605633803)*sj5);
IkReal x2330=((0.76056338028169)*cj4);
IkReal x2331=((0.211267605633803)*cj5);
if( IKabs((((r02*x2330))+(((-1.0)*r00*sj5*x2328))+(((-1.0)*cj5*r01*x2328))+((r00*x2331))+(((1.40845070422535)*px))+(((-1.0)*r01*x2329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x2328))+((r22*x2330))+(((-1.0)*cj5*r21*x2328))+(((1.40845070422535)*pz))+((r20*x2331))+(((-1.0)*r21*x2329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2330))+(((-1.0)*r00*sj5*x2328))+(((-1.0)*cj5*r01*x2328))+((r00*x2331))+(((1.40845070422535)*px))+(((-1.0)*r01*x2329))))+IKsqr(((((-1.0)*r20*sj5*x2328))+((r22*x2330))+(((-1.0)*cj5*r21*x2328))+(((1.40845070422535)*pz))+((r20*x2331))+(((-1.0)*r21*x2329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x2330))+(((-1.0)*r00*sj5*x2328))+(((-1.0)*cj5*r01*x2328))+((r00*x2331))+(((1.40845070422535)*px))+(((-1.0)*r01*x2329))), ((((-1.0)*r20*sj5*x2328))+((r22*x2330))+(((-1.0)*cj5*r21*x2328))+(((1.40845070422535)*pz))+((r20*x2331))+(((-1.0)*r21*x2329))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2332=((1.0)*px);
IkReal x2333=((0.54)*sj5);
IkReal x2334=((0.15)*sj5);
IkReal x2335=((0.54)*cj5);
IkReal x2336=(cj3*cj4);
IkReal x2337=((0.15)*cj5);
IkReal x2338=((0.54)*r02);
IkReal x2339=(cj3*sj4);
IkReal x2340=((0.54)*r22);
IkReal x2341=(r01*x2334);
IkReal x2342=((0.71)*(IKsin(j1)));
IkReal x2343=(r00*x2337);
IkReal x2344=(r21*x2334);
IkReal x2345=((0.71)*(IKcos(j1)));
IkReal x2346=(r20*x2337);
IkReal x2347=(x2332+x2343);
IkReal x2348=(x2345+x2344);
IkReal x2349=(x2341+x2342);
evalcond[0]=(x2346+(((-1.0)*r20*sj4*x2333))+pz+(((-1.0)*r21*sj4*x2335))+(((-1.0)*x2348))+((cj4*x2340)));
evalcond[1]=(x2349+((r01*sj4*x2335))+(((-1.0)*cj4*x2338))+(((-1.0)*x2347))+((r00*sj4*x2333)));
evalcond[2]=((((-1.0)*x2339*x2340))+(((-1.0)*r20*sj3*x2335))+(((-1.0)*r21*x2335*x2336))+x2349+((r21*sj3*x2333))+(((-1.0)*r20*x2333*x2336))+(((-1.0)*x2347)));
evalcond[3]=(((r00*sj3*x2335))+x2348+(((-1.0)*r01*sj3*x2333))+(((-1.0)*pz))+((r00*x2333*x2336))+((r01*x2335*x2336))+(((-1.0)*x2346))+((x2338*x2339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2350=((1.0)*cj4);
IkReal x2351=(sj1*sj4);
IkReal x2352=(r20*sj5);
IkReal x2353=(cj5*r01);
IkReal x2354=(cj5*r21);
IkReal x2355=(cj1*sj4);
IkReal x2356=(r00*sj5);
if( IKabs(((((-1.0)*cj1*r22*x2350))+((x2354*x2355))+((x2352*x2355))+((x2351*x2356))+((x2351*x2353))+(((-1.0)*r02*sj1*x2350)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2351*x2352))+(((-1.0)*x2351*x2354))+(((-1.0)*cj1*r02*x2350))+((cj4*r22*sj1))+((x2353*x2355))+((x2355*x2356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x2350))+((x2354*x2355))+((x2352*x2355))+((x2351*x2356))+((x2351*x2353))+(((-1.0)*r02*sj1*x2350))))+IKsqr(((((-1.0)*x2351*x2352))+(((-1.0)*x2351*x2354))+(((-1.0)*cj1*r02*x2350))+((cj4*r22*sj1))+((x2353*x2355))+((x2355*x2356))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x2350))+((x2354*x2355))+((x2352*x2355))+((x2351*x2356))+((x2351*x2353))+(((-1.0)*r02*sj1*x2350))), ((((-1.0)*x2351*x2352))+(((-1.0)*x2351*x2354))+(((-1.0)*cj1*r02*x2350))+((cj4*r22*sj1))+((x2353*x2355))+((x2355*x2356))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2357=IKsin(j2);
IkReal x2358=IKcos(j2);
IkReal x2359=(cj3*sj4);
IkReal x2360=(r21*sj5);
IkReal x2361=(cj5*sj4);
IkReal x2362=((0.15)*cj5);
IkReal x2363=((1.0)*cj4);
IkReal x2364=(sj4*sj5);
IkReal x2365=((1.0)*sj3);
IkReal x2366=(cj5*sj3);
IkReal x2367=(r01*sj5);
IkReal x2368=(sj1*x2358);
IkReal x2369=(cj1*x2358);
IkReal x2370=(cj3*cj4*sj5);
IkReal x2371=((0.54)*x2357);
IkReal x2372=(sj1*x2357);
IkReal x2373=(cj3*cj4*cj5);
IkReal x2374=((1.0)*cj1*x2357);
evalcond[0]=(((r20*x2364))+x2368+(((-1.0)*x2374))+(((-1.0)*r22*x2363))+((r21*x2361)));
evalcond[1]=((((-1.0)*x2372))+(((-1.0)*x2369))+((r01*x2361))+((r00*x2364))+(((-1.0)*r02*x2363)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2368))+(((-1.0)*r20*x2362))+(((-1.0)*pz))+((cj1*x2371))+(((0.15)*x2360)));
evalcond[3]=(((sj1*x2371))+(((-1.0)*r00*x2362))+(((-1.0)*px))+(((0.71)*sj1))+(((0.15)*x2367))+(((0.54)*x2369)));
evalcond[4]=(((r20*x2366))+((r20*x2370))+x2372+x2369+((r22*x2359))+(((-1.0)*x2360*x2365))+((r21*x2373)));
evalcond[5]=(x2368+(((-1.0)*x2374))+(((-1.0)*x2365*x2367))+((r02*x2359))+((r00*x2370))+((r01*x2373))+((r00*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2375=((0.76056338028169)*sj4);
IkReal x2376=((0.211267605633803)*sj5);
IkReal x2377=((0.76056338028169)*cj4);
IkReal x2378=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r02*x2377))+(((-1.0)*r00*x2378))+((cj5*r01*x2375))+(((-1.40845070422535)*px))+((r00*sj5*x2375))+((r01*x2376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x2378))+(((-1.0)*r21*x2376))+((r22*x2377))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2375))+(((-1.0)*r20*sj5*x2375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2377))+(((-1.0)*r00*x2378))+((cj5*r01*x2375))+(((-1.40845070422535)*px))+((r00*sj5*x2375))+((r01*x2376))))+IKsqr((((r20*x2378))+(((-1.0)*r21*x2376))+((r22*x2377))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2375))+(((-1.0)*r20*sj5*x2375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x2377))+(((-1.0)*r00*x2378))+((cj5*r01*x2375))+(((-1.40845070422535)*px))+((r00*sj5*x2375))+((r01*x2376))), (((r20*x2378))+(((-1.0)*r21*x2376))+((r22*x2377))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2375))+(((-1.0)*r20*sj5*x2375))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2379=((0.54)*sj5);
IkReal x2380=((0.15)*sj5);
IkReal x2381=((0.54)*cj5);
IkReal x2382=(cj3*cj4);
IkReal x2383=((0.15)*cj5);
IkReal x2384=((0.54)*r02);
IkReal x2385=(cj3*sj4);
IkReal x2386=((0.54)*r22);
IkReal x2387=(r20*x2383);
IkReal x2388=(r21*x2380);
IkReal x2389=((0.71)*(IKcos(j1)));
IkReal x2390=(r01*x2380);
IkReal x2391=((0.71)*(IKsin(j1)));
IkReal x2392=(r00*x2383);
IkReal x2393=(x2387+pz);
IkReal x2394=(x2389+x2388);
IkReal x2395=(x2392+x2391);
evalcond[0]=((((-1.0)*r20*sj4*x2379))+x2393+(((-1.0)*x2394))+(((-1.0)*r21*sj4*x2381))+((cj4*x2386)));
evalcond[1]=(x2395+(((-1.0)*r01*sj4*x2381))+(((-1.0)*x2390))+px+(((-1.0)*r00*sj4*x2379))+((cj4*x2384)));
evalcond[2]=(((x2384*x2385))+((r00*x2379*x2382))+x2393+((r00*sj3*x2381))+((r01*x2381*x2382))+(((-1.0)*x2394))+(((-1.0)*r01*sj3*x2379)));
evalcond[3]=(((x2385*x2386))+x2390+(((-1.0)*px))+((r21*x2381*x2382))+((r20*sj3*x2381))+(((-1.0)*x2395))+((r20*x2379*x2382))+(((-1.0)*r21*sj3*x2379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2396=(cj4*r22);
IkReal x2397=((1.0)*cj1);
IkReal x2398=(r20*sj5);
IkReal x2399=(cj4*r02);
IkReal x2400=(cj5*r21);
IkReal x2401=(cj1*sj4);
IkReal x2402=(cj5*r01);
IkReal x2403=(r00*sj5);
IkReal x2404=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2396*x2397))+(((-1.0)*x2403*x2404))+((x2398*x2401))+(((-1.0)*x2402*x2404))+((x2400*x2401))+((sj1*x2399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2400*x2404))+(((-1.0)*sj4*x2397*x2402))+(((-1.0)*sj4*x2397*x2403))+((cj1*x2399))+((sj1*x2396))+(((-1.0)*x2398*x2404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2396*x2397))+(((-1.0)*x2403*x2404))+((x2398*x2401))+(((-1.0)*x2402*x2404))+((x2400*x2401))+((sj1*x2399))))+IKsqr(((((-1.0)*x2400*x2404))+(((-1.0)*sj4*x2397*x2402))+(((-1.0)*sj4*x2397*x2403))+((cj1*x2399))+((sj1*x2396))+(((-1.0)*x2398*x2404))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2396*x2397))+(((-1.0)*x2403*x2404))+((x2398*x2401))+(((-1.0)*x2402*x2404))+((x2400*x2401))+((sj1*x2399))), ((((-1.0)*x2400*x2404))+(((-1.0)*sj4*x2397*x2402))+(((-1.0)*sj4*x2397*x2403))+((cj1*x2399))+((sj1*x2396))+(((-1.0)*x2398*x2404))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2405=IKcos(j2);
IkReal x2406=IKsin(j2);
IkReal x2407=(cj3*sj4);
IkReal x2408=(r21*sj5);
IkReal x2409=(cj5*sj4);
IkReal x2410=((0.15)*cj5);
IkReal x2411=((1.0)*cj4);
IkReal x2412=(sj4*sj5);
IkReal x2413=((1.0)*sj3);
IkReal x2414=(cj5*sj3);
IkReal x2415=(r01*sj5);
IkReal x2416=(cj1*x2405);
IkReal x2417=(sj1*x2406);
IkReal x2418=(cj3*cj4*sj5);
IkReal x2419=(cj1*x2406);
IkReal x2420=(sj1*x2405);
IkReal x2421=(cj3*cj4*cj5);
IkReal x2422=(x2417+x2416);
evalcond[0]=(x2422+((r01*x2409))+((r00*x2412))+(((-1.0)*r02*x2411)));
evalcond[1]=(x2420+(((-1.0)*x2419))+((r20*x2412))+((r21*x2409))+(((-1.0)*r22*x2411)));
evalcond[2]=((((-1.0)*r20*x2410))+(((0.71)*cj1))+(((-1.0)*pz))+(((0.54)*x2419))+(((0.15)*x2408))+(((-0.54)*x2420)));
evalcond[3]=((((-1.0)*r00*x2410))+(((-0.71)*sj1))+(((-0.54)*x2417))+(((-0.54)*x2416))+(((-1.0)*px))+(((0.15)*x2415)));
evalcond[4]=(x2422+((r21*x2421))+(((-1.0)*x2408*x2413))+((r22*x2407))+((r20*x2414))+((r20*x2418)));
evalcond[5]=(x2419+((r02*x2407))+((r00*x2414))+((r00*x2418))+((r01*x2421))+(((-1.0)*x2420))+(((-1.0)*x2413*x2415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2423=(cj5*sj4);
IkReal x2424=(cj0*r01);
IkReal x2425=((0.54)*cj0);
IkReal x2426=(sj4*sj5);
CheckValue<IkReal> x2427=IKPowWithIntegerCheck(cj0,-2);
if(!x2427.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2427.value)*(((((-1.0)*cj4*r02*x2425))+(((0.54)*x2423*x2424))+((r00*x2425*x2426))+(((-0.15)*cj0*cj5*r00))+(((0.15)*sj5*x2424))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x2423))+(((-0.76056338028169)*r20*x2426)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2427.value)*(((((-1.0)*cj4*r02*x2425))+(((0.54)*x2423*x2424))+((r00*x2425*x2426))+(((-0.15)*cj0*cj5*r00))+(((0.15)*sj5*x2424))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x2423))+(((-0.76056338028169)*r20*x2426))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2427.value)*(((((-1.0)*cj4*r02*x2425))+(((0.54)*x2423*x2424))+((r00*x2425*x2426))+(((-0.15)*cj0*cj5*r00))+(((0.15)*sj5*x2424))+(((-1.0)*cj0*px))))), ((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x2423))+(((-0.76056338028169)*r20*x2426))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2428=IKsin(j1);
IkReal x2429=IKcos(j1);
IkReal x2430=((0.15)*sj5);
IkReal x2431=(r21*sj0);
IkReal x2432=((0.54)*r20);
IkReal x2433=(sj4*sj5);
IkReal x2434=(cj5*sj3);
IkReal x2435=(cj3*cj5);
IkReal x2436=((0.15)*cj5);
IkReal x2437=(r11*sj0);
IkReal x2438=((0.54)*r01);
IkReal x2439=((0.54)*r00);
IkReal x2440=(cj3*sj0);
IkReal x2441=(cj4*sj5);
IkReal x2442=((1.0)*py);
IkReal x2443=(cj0*r21);
IkReal x2444=((0.54)*sj4);
IkReal x2445=((0.54)*r10);
IkReal x2446=(cj0*r11);
IkReal x2447=(cj5*sj4);
IkReal x2448=((1.0)*px);
IkReal x2449=((0.54)*cj4);
IkReal x2450=(cj0*cj3);
IkReal x2451=((1.0)*pz);
IkReal x2452=((0.71)*x2428);
IkReal x2453=(cj0*x2449);
IkReal x2454=((0.54)*sj3*sj5);
IkReal x2455=((0.71)*x2429);
IkReal x2456=(cj0*sj0*x2452);
evalcond[0]=(((r22*x2449))+((r20*x2436))+(((-1.0)*x2432*x2433))+pz+(((-1.0)*cj5*r21*x2444))+(((-1.0)*x2455))+(((-1.0)*r21*x2430)));
evalcond[1]=(((sj0*x2433*x2445))+(((-1.0)*sj0*x2442))+((cj5*x2437*x2444))+(((-1.0)*r12*sj0*x2449))+(((-1.0)*r10*sj0*x2436))+((x2452*(sj0*sj0)))+((x2430*x2437)));
evalcond[2]=(((cj0*x2433*x2439))+(((-1.0)*cj0*x2448))+(((-1.0)*cj0*r00*x2436))+((cj0*r01*x2430))+((cj0*x2438*x2447))+(((-1.0)*r02*x2453))+((x2452*(cj0*cj0))));
evalcond[3]=(((cj3*r12*x2444))+(((-1.0)*sj0*x2451))+((sj0*x2455))+(((-1.0)*r11*x2454))+((x2434*x2445))+((r11*x2435*x2449))+(((-1.0)*r20*sj0*x2436))+((x2430*x2431))+((cj3*x2441*x2445)));
evalcond[4]=(((cj4*x2435*x2438))+((x2430*x2443))+(((-1.0)*cj0*x2451))+(((-1.0)*cj0*r20*x2436))+((cj3*x2439*x2441))+((cj3*r02*x2444))+((cj0*x2455))+(((-1.0)*sj3*sj5*x2438))+((x2434*x2439)));
evalcond[5]=(((x2431*x2454))+((r11*x2430))+((sj0*x2452))+(((-1.0)*sj0*x2432*x2434))+(((-1.0)*r22*x2440*x2444))+(((-1.0)*x2431*x2435*x2449))+(((-1.0)*x2442))+(((-1.0)*x2432*x2440*x2441))+(((-1.0)*r10*x2436)));
evalcond[6]=((((-1.0)*r22*x2444*x2450))+(((-1.0)*cj0*x2432*x2434))+((r01*x2430))+((x2443*x2454))+(((-1.0)*x2432*x2441*x2450))+(((-1.0)*r00*x2436))+((cj0*x2452))+(((-1.0)*x2448))+(((-1.0)*x2435*x2443*x2449)));
evalcond[7]=((((-1.0)*r00*sj0*x2436))+x2456+(((-1.0)*sj0*x2448))+((cj0*x2433*x2445))+(((-1.0)*r12*x2453))+((cj5*x2444*x2446))+((r01*sj0*x2430)));
evalcond[8]=((((-1.0)*r02*sj0*x2449))+x2456+((x2430*x2446))+(((-1.0)*cj0*r10*x2436))+((sj0*x2438*x2447))+(((-1.0)*cj0*x2442))+((sj0*x2433*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2457=((1.0)*cj4);
IkReal x2458=(sj1*sj4);
IkReal x2459=(r20*sj5);
IkReal x2460=(cj5*r01);
IkReal x2461=(cj5*r21);
IkReal x2462=(cj1*sj4);
IkReal x2463=(r00*sj5);
if( IKabs(((((-1.0)*r02*sj1*x2457))+((x2458*x2460))+((x2458*x2463))+((x2459*x2462))+((x2461*x2462))+(((-1.0)*cj1*r22*x2457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2460*x2462))+(((-1.0)*cj1*r02*x2457))+(((-1.0)*x2458*x2461))+(((-1.0)*x2458*x2459))+((x2462*x2463))+((cj4*r22*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x2457))+((x2458*x2460))+((x2458*x2463))+((x2459*x2462))+((x2461*x2462))+(((-1.0)*cj1*r22*x2457))))+IKsqr((((x2460*x2462))+(((-1.0)*cj1*r02*x2457))+(((-1.0)*x2458*x2461))+(((-1.0)*x2458*x2459))+((x2462*x2463))+((cj4*r22*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*sj1*x2457))+((x2458*x2460))+((x2458*x2463))+((x2459*x2462))+((x2461*x2462))+(((-1.0)*cj1*r22*x2457))), (((x2460*x2462))+(((-1.0)*cj1*r02*x2457))+(((-1.0)*x2458*x2461))+(((-1.0)*x2458*x2459))+((x2462*x2463))+((cj4*r22*sj1))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2464=IKsin(j2);
IkReal x2465=IKcos(j2);
IkReal x2466=(cj3*sj4);
IkReal x2467=(r21*sj5);
IkReal x2468=(cj5*sj4);
IkReal x2469=((0.15)*cj5);
IkReal x2470=((1.0)*cj4);
IkReal x2471=(sj4*sj5);
IkReal x2472=((1.0)*sj3);
IkReal x2473=(cj5*sj3);
IkReal x2474=(r01*sj5);
IkReal x2475=(sj1*x2465);
IkReal x2476=(cj1*x2465);
IkReal x2477=(cj3*cj4*sj5);
IkReal x2478=((0.54)*x2464);
IkReal x2479=(sj1*x2464);
IkReal x2480=(cj3*cj4*cj5);
IkReal x2481=((1.0)*cj1*x2464);
evalcond[0]=(x2475+(((-1.0)*x2481))+((r21*x2468))+((r20*x2471))+(((-1.0)*r22*x2470)));
evalcond[1]=(((r01*x2468))+(((-1.0)*x2476))+(((-1.0)*x2479))+((r00*x2471))+(((-1.0)*r02*x2470)));
evalcond[2]=((((0.15)*x2467))+(((0.71)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2469))+(((-0.54)*x2475))+((cj1*x2478)));
evalcond[3]=((((0.15)*x2474))+(((-1.0)*r00*x2469))+(((-1.0)*px))+((sj1*x2478))+(((0.54)*x2476))+(((0.71)*sj1)));
evalcond[4]=(x2476+x2479+(((-1.0)*x2467*x2472))+((r20*x2477))+((r20*x2473))+((r22*x2466))+((r21*x2480)));
evalcond[5]=(((r01*x2480))+x2475+(((-1.0)*x2472*x2474))+(((-1.0)*x2481))+((r00*x2477))+((r00*x2473))+((r02*x2466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2482=(cj4*r22);
IkReal x2483=((1.0)*cj1);
IkReal x2484=(r20*sj5);
IkReal x2485=(cj4*r02);
IkReal x2486=(cj5*r21);
IkReal x2487=(cj1*sj4);
IkReal x2488=(cj5*r01);
IkReal x2489=(r00*sj5);
IkReal x2490=((1.0)*sj1*sj4);
if( IKabs((((x2484*x2487))+(((-1.0)*x2489*x2490))+(((-1.0)*x2482*x2483))+(((-1.0)*x2488*x2490))+((x2486*x2487))+((sj1*x2485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2485))+(((-1.0)*x2486*x2490))+(((-1.0)*sj4*x2483*x2489))+(((-1.0)*sj4*x2483*x2488))+(((-1.0)*x2484*x2490))+((sj1*x2482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2484*x2487))+(((-1.0)*x2489*x2490))+(((-1.0)*x2482*x2483))+(((-1.0)*x2488*x2490))+((x2486*x2487))+((sj1*x2485))))+IKsqr((((cj1*x2485))+(((-1.0)*x2486*x2490))+(((-1.0)*sj4*x2483*x2489))+(((-1.0)*sj4*x2483*x2488))+(((-1.0)*x2484*x2490))+((sj1*x2482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2484*x2487))+(((-1.0)*x2489*x2490))+(((-1.0)*x2482*x2483))+(((-1.0)*x2488*x2490))+((x2486*x2487))+((sj1*x2485))), (((cj1*x2485))+(((-1.0)*x2486*x2490))+(((-1.0)*sj4*x2483*x2489))+(((-1.0)*sj4*x2483*x2488))+(((-1.0)*x2484*x2490))+((sj1*x2482))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2491=IKcos(j2);
IkReal x2492=IKsin(j2);
IkReal x2493=(cj3*sj4);
IkReal x2494=(r21*sj5);
IkReal x2495=(cj5*sj4);
IkReal x2496=((0.15)*cj5);
IkReal x2497=((1.0)*cj4);
IkReal x2498=(sj4*sj5);
IkReal x2499=((1.0)*sj3);
IkReal x2500=(cj5*sj3);
IkReal x2501=(r01*sj5);
IkReal x2502=(cj1*x2491);
IkReal x2503=(sj1*x2492);
IkReal x2504=(cj3*cj4*sj5);
IkReal x2505=(cj1*x2492);
IkReal x2506=(sj1*x2491);
IkReal x2507=(cj3*cj4*cj5);
IkReal x2508=(x2503+x2502);
evalcond[0]=(((r00*x2498))+x2508+(((-1.0)*r02*x2497))+((r01*x2495)));
evalcond[1]=(x2506+(((-1.0)*x2505))+((r21*x2495))+((r20*x2498))+(((-1.0)*r22*x2497)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2506))+(((-1.0)*r20*x2496))+(((-1.0)*pz))+(((0.54)*x2505))+(((0.15)*x2494)));
evalcond[3]=((((0.15)*x2501))+(((-0.54)*x2503))+(((-0.54)*x2502))+(((-1.0)*r00*x2496))+(((-0.71)*sj1))+(((-1.0)*px)));
evalcond[4]=(x2508+(((-1.0)*x2494*x2499))+((r22*x2493))+((r21*x2507))+((r20*x2504))+((r20*x2500)));
evalcond[5]=(x2505+((r02*x2493))+(((-1.0)*x2499*x2501))+(((-1.0)*x2506))+((r00*x2504))+((r00*x2500))+((r01*x2507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2509=((1.0)*cj4);
IkReal x2510=(r20*sj5);
IkReal x2511=((1.0)*sj1*sj4);
IkReal x2512=(cj1*cj5*sj4);
IkReal x2513=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x2509))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x2509))+((cj1*sj4*x2510))+((sj1*x2513))+((r21*x2512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2512))+(((-1.0)*cj5*r21*x2511))+(((-1.0)*x2510*x2511))+((cj4*r22*sj1))+((cj1*x2513))+(((-1.0)*cj1*r12*x2509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x2509))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x2509))+((cj1*sj4*x2510))+((sj1*x2513))+((r21*x2512))))+IKsqr((((r11*x2512))+(((-1.0)*cj5*r21*x2511))+(((-1.0)*x2510*x2511))+((cj4*r22*sj1))+((cj1*x2513))+(((-1.0)*cj1*r12*x2509))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x2509))+((cj5*r11*sj1*sj4))+(((-1.0)*cj1*r22*x2509))+((cj1*sj4*x2510))+((sj1*x2513))+((r21*x2512))), (((r11*x2512))+(((-1.0)*cj5*r21*x2511))+(((-1.0)*x2510*x2511))+((cj4*r22*sj1))+((cj1*x2513))+(((-1.0)*cj1*r12*x2509))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2514=IKsin(j2);
IkReal x2515=IKcos(j2);
IkReal x2516=((0.15)*sj5);
IkReal x2517=((0.15)*cj5);
IkReal x2518=(cj5*sj4);
IkReal x2519=(cj3*cj4);
IkReal x2520=(r20*sj5);
IkReal x2521=(cj3*sj4);
IkReal x2522=(r10*sj5);
IkReal x2523=((1.0)*cj4);
IkReal x2524=(cj5*sj3);
IkReal x2525=(sj1*x2515);
IkReal x2526=(cj1*x2515);
IkReal x2527=((0.54)*x2514);
IkReal x2528=((1.0)*sj3*sj5);
IkReal x2529=(sj1*x2514);
IkReal x2530=((1.0)*cj1*x2514);
evalcond[0]=(((sj4*x2520))+x2525+(((-1.0)*x2530))+((r21*x2518))+(((-1.0)*r22*x2523)));
evalcond[1]=(((sj4*x2522))+((r11*x2518))+(((-1.0)*r12*x2523))+(((-1.0)*x2529))+(((-1.0)*x2526)));
evalcond[2]=(((cj1*x2527))+(((0.71)*cj1))+(((-1.0)*pz))+((r21*x2516))+(((-0.54)*x2525))+(((-1.0)*r20*x2517)));
evalcond[3]=(((r11*x2516))+(((0.54)*x2526))+(((-1.0)*py))+(((-1.0)*r10*x2517))+((sj1*x2527))+(((0.71)*sj1)));
evalcond[4]=(((r22*x2521))+x2526+x2529+((x2519*x2520))+(((-1.0)*r21*x2528))+((cj5*r21*x2519))+((r20*x2524)));
evalcond[5]=(x2525+((x2519*x2522))+(((-1.0)*r11*x2528))+((r12*x2521))+(((-1.0)*x2530))+((cj5*r11*x2519))+((r10*x2524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2531=(cj1*cj4);
IkReal x2532=(r20*sj5);
IkReal x2533=(cj4*sj1);
IkReal x2534=(cj5*r21);
IkReal x2535=(cj1*sj4);
IkReal x2536=(cj5*r11);
IkReal x2537=(r10*sj5);
IkReal x2538=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2537*x2538))+(((-1.0)*r22*x2531))+(((-1.0)*x2536*x2538))+((x2532*x2535))+((r12*x2533))+((x2534*x2535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2534*x2538))+(((-1.0)*x2535*x2536))+(((-1.0)*x2535*x2537))+((r22*x2533))+((r12*x2531))+(((-1.0)*x2532*x2538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2537*x2538))+(((-1.0)*r22*x2531))+(((-1.0)*x2536*x2538))+((x2532*x2535))+((r12*x2533))+((x2534*x2535))))+IKsqr(((((-1.0)*x2534*x2538))+(((-1.0)*x2535*x2536))+(((-1.0)*x2535*x2537))+((r22*x2533))+((r12*x2531))+(((-1.0)*x2532*x2538))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2537*x2538))+(((-1.0)*r22*x2531))+(((-1.0)*x2536*x2538))+((x2532*x2535))+((r12*x2533))+((x2534*x2535))), ((((-1.0)*x2534*x2538))+(((-1.0)*x2535*x2536))+(((-1.0)*x2535*x2537))+((r22*x2533))+((r12*x2531))+(((-1.0)*x2532*x2538))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2539=IKcos(j2);
IkReal x2540=IKsin(j2);
IkReal x2541=((0.15)*sj5);
IkReal x2542=((0.15)*cj5);
IkReal x2543=(r10*sj5);
IkReal x2544=(cj5*sj4);
IkReal x2545=(cj3*cj4);
IkReal x2546=(r20*sj5);
IkReal x2547=(cj3*sj4);
IkReal x2548=((1.0)*cj4);
IkReal x2549=(cj5*sj3);
IkReal x2550=(cj1*x2539);
IkReal x2551=(sj1*x2540);
IkReal x2552=(cj1*x2540);
IkReal x2553=(sj1*x2539);
IkReal x2554=((1.0)*sj3*sj5);
IkReal x2555=(x2550+x2551);
evalcond[0]=((((-1.0)*r12*x2548))+x2555+((r11*x2544))+((sj4*x2543)));
evalcond[1]=(x2553+((r21*x2544))+(((-1.0)*x2552))+(((-1.0)*r22*x2548))+((sj4*x2546)));
evalcond[2]=((((0.71)*cj1))+((r21*x2541))+(((0.54)*x2552))+(((-1.0)*pz))+(((-0.54)*x2553))+(((-1.0)*r20*x2542)));
evalcond[3]=((((-1.0)*r10*x2542))+((r11*x2541))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.54)*x2550))+(((-0.54)*x2551)));
evalcond[4]=(x2555+(((-1.0)*r21*x2554))+((r20*x2549))+((cj5*r21*x2545))+((x2545*x2546))+((r22*x2547)));
evalcond[5]=(x2552+(((-1.0)*r11*x2554))+((x2543*x2545))+((cj5*r11*x2545))+(((-1.0)*x2553))+((r12*x2547))+((r10*x2549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2556=(cj5*sj4);
IkReal x2557=((1.0)*sj0);
IkReal x2558=(cj4*r22);
IkReal x2559=(cj1*sj4*sj5);
IkReal x2560=((1.0)*cj4*r12);
IkReal x2561=(sj1*sj4*sj5);
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2562.valid){
continue;
}
CheckValue<IkReal> x2563 = IKatan2WithCheck(IkReal((((cj1*r21*sj0*x2556))+((r20*sj0*x2559))+((r10*x2561))+((r11*sj1*x2556))+(((-1.0)*sj1*x2560))+(((-1.0)*cj1*x2557*x2558)))),IkReal(((((-1.0)*cj1*x2560))+(((-1.0)*r20*x2557*x2561))+((cj1*r11*x2556))+((sj0*sj1*x2558))+(((-1.0)*r21*sj1*x2556*x2557))+((r10*x2559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2563.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2562.value)))+(x2563.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2564=IKsin(j2);
IkReal x2565=IKcos(j2);
IkReal x2566=(cj3*sj4);
IkReal x2567=(cj0*sj1);
IkReal x2568=((0.15)*sj5);
IkReal x2569=((0.15)*cj5);
IkReal x2570=(cj5*r01);
IkReal x2571=(cj3*cj4);
IkReal x2572=(cj5*sj4);
IkReal x2573=((1.0)*cj0);
IkReal x2574=(r20*sj5);
IkReal x2575=(sj0*sj1);
IkReal x2576=(r10*sj5);
IkReal x2577=((1.0)*cj4);
IkReal x2578=(cj5*sj3);
IkReal x2579=(r00*sj5);
IkReal x2580=(cj1*x2565);
IkReal x2581=((0.54)*x2564);
IkReal x2582=((1.0)*x2564);
IkReal x2583=((1.0)*sj3*sj5);
IkReal x2584=(sj1*x2565);
IkReal x2585=(sj0*x2582);
evalcond[0]=(((r21*x2572))+x2584+(((-1.0)*cj1*x2582))+(((-1.0)*r22*x2577))+((sj4*x2574)));
evalcond[1]=((((0.71)*cj1))+((cj1*x2581))+(((-1.0)*r20*x2569))+(((-0.54)*x2584))+(((-1.0)*pz))+((r21*x2568)));
evalcond[2]=((((-1.0)*x2573*x2580))+(((-1.0)*x2567*x2582))+(((-1.0)*r02*x2577))+((sj4*x2570))+((sj4*x2579)));
evalcond[3]=((((-1.0)*r12*x2577))+((r11*x2572))+(((-1.0)*sj0*x2580))+(((-1.0)*x2575*x2582))+((sj4*x2576)));
evalcond[4]=((((-1.0)*r00*x2569))+((x2567*x2581))+((r01*x2568))+(((0.71)*x2567))+(((0.54)*cj0*x2580))+(((-1.0)*px)));
evalcond[5]=((((0.54)*sj0*x2580))+(((-1.0)*py))+(((0.71)*x2575))+((x2575*x2581))+((r11*x2568))+(((-1.0)*r10*x2569)));
evalcond[6]=(((x2571*x2574))+((r22*x2566))+x2580+(((-1.0)*r21*x2583))+((r20*x2578))+((sj1*x2564))+((cj5*r21*x2571)));
evalcond[7]=(((x2571*x2579))+(((-1.0)*r01*x2583))+(((-1.0)*cj1*x2564*x2573))+((x2565*x2567))+((r00*x2578))+((x2570*x2571))+((r02*x2566)));
evalcond[8]=(((x2571*x2576))+((r10*x2578))+(((-1.0)*cj1*x2585))+((cj5*r11*x2571))+((r12*x2566))+((x2565*x2575))+(((-1.0)*r11*x2583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2586=(sj1*sj4);
IkReal x2587=(cj5*r01);
IkReal x2588=((1.0)*cj0);
IkReal x2589=(r20*sj5);
IkReal x2590=(cj4*r22);
IkReal x2591=(r00*sj5);
IkReal x2592=(cj1*sj4);
IkReal x2593=(cj5*r21);
IkReal x2594=((1.0)*cj4*r02);
CheckValue<IkReal> x2595=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2595.valid){
continue;
}
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal((((cj0*x2589*x2592))+((x2586*x2591))+((x2586*x2587))+(((-1.0)*cj1*x2588*x2590))+((cj0*x2592*x2593))+(((-1.0)*sj1*x2594)))),IkReal(((((-1.0)*cj1*x2594))+((cj0*sj1*x2590))+((x2591*x2592))+(((-1.0)*x2586*x2588*x2593))+(((-1.0)*x2586*x2588*x2589))+((x2587*x2592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2595.value)))+(x2596.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2597=IKsin(j2);
IkReal x2598=IKcos(j2);
IkReal x2599=(cj3*sj4);
IkReal x2600=(cj0*sj1);
IkReal x2601=((0.15)*sj5);
IkReal x2602=((0.15)*cj5);
IkReal x2603=(cj5*r01);
IkReal x2604=(cj3*cj4);
IkReal x2605=(cj5*sj4);
IkReal x2606=((1.0)*cj0);
IkReal x2607=(r20*sj5);
IkReal x2608=(sj0*sj1);
IkReal x2609=(r10*sj5);
IkReal x2610=((1.0)*cj4);
IkReal x2611=(cj5*sj3);
IkReal x2612=(r00*sj5);
IkReal x2613=(cj1*x2598);
IkReal x2614=((0.54)*x2597);
IkReal x2615=((1.0)*x2597);
IkReal x2616=((1.0)*sj3*sj5);
IkReal x2617=(sj1*x2598);
IkReal x2618=(sj0*x2615);
evalcond[0]=((((-1.0)*r22*x2610))+((sj4*x2607))+(((-1.0)*cj1*x2615))+((r21*x2605))+x2617);
evalcond[1]=((((0.71)*cj1))+(((-1.0)*pz))+((cj1*x2614))+((r21*x2601))+(((-0.54)*x2617))+(((-1.0)*r20*x2602)));
evalcond[2]=((((-1.0)*x2606*x2613))+(((-1.0)*x2600*x2615))+((sj4*x2612))+((sj4*x2603))+(((-1.0)*r02*x2610)));
evalcond[3]=((((-1.0)*x2608*x2615))+(((-1.0)*r12*x2610))+((sj4*x2609))+((r11*x2605))+(((-1.0)*sj0*x2613)));
evalcond[4]=((((0.71)*x2600))+(((-1.0)*px))+((x2600*x2614))+(((0.54)*cj0*x2613))+((r01*x2601))+(((-1.0)*r00*x2602)));
evalcond[5]=((((0.54)*sj0*x2613))+(((-1.0)*r10*x2602))+(((0.71)*x2608))+(((-1.0)*py))+((x2608*x2614))+((r11*x2601)));
evalcond[6]=((((-1.0)*r21*x2616))+((r22*x2599))+((cj5*r21*x2604))+((r20*x2611))+((sj1*x2597))+((x2604*x2607))+x2613);
evalcond[7]=(((x2603*x2604))+((r00*x2611))+(((-1.0)*r01*x2616))+(((-1.0)*cj1*x2597*x2606))+((x2598*x2600))+((x2604*x2612))+((r02*x2599)));
evalcond[8]=((((-1.0)*r11*x2616))+((cj5*r11*x2604))+((x2598*x2608))+((r12*x2599))+(((-1.0)*cj1*x2618))+((r10*x2611))+((x2604*x2609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2619=(cj5*sj4);
IkReal x2620=((0.54)*sj0);
IkReal x2621=(sj4*sj5);
IkReal x2622=((0.15)*sj0);
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(sj0,-2);
if(!x2623.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2623.value)*(((((-1.0)*cj5*r10*x2622))+((r11*sj5*x2622))+(((-1.0)*cj4*r12*x2620))+(((-1.0)*py*sj0))+((r11*x2619*x2620))+((r10*x2620*x2621)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r21*x2619))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x2621))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2623.value)*(((((-1.0)*cj5*r10*x2622))+((r11*sj5*x2622))+(((-1.0)*cj4*r12*x2620))+(((-1.0)*py*sj0))+((r11*x2619*x2620))+((r10*x2620*x2621))))))+IKsqr(((((-0.76056338028169)*r21*x2619))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x2621))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2623.value)*(((((-1.0)*cj5*r10*x2622))+((r11*sj5*x2622))+(((-1.0)*cj4*r12*x2620))+(((-1.0)*py*sj0))+((r11*x2619*x2620))+((r10*x2620*x2621))))), ((((-0.76056338028169)*r21*x2619))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x2621))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2624=IKsin(j1);
IkReal x2625=IKcos(j1);
IkReal x2626=((0.15)*sj5);
IkReal x2627=(r21*sj0);
IkReal x2628=((0.54)*r20);
IkReal x2629=(sj4*sj5);
IkReal x2630=(cj5*sj3);
IkReal x2631=(cj3*cj5);
IkReal x2632=((0.15)*cj5);
IkReal x2633=(r11*sj0);
IkReal x2634=((0.54)*r01);
IkReal x2635=((0.54)*r00);
IkReal x2636=(cj3*sj0);
IkReal x2637=(cj4*sj5);
IkReal x2638=((1.0)*py);
IkReal x2639=(cj0*r21);
IkReal x2640=((0.54)*sj4);
IkReal x2641=((0.54)*r10);
IkReal x2642=(cj0*r11);
IkReal x2643=(cj5*sj4);
IkReal x2644=((1.0)*px);
IkReal x2645=((0.54)*cj4);
IkReal x2646=(cj0*cj3);
IkReal x2647=((1.0)*pz);
IkReal x2648=((0.71)*x2624);
IkReal x2649=(cj0*x2645);
IkReal x2650=((0.54)*sj3*sj5);
IkReal x2651=((0.71)*x2625);
IkReal x2652=(cj0*sj0*x2648);
evalcond[0]=((((-1.0)*cj5*r21*x2640))+((r22*x2645))+pz+(((-1.0)*x2628*x2629))+((r20*x2632))+(((-1.0)*x2651))+(((-1.0)*r21*x2626)));
evalcond[1]=((((-1.0)*r12*sj0*x2645))+(((-1.0)*r10*sj0*x2632))+((x2648*(sj0*sj0)))+(((-1.0)*sj0*x2638))+((sj0*x2629*x2641))+((cj5*x2633*x2640))+((x2626*x2633)));
evalcond[2]=(((cj0*r01*x2626))+(((-1.0)*r02*x2649))+((cj0*x2634*x2643))+(((-1.0)*cj0*r00*x2632))+((x2648*(cj0*cj0)))+(((-1.0)*cj0*x2644))+((cj0*x2629*x2635)));
evalcond[3]=((((-1.0)*sj0*x2647))+((sj0*x2651))+(((-1.0)*r11*x2650))+((cj3*r12*x2640))+((x2626*x2627))+((r11*x2631*x2645))+((cj3*x2637*x2641))+((x2630*x2641))+(((-1.0)*r20*sj0*x2632)));
evalcond[4]=(((cj3*x2635*x2637))+((cj4*x2631*x2634))+(((-1.0)*sj3*sj5*x2634))+((cj0*x2651))+(((-1.0)*cj0*r20*x2632))+((x2630*x2635))+((cj3*r02*x2640))+(((-1.0)*cj0*x2647))+((x2626*x2639)));
evalcond[5]=(((sj0*x2648))+(((-1.0)*sj0*x2628*x2630))+(((-1.0)*r10*x2632))+(((-1.0)*x2628*x2636*x2637))+(((-1.0)*x2638))+(((-1.0)*r22*x2636*x2640))+(((-1.0)*x2627*x2631*x2645))+((x2627*x2650))+((r11*x2626)));
evalcond[6]=(((r01*x2626))+(((-1.0)*r22*x2640*x2646))+((x2639*x2650))+(((-1.0)*x2628*x2637*x2646))+(((-1.0)*r00*x2632))+((cj0*x2648))+(((-1.0)*cj0*x2628*x2630))+(((-1.0)*x2631*x2639*x2645))+(((-1.0)*x2644)));
evalcond[7]=((((-1.0)*sj0*x2644))+(((-1.0)*r00*sj0*x2632))+(((-1.0)*r12*x2649))+((cj5*x2640*x2642))+((r01*sj0*x2626))+((cj0*x2629*x2641))+x2652);
evalcond[8]=(((sj0*x2634*x2643))+(((-1.0)*cj0*r10*x2632))+((sj0*x2629*x2635))+(((-1.0)*cj0*x2638))+((x2626*x2642))+(((-1.0)*r02*sj0*x2645))+x2652);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2653=((1.0)*cj4);
IkReal x2654=(sj1*sj4);
IkReal x2655=(r20*sj5);
IkReal x2656=(cj5*r01);
IkReal x2657=(cj5*r21);
IkReal x2658=(cj1*sj4);
IkReal x2659=(r00*sj5);
if( IKabs((((x2657*x2658))+((x2655*x2658))+((x2654*x2659))+((x2654*x2656))+(((-1.0)*r02*sj1*x2653))+(((-1.0)*cj1*r22*x2653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2658*x2659))+(((-1.0)*x2654*x2657))+(((-1.0)*x2654*x2655))+((x2656*x2658))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2657*x2658))+((x2655*x2658))+((x2654*x2659))+((x2654*x2656))+(((-1.0)*r02*sj1*x2653))+(((-1.0)*cj1*r22*x2653))))+IKsqr((((x2658*x2659))+(((-1.0)*x2654*x2657))+(((-1.0)*x2654*x2655))+((x2656*x2658))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2653))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2657*x2658))+((x2655*x2658))+((x2654*x2659))+((x2654*x2656))+(((-1.0)*r02*sj1*x2653))+(((-1.0)*cj1*r22*x2653))), (((x2658*x2659))+(((-1.0)*x2654*x2657))+(((-1.0)*x2654*x2655))+((x2656*x2658))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2653))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2660=IKsin(j2);
IkReal x2661=IKcos(j2);
IkReal x2662=(cj3*sj4);
IkReal x2663=(r21*sj5);
IkReal x2664=(cj5*sj4);
IkReal x2665=((0.15)*cj5);
IkReal x2666=((1.0)*cj4);
IkReal x2667=(sj4*sj5);
IkReal x2668=((1.0)*sj3);
IkReal x2669=(cj5*sj3);
IkReal x2670=(r01*sj5);
IkReal x2671=(sj1*x2661);
IkReal x2672=(cj1*x2661);
IkReal x2673=(cj3*cj4*sj5);
IkReal x2674=((0.54)*x2660);
IkReal x2675=(sj1*x2660);
IkReal x2676=(cj3*cj4*cj5);
IkReal x2677=((1.0)*cj1*x2660);
evalcond[0]=(((r21*x2664))+(((-1.0)*x2677))+(((-1.0)*r22*x2666))+((r20*x2667))+x2671);
evalcond[1]=((((-1.0)*x2672))+(((-1.0)*x2675))+(((-1.0)*r02*x2666))+((r00*x2667))+((r01*x2664)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2674))+(((-0.54)*x2671))+(((-1.0)*pz))+(((-1.0)*r20*x2665))+(((0.15)*x2663)));
evalcond[3]=(((sj1*x2674))+(((-1.0)*r00*x2665))+(((0.54)*x2672))+(((-1.0)*px))+(((0.71)*sj1))+(((0.15)*x2670)));
evalcond[4]=(((r21*x2676))+((r22*x2662))+(((-1.0)*x2663*x2668))+((r20*x2673))+((r20*x2669))+x2672+x2675);
evalcond[5]=(((r02*x2662))+(((-1.0)*x2677))+((r00*x2669))+((r00*x2673))+((r01*x2676))+(((-1.0)*x2668*x2670))+x2671);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2678=(cj4*r22);
IkReal x2679=((1.0)*cj1);
IkReal x2680=(r20*sj5);
IkReal x2681=(cj4*r02);
IkReal x2682=(cj5*r21);
IkReal x2683=(cj1*sj4);
IkReal x2684=(cj5*r01);
IkReal x2685=(r00*sj5);
IkReal x2686=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2685*x2686))+(((-1.0)*x2684*x2686))+(((-1.0)*x2678*x2679))+((sj1*x2681))+((x2682*x2683))+((x2680*x2683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2678))+(((-1.0)*sj4*x2679*x2684))+(((-1.0)*sj4*x2679*x2685))+(((-1.0)*x2680*x2686))+(((-1.0)*x2682*x2686))+((cj1*x2681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2685*x2686))+(((-1.0)*x2684*x2686))+(((-1.0)*x2678*x2679))+((sj1*x2681))+((x2682*x2683))+((x2680*x2683))))+IKsqr((((sj1*x2678))+(((-1.0)*sj4*x2679*x2684))+(((-1.0)*sj4*x2679*x2685))+(((-1.0)*x2680*x2686))+(((-1.0)*x2682*x2686))+((cj1*x2681))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2685*x2686))+(((-1.0)*x2684*x2686))+(((-1.0)*x2678*x2679))+((sj1*x2681))+((x2682*x2683))+((x2680*x2683))), (((sj1*x2678))+(((-1.0)*sj4*x2679*x2684))+(((-1.0)*sj4*x2679*x2685))+(((-1.0)*x2680*x2686))+(((-1.0)*x2682*x2686))+((cj1*x2681))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2687=IKcos(j2);
IkReal x2688=IKsin(j2);
IkReal x2689=(cj3*sj4);
IkReal x2690=(r21*sj5);
IkReal x2691=(cj5*sj4);
IkReal x2692=((0.15)*cj5);
IkReal x2693=((1.0)*cj4);
IkReal x2694=(sj4*sj5);
IkReal x2695=((1.0)*sj3);
IkReal x2696=(cj5*sj3);
IkReal x2697=(r01*sj5);
IkReal x2698=(cj1*x2687);
IkReal x2699=(sj1*x2688);
IkReal x2700=(cj3*cj4*sj5);
IkReal x2701=(cj1*x2688);
IkReal x2702=(sj1*x2687);
IkReal x2703=(cj3*cj4*cj5);
IkReal x2704=(x2699+x2698);
evalcond[0]=(x2704+(((-1.0)*r02*x2693))+((r00*x2694))+((r01*x2691)));
evalcond[1]=(x2702+(((-1.0)*r22*x2693))+((r21*x2691))+((r20*x2694))+(((-1.0)*x2701)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x2701))+(((-1.0)*pz))+(((-0.54)*x2702))+(((0.15)*x2690))+(((-1.0)*r20*x2692)));
evalcond[3]=((((-0.71)*sj1))+(((-0.54)*x2699))+(((-0.54)*x2698))+(((-1.0)*px))+(((-1.0)*r00*x2692))+(((0.15)*x2697)));
evalcond[4]=(x2704+((r22*x2689))+((r20*x2700))+((r21*x2703))+((r20*x2696))+(((-1.0)*x2690*x2695)));
evalcond[5]=(((r02*x2689))+x2701+((r00*x2700))+((r01*x2703))+((r00*x2696))+(((-1.0)*x2695*x2697))+(((-1.0)*x2702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2705=((1.0)*cj4);
IkReal x2706=(r20*sj5);
IkReal x2707=((1.0)*sj1*sj4);
IkReal x2708=(cj1*cj5*sj4);
IkReal x2709=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x2705))+((cj5*r11*sj1*sj4))+((r21*x2708))+((cj1*sj4*x2706))+((sj1*x2709))+(((-1.0)*cj1*r22*x2705)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x2707))+((r11*x2708))+(((-1.0)*cj1*r12*x2705))+((cj4*r22*sj1))+(((-1.0)*x2706*x2707))+((cj1*x2709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x2705))+((cj5*r11*sj1*sj4))+((r21*x2708))+((cj1*sj4*x2706))+((sj1*x2709))+(((-1.0)*cj1*r22*x2705))))+IKsqr(((((-1.0)*cj5*r21*x2707))+((r11*x2708))+(((-1.0)*cj1*r12*x2705))+((cj4*r22*sj1))+(((-1.0)*x2706*x2707))+((cj1*x2709))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x2705))+((cj5*r11*sj1*sj4))+((r21*x2708))+((cj1*sj4*x2706))+((sj1*x2709))+(((-1.0)*cj1*r22*x2705))), ((((-1.0)*cj5*r21*x2707))+((r11*x2708))+(((-1.0)*cj1*r12*x2705))+((cj4*r22*sj1))+(((-1.0)*x2706*x2707))+((cj1*x2709))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2710=IKsin(j2);
IkReal x2711=IKcos(j2);
IkReal x2712=((0.15)*sj5);
IkReal x2713=((0.15)*cj5);
IkReal x2714=(cj5*sj4);
IkReal x2715=(cj3*cj4);
IkReal x2716=(r20*sj5);
IkReal x2717=(cj3*sj4);
IkReal x2718=(r10*sj5);
IkReal x2719=((1.0)*cj4);
IkReal x2720=(cj5*sj3);
IkReal x2721=(sj1*x2711);
IkReal x2722=(cj1*x2711);
IkReal x2723=((0.54)*x2710);
IkReal x2724=((1.0)*sj3*sj5);
IkReal x2725=(sj1*x2710);
IkReal x2726=((1.0)*cj1*x2710);
evalcond[0]=(x2721+(((-1.0)*x2726))+(((-1.0)*r22*x2719))+((sj4*x2716))+((r21*x2714)));
evalcond[1]=((((-1.0)*x2722))+(((-1.0)*x2725))+((r11*x2714))+((sj4*x2718))+(((-1.0)*r12*x2719)));
evalcond[2]=((((-0.54)*x2721))+(((0.71)*cj1))+(((-1.0)*r20*x2713))+((cj1*x2723))+(((-1.0)*pz))+((r21*x2712)));
evalcond[3]=((((-1.0)*r10*x2713))+(((-1.0)*py))+(((0.71)*sj1))+(((0.54)*x2722))+((r11*x2712))+((sj1*x2723)));
evalcond[4]=(x2725+x2722+(((-1.0)*r21*x2724))+((r22*x2717))+((r20*x2720))+((x2715*x2716))+((cj5*r21*x2715)));
evalcond[5]=(((r12*x2717))+x2721+(((-1.0)*r11*x2724))+((cj5*r11*x2715))+((x2715*x2718))+(((-1.0)*x2726))+((r10*x2720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2727=(cj1*cj4);
IkReal x2728=(r20*sj5);
IkReal x2729=(cj4*sj1);
IkReal x2730=(cj5*r21);
IkReal x2731=(cj1*sj4);
IkReal x2732=(cj5*r11);
IkReal x2733=(r10*sj5);
IkReal x2734=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2733*x2734))+((x2728*x2731))+((x2730*x2731))+(((-1.0)*r22*x2727))+(((-1.0)*x2732*x2734))+((r12*x2729)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2730*x2734))+((r22*x2729))+(((-1.0)*x2728*x2734))+(((-1.0)*x2731*x2733))+(((-1.0)*x2731*x2732))+((r12*x2727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2733*x2734))+((x2728*x2731))+((x2730*x2731))+(((-1.0)*r22*x2727))+(((-1.0)*x2732*x2734))+((r12*x2729))))+IKsqr(((((-1.0)*x2730*x2734))+((r22*x2729))+(((-1.0)*x2728*x2734))+(((-1.0)*x2731*x2733))+(((-1.0)*x2731*x2732))+((r12*x2727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2733*x2734))+((x2728*x2731))+((x2730*x2731))+(((-1.0)*r22*x2727))+(((-1.0)*x2732*x2734))+((r12*x2729))), ((((-1.0)*x2730*x2734))+((r22*x2729))+(((-1.0)*x2728*x2734))+(((-1.0)*x2731*x2733))+(((-1.0)*x2731*x2732))+((r12*x2727))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2735=IKcos(j2);
IkReal x2736=IKsin(j2);
IkReal x2737=((0.15)*sj5);
IkReal x2738=((0.15)*cj5);
IkReal x2739=(r10*sj5);
IkReal x2740=(cj5*sj4);
IkReal x2741=(cj3*cj4);
IkReal x2742=(r20*sj5);
IkReal x2743=(cj3*sj4);
IkReal x2744=((1.0)*cj4);
IkReal x2745=(cj5*sj3);
IkReal x2746=(cj1*x2735);
IkReal x2747=(sj1*x2736);
IkReal x2748=(cj1*x2736);
IkReal x2749=(sj1*x2735);
IkReal x2750=((1.0)*sj3*sj5);
IkReal x2751=(x2747+x2746);
evalcond[0]=(x2751+((r11*x2740))+(((-1.0)*r12*x2744))+((sj4*x2739)));
evalcond[1]=(x2749+((r21*x2740))+((sj4*x2742))+(((-1.0)*x2748))+(((-1.0)*r22*x2744)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2749))+((r21*x2737))+(((-1.0)*pz))+(((0.54)*x2748))+(((-1.0)*r20*x2738)));
evalcond[3]=((((-0.54)*x2746))+(((-0.54)*x2747))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x2738))+((r11*x2737)));
evalcond[4]=(x2751+((r22*x2743))+((cj5*r21*x2741))+((r20*x2745))+((x2741*x2742))+(((-1.0)*r21*x2750)));
evalcond[5]=(x2748+((r12*x2743))+((cj5*r11*x2741))+((x2739*x2741))+((r10*x2745))+(((-1.0)*r11*x2750))+(((-1.0)*x2749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2752=(cj5*sj4);
IkReal x2753=((1.0)*sj0);
IkReal x2754=(cj4*r22);
IkReal x2755=(cj1*sj4*sj5);
IkReal x2756=((1.0)*cj4*r12);
IkReal x2757=(sj1*sj4*sj5);
CheckValue<IkReal> x2758 = IKatan2WithCheck(IkReal((((r20*sj0*x2755))+(((-1.0)*cj1*x2753*x2754))+((r10*x2757))+((r11*sj1*x2752))+(((-1.0)*sj1*x2756))+((cj1*r21*sj0*x2752)))),IkReal((((sj0*sj1*x2754))+((cj1*r11*x2752))+((r10*x2755))+(((-1.0)*r21*sj1*x2752*x2753))+(((-1.0)*r20*x2753*x2757))+(((-1.0)*cj1*x2756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2758.valid){
continue;
}
CheckValue<IkReal> x2759=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2759.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2758.value)+(((1.5707963267949)*(x2759.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2760=IKsin(j2);
IkReal x2761=IKcos(j2);
IkReal x2762=(cj3*sj4);
IkReal x2763=(cj0*sj1);
IkReal x2764=((0.15)*sj5);
IkReal x2765=((0.15)*cj5);
IkReal x2766=(cj5*r01);
IkReal x2767=(cj3*cj4);
IkReal x2768=(cj5*sj4);
IkReal x2769=((1.0)*cj0);
IkReal x2770=(r20*sj5);
IkReal x2771=(sj0*sj1);
IkReal x2772=(r10*sj5);
IkReal x2773=((1.0)*cj4);
IkReal x2774=(cj5*sj3);
IkReal x2775=(r00*sj5);
IkReal x2776=(cj1*x2761);
IkReal x2777=((0.54)*x2760);
IkReal x2778=((1.0)*x2760);
IkReal x2779=((1.0)*sj3*sj5);
IkReal x2780=(sj1*x2761);
IkReal x2781=(sj0*x2778);
evalcond[0]=(x2780+((sj4*x2770))+(((-1.0)*cj1*x2778))+((r21*x2768))+(((-1.0)*r22*x2773)));
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2780))+(((-1.0)*pz))+(((-1.0)*r20*x2765))+((r21*x2764))+((cj1*x2777)));
evalcond[2]=((((-1.0)*x2763*x2778))+(((-1.0)*x2769*x2776))+((sj4*x2766))+(((-1.0)*r02*x2773))+((sj4*x2775)));
evalcond[3]=((((-1.0)*r12*x2773))+((sj4*x2772))+(((-1.0)*x2771*x2778))+(((-1.0)*sj0*x2776))+((r11*x2768)));
evalcond[4]=((((0.71)*x2763))+((x2763*x2777))+(((-1.0)*r00*x2765))+((r01*x2764))+(((0.54)*cj0*x2776))+(((-1.0)*px)));
evalcond[5]=(((x2771*x2777))+(((-1.0)*r10*x2765))+(((-1.0)*py))+(((0.54)*sj0*x2776))+(((0.71)*x2771))+((r11*x2764)));
evalcond[6]=(x2776+((cj5*r21*x2767))+((sj1*x2760))+((r20*x2774))+(((-1.0)*r21*x2779))+((x2767*x2770))+((r22*x2762)));
evalcond[7]=((((-1.0)*r01*x2779))+((r00*x2774))+(((-1.0)*cj1*x2760*x2769))+((x2761*x2763))+((x2767*x2775))+((r02*x2762))+((x2766*x2767)));
evalcond[8]=((((-1.0)*cj1*x2781))+((r12*x2762))+((x2761*x2771))+(((-1.0)*r11*x2779))+((r10*x2774))+((cj5*r11*x2767))+((x2767*x2772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2782=(sj1*sj4);
IkReal x2783=(cj5*r01);
IkReal x2784=((1.0)*cj0);
IkReal x2785=(r20*sj5);
IkReal x2786=(cj4*r22);
IkReal x2787=(r00*sj5);
IkReal x2788=(cj1*sj4);
IkReal x2789=(cj5*r21);
IkReal x2790=((1.0)*cj4*r02);
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2790))+((cj0*x2788*x2789))+((x2782*x2787))+((x2782*x2783))+((cj0*x2785*x2788))+(((-1.0)*cj1*x2784*x2786)))),IkReal((((cj0*sj1*x2786))+((x2787*x2788))+((x2783*x2788))+(((-1.0)*x2782*x2784*x2789))+(((-1.0)*x2782*x2784*x2785))+(((-1.0)*cj1*x2790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2792.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2791.value)+(((1.5707963267949)*(x2792.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2793=IKsin(j2);
IkReal x2794=IKcos(j2);
IkReal x2795=(cj3*sj4);
IkReal x2796=(cj0*sj1);
IkReal x2797=((0.15)*sj5);
IkReal x2798=((0.15)*cj5);
IkReal x2799=(cj5*r01);
IkReal x2800=(cj3*cj4);
IkReal x2801=(cj5*sj4);
IkReal x2802=((1.0)*cj0);
IkReal x2803=(r20*sj5);
IkReal x2804=(sj0*sj1);
IkReal x2805=(r10*sj5);
IkReal x2806=((1.0)*cj4);
IkReal x2807=(cj5*sj3);
IkReal x2808=(r00*sj5);
IkReal x2809=(cj1*x2794);
IkReal x2810=((0.54)*x2793);
IkReal x2811=((1.0)*x2793);
IkReal x2812=((1.0)*sj3*sj5);
IkReal x2813=(sj1*x2794);
IkReal x2814=(sj0*x2811);
evalcond[0]=(((sj4*x2803))+(((-1.0)*cj1*x2811))+(((-1.0)*r22*x2806))+((r21*x2801))+x2813);
evalcond[1]=((((0.71)*cj1))+((r21*x2797))+(((-1.0)*r20*x2798))+((cj1*x2810))+(((-1.0)*pz))+(((-0.54)*x2813)));
evalcond[2]=((((-1.0)*x2796*x2811))+((sj4*x2808))+(((-1.0)*x2802*x2809))+((sj4*x2799))+(((-1.0)*r02*x2806)));
evalcond[3]=((((-1.0)*x2804*x2811))+((sj4*x2805))+(((-1.0)*sj0*x2809))+(((-1.0)*r12*x2806))+((r11*x2801)));
evalcond[4]=((((0.71)*x2796))+(((-1.0)*px))+((r01*x2797))+(((-1.0)*r00*x2798))+(((0.54)*cj0*x2809))+((x2796*x2810)));
evalcond[5]=((((0.71)*x2804))+(((-1.0)*py))+((r11*x2797))+(((-1.0)*r10*x2798))+((x2804*x2810))+(((0.54)*sj0*x2809)));
evalcond[6]=(((r20*x2807))+((cj5*r21*x2800))+((sj1*x2793))+((r22*x2795))+(((-1.0)*r21*x2812))+x2809+((x2800*x2803)));
evalcond[7]=(((x2794*x2796))+((r02*x2795))+((x2799*x2800))+(((-1.0)*r01*x2812))+((x2800*x2808))+(((-1.0)*cj1*x2793*x2802))+((r00*x2807)));
evalcond[8]=((((-1.0)*r11*x2812))+((r10*x2807))+((cj5*r11*x2800))+(((-1.0)*cj1*x2814))+((r12*x2795))+((x2800*x2805))+((x2794*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - crx-10 (ecc9fecf2804f8aebe75dc877b3368b1)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
