/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-08-19 18:17:37.650183
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKcos(j[5]);
x12=((0.15)*x5);
x13=((1.0)*x5);
x14=((0.15)*x2);
x15=((1.0)*x10);
x16=((0.54)*x6);
x17=((0.54)*x0);
x18=((1.0)*x6);
x19=((1.0)*x7);
x20=((0.15)*x7);
x21=((0.369)*x0);
x22=((0.369)*x6);
x23=((1.0)*x9);
x24=(x0*x7);
x25=((-0.15)*x10);
x26=(x3*x4);
x27=(x0*x3);
x28=(x1*x2);
x29=(x2*x3);
x30=(x6*x7);
x31=((-1.0)*x10);
x32=(x1*x4);
x33=(x5*x9);
x34=(x3*x6);
x35=((-0.369)*x5);
x36=(x12*x6);
x37=(x0*x19);
x38=(x0*x12);
x39=(x26+x28);
x40=((((-1.0)*x29))+x32);
x41=((((-1.0)*x26))+(((-1.0)*x28)));
x42=(((x1*x14))+(((0.15)*x26)));
x43=(x40*x9);
x44=(x0*((x26+x28)));
x45=(x6*((x26+x28)));
x46=(x42*x7);
x47=(x10*x41);
x48=((((-1.0)*x2*x27))+(((1.0)*x0*x32)));
x49=(x18*(((((-1.0)*x29))+x32)));
x50=(x44*x9);
x51=(x45*x9);
x52=(x49*x5);
x53=(x49*x7);
x54=(x30+((x48*x5)));
x55=((((-1.0)*x24))+x52);
x56=((((-1.0)*x13*x47))+(((-1.0)*x23*x40)));
eerot[0]=(((x8*((((x48*x7))+(((-1.0)*x5*x6))))))+((x11*(((((-1.0)*x15*x54))+(((-1.0)*x23*x44)))))));
eerot[1]=(((x11*(((((-1.0)*x19*x48))+((x13*x6))))))+((x8*((((x31*x54))+(((-1.0)*x50)))))));
eerot[2]=(((x9*(((((-1.0)*x18*x7))+(((-1.0)*x13*x48))))))+((x10*x44)));
eetrans[0]=((((0.71)*x27))+((x9*((((x35*x48))+(((-0.369)*x30))))))+((x8*((((x25*x54))+(((-0.15)*x50))))))+((x17*x28))+((x17*x26))+x36+((x7*((((x14*x27))+(((-0.15)*x0*x32))))))+((x10*((((x21*x28))+((x21*x26))))))+((x11*(((((-1.0)*x20*x48))+x36)))));
eerot[3]=(((x8*((((x0*x5))+x53))))+(((-1.0)*x11*((((x15*(((((-1.0)*x37))+x52))))+((x23*x45)))))));
eerot[4]=(((x8*((((x31*x55))+(((-1.0)*x51))))))+((x11*(((((-1.0)*x0*x13))+(((-1.0)*x19*x49)))))));
eerot[5]=(((x10*x45))+((x9*((x37+(((-1.0)*x13*x49)))))));
IkReal x57=((1.0)*x38);
eetrans[1]=(((x10*((((x22*x28))+((x22*x26))))))+((x7*(((((-0.15)*x32*x6))+((x14*x34))))))+((x11*(((((-1.0)*x20*x49))+(((-1.0)*x57))))))+((x8*((((x25*x55))+(((-0.15)*x51))))))+((x16*x28))+((x16*x26))+(((0.71)*x34))+(((-1.0)*x57))+((x9*((((x35*x49))+((x21*x7)))))));
eerot[6]=(((x11*x56))+((x41*x7*x8)));
eerot[7]=(((x56*x8))+((x11*x39*x7)));
eerot[8]=(((x10*x40))+((x33*x39)));
eetrans[2]=((0.245)+(((-0.54)*x29))+((x11*x46))+((x33*(((((0.369)*x28))+(((0.369)*x26))))))+x46+((x10*(((((-0.369)*x29))+(((0.369)*x32))))))+((x8*(((((-0.15)*x43))+(((-1.0)*x12*x47))))))+(((0.54)*x32))+(((0.71)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r00);
new_r02=((-1.0)*r02);
new_px=((((-0.15)*r01))+px+(((-0.369)*r02)));
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r10);
new_r12=((-1.0)*r12);
new_py=((((-0.15)*r11))+py+(((-0.369)*r12)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r20);
new_r22=((-1.0)*r22);
new_pz=((-0.245)+(((-0.15)*r21))+pz+(((-0.369)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x58=((1.0)*px);
IkReal x59=((1.0)*pz);
IkReal x60=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x60))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x59)));
rxp0_2=((((-1.0)*r10*x58))+((py*r00)));
rxp1_0=((((-1.0)*r21*x60))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x59)));
rxp1_2=((((-1.0)*r11*x58))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x60)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x59)));
rxp2_2=((((-1.0)*r12*x58))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x61=((27.0)*npz);
IkReal x62=((25.0)*pp);
IkReal x63=((7.5)*npx);
IkReal x64=((2.0)*rxp1_2);
IkReal x65=((0.3)*r22);
IkReal x66=((0.15)*r21);
IkReal x67=((1.0)*rxp2_2);
IkReal x68=(x65+(((-1.0)*x64)));
IkReal x69=(x66+(((-1.0)*x67)));
IkReal x70=((-4.75)+x62);
IkReal x71=(x64+x65);
IkReal x72=((((-1.0)*x67))+(((-1.0)*x66)));
IkReal x73=(x70+x61);
IkReal x74=(x73+(((-1.0)*x63)));
IkReal x75=(x70+x63+(((-1.0)*x61)));
IkReal x76=(x70+(((-1.0)*x63))+(((-1.0)*x61)));
IkReal x77=(x73+x63);
IkReal gconst0=x77;
IkReal gconst1=x74;
IkReal gconst2=x77;
IkReal gconst3=x74;
IkReal gconst4=x68;
IkReal gconst5=x71;
IkReal gconst6=x68;
IkReal gconst7=x71;
IkReal gconst8=x72;
IkReal gconst9=x69;
IkReal gconst10=x75;
IkReal gconst11=x76;
IkReal gconst12=x72;
IkReal gconst13=x69;
IkReal gconst14=x75;
IkReal gconst15=x76;
IkReal x78=r20*r20;
IkReal x79=npy*npy;
IkReal x80=rxp2_2*rxp2_2;
IkReal x81=r21*r21;
IkReal x82=(gconst1*npy);
IkReal x83=((4.5)*r20);
IkReal x84=(gconst9*npx);
IkReal x85=(gconst12*npy);
IkReal x86=((32.4)*r20);
IkReal x87=((0.3)*rxp2_2);
IkReal x88=(gconst10*gconst9);
IkReal x89=(gconst14*gconst7);
IkReal x90=(gconst1*gconst2);
IkReal x91=(npx*npy);
IkReal x92=(gconst11*gconst14);
IkReal x93=(gconst11*gconst12);
IkReal x94=(gconst7*rxp2_2);
IkReal x95=((0.15)*gconst6);
IkReal x96=((54.0)*gconst9);
IkReal x97=(gconst1*rxp2_2);
IkReal x98=((1.0)*gconst15);
IkReal x99=(npy*rxp2_2);
IkReal x100=(gconst0*r21);
IkReal x101=(gconst11*npy);
IkReal x102=(gconst14*npy);
IkReal x103=((0.15)*r21);
IkReal x104=((60.0)*rxp0_2);
IkReal x105=(gconst5*rxp2_2);
IkReal x106=(gconst0*gconst3);
IkReal x107=((54.0)*gconst8);
IkReal x108=((1.0)*gconst3);
IkReal x109=(gconst11*gconst8);
IkReal x110=((0.15)*gconst2);
IkReal x111=((16.2)*r21);
IkReal x112=(gconst6*rxp2_2);
IkReal x113=(gconst12*gconst15);
IkReal x114=(gconst10*gconst5);
IkReal x115=(gconst2*npy);
IkReal x116=((1.0)*gconst0*gconst2);
IkReal x117=(gconst1*gconst3*r21);
IkReal x118=((0.09)*x78);
IkReal x119=((9.0)*r21*rxp0_2);
IkReal x120=((4.86)*x78);
IkReal x121=(gconst13*x107);
IkReal x122=((2.4)*r20*rxp0_2);
IkReal x123=((0.0225)*x81);
IkReal x124=((225.0)*x79);
IkReal x125=(r21*x79);
IkReal x126=((1.0)*gconst13*gconst14);
IkReal x127=((0.675)*r20*r21);
IkReal x128=((243.0)*r20*x79);
IkReal x129=((4.86)*npx*r20*r21);
IkReal x130=((108.0)*npy*x80);
op[0]=(((x113*x88))+(((-1.0)*gconst8*x93*x98))+(((-1.0)*gconst12*gconst9*x124))+((gconst13*gconst8*x92))+(((-1.0)*x118*x92))+((gconst9*x102*x83))+((gconst11*x83*x85))+(((-1.0)*x126*x88)));
op[1]=((((-1.0)*x101*x121))+((npx*x86*x93))+((x101*x120))+((gconst6*x101*x83))+(((-1.0)*gconst6*gconst9*x124))+((gconst12*x128))+(((-1.0)*gconst12*gconst5*x124))+((gconst9*x102*x104))+(((-1.0)*gconst6*x109*x98))+(((-1.0)*gconst4*x93*x98))+((x102*x121))+((x113*x114))+((gconst13*x102*x96))+(((-3240.0)*x84*x85))+(((-1.0)*gconst15*x107*x85))+(((-1.0)*x88*x89))+((gconst5*x102*x83))+((gconst15*gconst6*x88))+(((54.0)*x85*x88))+((x109*x89))+(((-1.0)*x114*x126))+(((-1.0)*gconst9*x128))+((gconst14*x84*x86))+(((-1.0)*x122*x92))+((gconst13*gconst4*x92))+(((-1.0)*gconst11*x107*x85))+(((-1.0)*x102*x120))+((gconst11*x104*x85))+(((-1.0)*gconst15*x85*x96))+(((54.0)*gconst13*npy*x88)));
op[2]=((((-2916.0)*gconst13*gconst8*(npy*npy)))+(((-11664.0)*gconst12*gconst9*(npx*npx)))+((gconst10*gconst15*gconst9*rxp2_2))+(((-16.0)*gconst11*gconst14*(rxp0_2*rxp0_2)))+((gconst11*gconst14*gconst4*gconst7))+(((-0.15)*gconst11*gconst12*gconst15*r21))+(((-33.75)*gconst9*r21*(npy*npy)))+(((60.0)*gconst11*gconst6*npy*rxp0_2))+((gconst11*gconst13*gconst14*rxp2_2))+(((243.0)*gconst6*r20*(npy*npy)))+(((-1.0)*gconst1*gconst12*gconst15*gconst8))+(((-3366.0)*gconst12*gconst9*(npy*npy)))+(((432.0)*gconst11*gconst12*npx*rxp0_2))+(((33.75)*gconst12*r21*(npy*npy)))+(((-54.0)*gconst12*gconst15*gconst4*npy))+(((4.5)*gconst11*npy*r20*rxp2_2))+(((-225.0)*gconst12*rxp2_2*(npy*npy)))+(((4.5)*gconst14*npy*r20*rxp2_2))+(((0.15)*gconst10*gconst15*gconst9*r21))+(((-3240.0)*gconst12*gconst5*npx*npy))+(((-54.0)*gconst11*gconst13*gconst4*npy))+(((-2916.0)*gconst13*gconst9*(npy*npy)))+(((-129.6)*gconst14*npy*r20*rxp0_2))+((gconst11*gconst14*gconst8*rxp2_2))+(((32.4)*gconst14*gconst5*npx*r20))+(((129.6)*gconst11*npy*r20*rxp0_2))+(((-225.0)*gconst9*rxp2_2*(npy*npy)))+(((60.0)*gconst14*gconst5*npy*rxp0_2))+((gconst0*gconst12*gconst15*gconst9))+(((0.15)*gconst10*gconst14*gconst9*r21))+(((4.5)*gconst1*gconst12*npy*r20))+((gconst11*gconst13*gconst2*gconst8))+(((0.18)*gconst11*gconst14*(r20*r20)))+(((0.675)*gconst11*npy*r20*r21))+((gconst1*gconst13*gconst14*gconst8))+(((-1749.6)*gconst9*npx*npy*r20))+(((3240.0)*gconst12*rxp0_2*(npy*npy)))+(((-0.675)*gconst14*npy*r20*r21))+(((-0.15)*gconst10*gconst12*gconst15*r21))+(((-243.0)*gconst5*r20*(npy*npy)))+(((-0.15)*gconst11*gconst15*gconst8*r21))+(((-0.15)*gconst11*gconst14*gconst8*r21))+(((54.0)*gconst10*gconst6*gconst9*npy))+(((54.0)*gconst14*gconst7*gconst8*npy))+(((-54.0)*gconst12*gconst15*gconst5*npy))+(((54.0)*gconst14*gconst7*gconst9*npy))+(((432.0)*gconst14*gconst9*npx*rxp0_2))+(((-225.0)*gconst5*gconst6*(npy*npy)))+((gconst10*gconst12*gconst3*gconst9))+(((0.15)*gconst11*gconst13*gconst14*r21))+(((-0.09)*gconst1*gconst14*(r20*r20)))+((gconst10*gconst15*gconst5*gconst6))+(((-3240.0)*gconst6*gconst9*npx*npy))+(((-1.0)*gconst10*gconst14*gconst9*rxp2_2))+(((-54.0)*gconst11*gconst6*gconst8*npy))+(((-1.0)*gconst11*gconst12*gconst15*rxp2_2))+((gconst10*gconst12*gconst15*rxp2_2))+(((262.44)*(npy*npy)*(r20*r20)))+(((4.5)*gconst2*gconst9*npy*r20))+(((-3240.0)*gconst9*rxp0_2*(npy*npy)))+(((32.4)*gconst11*gconst6*npx*r20))+(((-1.0)*gconst10*gconst13*gconst14*rxp2_2))+(((-54.0)*gconst11*gconst7*gconst8*npy))+(((-54.0)*gconst15*gconst6*gconst9*npy))+(((-54.0)*gconst11*gconst12*gconst4*npy))+(((54.0)*gconst10*gconst12*gconst5*npy))+(((-1.0)*gconst10*gconst13*gconst2*gconst9))+(((-0.09)*gconst11*gconst2*(r20*r20)))+(((-54.0)*gconst15*gconst6*gconst8*npy))+(((-1.0)*gconst10*gconst14*gconst5*gconst7))+(((-1.0)*gconst11*gconst12*gconst3*gconst8))+(((0.15)*gconst10*gconst13*gconst14*r21))+(((-1.0)*gconst11*gconst15*gconst8*rxp2_2))+(((54.0)*gconst13*gconst14*gconst5*npy))+(((54.0)*gconst13*gconst14*gconst4*npy))+(((-2916.0)*gconst12*gconst8*(npy*npy)))+(((-1.0)*gconst0*gconst13*gconst14*gconst9))+(((54.0)*gconst10*gconst7*gconst9*npy))+(((54.0)*gconst10*gconst13*gconst5*npy))+(((-1.0)*gconst11*gconst15*gconst4*gconst6))+(((1749.6)*gconst12*npx*npy*r20)));
op[3]=((((-8.1)*gconst11*gconst12*npy*r21))+(((60.0)*gconst14*npy*rxp0_2*rxp2_2))+(((-8.1)*gconst14*gconst8*npy*r21))+(((-1.0)*gconst0*gconst14*gconst7*gconst9))+(((0.15)*gconst10*gconst14*gconst7*r21))+(((-1.0)*gconst10*gconst14*gconst5*rxp2_2))+(((-0.15)*gconst10*gconst15*gconst6*r21))+(((-1.0)*gconst11*gconst15*gconst6*rxp2_2))+(((54.0)*gconst0*gconst12*gconst9*npy))+(((-1.0)*gconst1*gconst12*gconst15*gconst4))+(((-1749.6)*gconst5*npx*npy*r20))+((gconst11*gconst14*gconst7*rxp2_2))+((gconst10*gconst3*gconst6*gconst9))+(((-0.15)*gconst11*gconst14*gconst4*r21))+(((108.0)*gconst10*gconst9*npy*rxp2_2))+(((-486.0)*gconst9*npx*npy*r21))+(((432.0)*gconst14*gconst5*npx*rxp0_2))+(((-2916.0)*gconst6*gconst8*(npy*npy)))+(((72.9)*r20*r21*(npy*npy)))+(((-1.0)*gconst11*gconst3*gconst6*gconst8))+(((32.4)*gconst14*npx*r20*rxp2_2))+(((864.0)*gconst11*npy*(rxp0_2*rxp0_2)))+(((-2.4)*gconst11*gconst2*r20*rxp0_2))+(((-225.0)*gconst5*rxp2_2*(npy*npy)))+(((-3240.0)*gconst12*npx*npy*rxp2_2))+(((60.0)*gconst2*gconst9*npy*rxp0_2))+(((54.0)*gconst10*gconst5*gconst6*npy))+(((9.72)*gconst14*npy*(r20*r20)))+(((23328.0)*gconst12*npx*npy*rxp0_2))+(((-54.0)*gconst11*gconst4*gconst6*npy))+(((-4.86)*gconst2*npy*(r20*r20)))+(((-3240.0)*gconst5*gconst6*npx*npy))+((gconst10*gconst15*gconst5*rxp2_2))+(((2.4)*gconst11*gconst14*r20*rxp0_2))+(((32.4)*gconst11*npx*r20*rxp2_2))+((gconst0*gconst12*gconst15*gconst5))+(((0.15)*gconst11*gconst14*gconst7*r21))+(((-8.1)*gconst15*gconst9*npy*r21))+((gconst11*gconst13*gconst2*gconst4))+(((-1.0)*gconst10*gconst2*gconst7*gconst9))+(((-54.0)*gconst15*gconst8*npy*rxp2_2))+(((54.0)*gconst14*gconst8*npy*rxp2_2))+(((54.0)*gconst10*gconst12*npy*rxp2_2))+(((-1.0)*gconst10*gconst14*gconst7*rxp2_2))+(((0.15)*gconst10*gconst14*gconst5*r21))+((gconst1*gconst13*gconst14*gconst4))+(((-108.0)*gconst12*gconst15*npy*rxp2_2))+(((-2916.0)*gconst13*gconst4*(npy*npy)))+(((-2916.0)*gconst7*gconst8*(npy*npy)))+(((6998.4)*r20*rxp0_2*(npy*npy)))+(((4.86)*gconst1*npy*(r20*r20)))+(((-54.0)*gconst11*gconst13*npy*rxp2_2))+((gconst0*gconst15*gconst6*gconst9))+(((54.0)*gconst14*gconst5*gconst7*npy))+(((54.0)*gconst0*gconst13*gconst9*npy))+(((-0.15)*gconst11*gconst15*gconst6*r21))+(((-225.0)*gconst6*rxp2_2*(npy*npy)))+(((-32.4)*gconst14*gconst9*npx*r20))+(((-1.0)*gconst1*gconst15*gconst6*gconst8))+(((432.0)*gconst11*gconst6*npx*rxp0_2))+(((-32.4)*gconst11*gconst12*npx*r20))+(((-4.86)*gconst14*npx*r20*r21))+(((108.0)*gconst13*gconst14*npy*rxp2_2))+(((-3240.0)*gconst9*npx*npy*rxp2_2))+(((60.0)*gconst11*npy*rxp0_2*rxp2_2))+(((-8.1)*gconst10*gconst13*npy*r21))+(((-54.0)*gconst15*gconst4*gconst6*npy))+(((60.0)*gconst11*gconst12*npy*rxp0_2))+(((4.5)*gconst1*gconst6*npy*r20))+(((-108.0)*gconst11*gconst8*npy*rxp2_2))+(((-23328.0)*gconst9*npx*npy*rxp0_2))+(((54.0)*gconst13*gconst2*gconst9*npy))+(((4.5)*gconst2*gconst5*npy*r20))+((gconst11*gconst14*gconst4*rxp2_2))+(((-2.4)*gconst1*gconst14*r20*rxp0_2))+(((-8.1)*gconst15*gconst8*npy*r21))+(((-9.0)*gconst14*npy*r21*rxp0_2))+(((-33.75)*gconst5*r21*(npy*npy)))+(((54.0)*gconst13*gconst2*gconst8*npy))+((gconst10*gconst12*gconst3*gconst5))+(((-54.0)*gconst11*gconst12*npy*rxp2_2))+((gconst10*gconst15*gconst6*rxp2_2))+(((-2916.0)*gconst7*gconst9*(npy*npy)))+(((-54.0)*gconst11*gconst4*gconst7*npy))+(((33.75)*gconst6*r21*(npy*npy)))+(((-2916.0)*gconst13*gconst5*(npy*npy)))+((gconst11*gconst2*gconst7*gconst8))+(((54.0)*gconst14*gconst4*gconst7*npy))+(((-8.1)*gconst14*gconst9*npy*r21))+(((54.0)*gconst10*gconst13*npy*rxp2_2))+(((-11664.0)*gconst12*gconst5*(npx*npx)))+(((-11664.0)*gconst6*gconst9*(npx*npx)))+(((-54.0)*gconst15*gconst5*gconst6*npy))+(((32.4)*gconst1*gconst12*npx*r20))+(((-864.0)*gconst14*npy*(rxp0_2*rxp0_2)))+(((54.0)*gconst14*gconst9*npy*rxp2_2))+(((32.4)*gconst2*gconst9*npx*r20))+(((-9.72)*gconst11*npy*(r20*r20)))+(((-54.0)*gconst1*gconst12*gconst8*npy))+(((-3366.0)*gconst12*gconst5*(npy*npy)))+(((-54.0)*gconst15*gconst9*npy*rxp2_2))+(((-8.1)*gconst10*gconst12*npy*r21))+(((3240.0)*gconst6*rxp0_2*(npy*npy)))+(((60.0)*gconst14*gconst9*npy*rxp0_2))+(((4.86)*gconst11*npx*r20*r21))+(((-54.0)*gconst12*gconst3*gconst9*npy))+(((9.0)*gconst11*npy*r21*rxp0_2))+(((-1.0)*gconst11*gconst15*gconst4*rxp2_2))+(((-54.0)*gconst1*gconst13*gconst8*npy))+(((-1.0)*gconst10*gconst13*gconst2*gconst5))+(((-2916.0)*gconst12*gconst4*(npy*npy)))+(((60.0)*gconst1*gconst12*npy*rxp0_2))+(((-3240.0)*gconst12*gconst9*npx*npy))+(((-0.15)*gconst11*gconst15*gconst4*r21))+(((-3240.0)*gconst5*rxp0_2*(npy*npy)))+(((-54.0)*gconst12*gconst3*gconst8*npy))+(((-1.0)*gconst11*gconst12*gconst3*gconst4))+(((-3366.0)*gconst6*gconst9*(npy*npy)))+(((0.15)*gconst10*gconst15*gconst5*r21))+(((-8.1)*gconst11*gconst13*npy*r21))+(((486.0)*gconst12*npx*npy*r21))+(((-1.0)*gconst0*gconst13*gconst14*gconst5))+((gconst1*gconst14*gconst7*gconst8))+(((54.0)*gconst10*gconst5*gconst7*npy))+(((1749.6)*gconst6*npx*npy*r20)));
op[4]=((((-6282.0)*gconst9*rxp2_2*(npy*npy)))+(((60.0)*gconst2*gconst5*npy*rxp0_2))+(((-108.0)*gconst15*gconst6*npy*rxp2_2))+(((-129.6)*gconst11*npy*r20*rxp0_2))+(((-2916.0)*gconst4*gconst6*(npy*npy)))+((gconst0*gconst15*gconst9*rxp2_2))+(((-8.1)*gconst14*gconst5*npy*r21))+((gconst1*gconst14*gconst8*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst9*rxp2_2))+(((-67.5)*gconst9*r21*(npy*npy)))+(((60.0)*gconst11*gconst6*npy*rxp0_2))+(((-1.0)*gconst10*gconst2*gconst9*rxp2_2))+(((54.0)*gconst10*gconst7*npy*rxp2_2))+(((-5832.0)*gconst13*rxp2_2*(npy*npy)))+(((-0.15)*gconst1*gconst14*gconst8*r21))+(((-8.1)*gconst11*gconst7*npy*r21))+(((-1.0)*gconst10*gconst2*gconst5*gconst7))+(((67.5)*gconst12*r21*(npy*npy)))+(((-0.0225)*gconst11*gconst14*(r21*r21)))+(((64.8)*gconst11*npx*r21*rxp0_2))+(((-1.0)*gconst1*gconst12*gconst3*gconst8))+(((32.4)*gconst2*gconst5*npx*r20))+(((0.15)*gconst10*gconst2*gconst9*r21))+(((-225.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-3240.0)*gconst12*gconst5*npx*npy))+(((0.15)*gconst0*gconst15*gconst9*r21))+(((-3240.0)*gconst6*npx*npy*rxp2_2))+(((0.675)*gconst1*npy*r20*r21))+(((32.4)*gconst1*gconst6*npx*r20))+((gconst11*gconst14*(rxp2_2*rxp2_2)))+(((-0.15)*gconst11*gconst2*gconst8*r21))+((gconst1*gconst14*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst3*rxp2_2))+(((0.15)*gconst10*gconst3*gconst9*r21))+(((-0.15)*gconst1*gconst15*gconst8*r21))+(((0.15)*gconst1*gconst13*gconst14*r21))+(((-2916.0)*gconst4*gconst7*(npy*npy)))+(((-1.0)*gconst10*gconst13*gconst2*rxp2_2))+(((-0.0225)*gconst10*gconst15*(r21*r21)))+((gconst1*gconst13*gconst2*gconst8))+(((-0.09)*gconst11*gconst14*(r20*r20)))+(((54.0)*gconst14*gconst5*npy*rxp2_2))+(((-54.0)*gconst15*gconst4*npy*rxp2_2))+(((60.0)*gconst14*gconst5*npy*rxp0_2))+((gconst11*gconst2*gconst4*gconst7))+(((54.0)*gconst2*gconst7*gconst9*npy))+(((432.0)*gconst1*gconst12*npx*rxp0_2))+(((4.5)*gconst1*npy*r20*rxp2_2))+(((-2916.0)*gconst5*gconst7*(npy*npy)))+(((-54.0)*gconst12*gconst3*gconst4*npy))+((gconst10*gconst15*(rxp2_2*rxp2_2)))+(((-8.1)*gconst10*gconst6*npy*r21))+((gconst10*gconst12*gconst3*rxp2_2))+(((-4.5)*gconst11*gconst12*npy*r20))+(((54.0)*gconst0*gconst6*gconst9*npy))+(((-16.0)*gconst1*gconst14*(rxp0_2*rxp0_2)))+(((3240.0)*gconst12*rxp0_2*(npy*npy)))+(((0.18)*gconst11*gconst2*(r20*r20)))+(((-54.0)*gconst1*gconst7*gconst8*npy))+(((-1.0)*gconst1*gconst15*gconst4*gconst6))+(((23328.0)*gconst6*npx*npy*rxp0_2))+(((-54.0)*gconst1*gconst6*gconst8*npy))+(((-0.3)*gconst11*gconst15*r21*rxp2_2))+(((54.0)*gconst13*gconst2*gconst4*npy))+(((46656.0)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-54.0)*gconst12*gconst3*gconst5*npy))+(((-54.0)*gconst3*gconst6*gconst9*npy))+(((-8.1)*gconst15*gconst4*npy*r21))+(((432.0)*gconst14*npx*rxp0_2*rxp2_2))+((gconst10*gconst3*gconst5*gconst6))+(((-0.09)*gconst1*gconst2*(r20*r20)))+(((54.0)*gconst14*gconst4*npy*rxp2_2))+(((-5832.0)*gconst8*rxp2_2*(npy*npy)))+(((-524.88)*(npy*npy)*(r20*r20)))+(((54.0)*gconst13*gconst2*gconst5*npy))+(((432.0)*gconst2*gconst9*npx*rxp0_2))+(((-11664.0)*gconst9*rxp2_2*(npx*npx)))+((gconst0*gconst12*gconst15*rxp2_2))+(((-8.1)*gconst15*gconst5*npy*r21))+(((-129.6)*gconst2*npy*r20*rxp0_2))+(((-32.4)*gconst11*gconst6*npx*r20))+(((-225.0)*gconst12*gconst9*(npy*npy)))+(((524.88)*npx*npy*r20*r21))+(((129.6)*gconst14*npy*r20*rxp0_2))+(((-1.0)*gconst11*gconst3*gconst8*rxp2_2))+(((-0.0225)*gconst11*gconst15*(r21*r21)))+(((-0.15)*gconst0*gconst12*gconst15*r21))+(((0.15)*gconst11*gconst13*gconst2*r21))+(((0.15)*gconst0*gconst13*gconst14*r21))+(((-3240.0)*gconst5*npx*npy*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst15*rxp2_2))+(((54.0)*gconst0*gconst13*gconst5*npy))+(((-54.0)*gconst15*gconst5*npy*rxp2_2))+(((-3240.0)*gconst6*gconst9*npx*npy))+(((-1.0)*gconst11*gconst15*(rxp2_2*rxp2_2)))+(((-486.0)*gconst5*npx*npy*r21))+(((5.0625)*(npy*npy)*(r21*r21)))+(((-3366.0)*gconst5*gconst6*(npy*npy)))+(((54.0)*gconst10*gconst6*npy*rxp2_2))+(((-0.15)*gconst11*gconst12*gconst3*r21))+(((-1749.6)*gconst12*npx*npy*r20))+(((60.0)*gconst1*gconst6*npy*rxp0_2))+((gconst11*gconst2*gconst8*rxp2_2))+(((-1.0)*gconst11*gconst3*gconst4*gconst6))+(((4.5)*gconst2*npy*r20*rxp2_2))+(((0.18)*gconst1*gconst14*(r20*r20)))+(((-54.0)*gconst3*gconst6*gconst8*npy))+(((-6282.0)*gconst12*rxp2_2*(npy*npy)))+(((486.0)*gconst6*npx*npy*r21))+(((-3240.0)*gconst9*rxp0_2*(npy*npy)))+(((54.0)*gconst2*gconst7*gconst8*npy))+(((-16.0)*gconst11*gconst2*(rxp0_2*rxp0_2)))+(((-11664.0)*gconst12*rxp2_2*(npx*npx)))+(((-0.15)*gconst1*gconst12*gconst15*r21))+(((-32.4)*gconst14*gconst5*npx*r20))+(((0.15)*gconst10*gconst13*gconst2*r21))+(((-0.0225)*gconst10*gconst14*(r21*r21)))+((gconst1*gconst13*gconst14*rxp2_2))+(((108.0)*gconst10*gconst5*npy*rxp2_2))+(((-64.8)*gconst14*npx*r21*rxp0_2))+(((-0.15)*gconst11*gconst3*gconst8*r21))+(((-0.675)*gconst2*npy*r20*r21))+(((0.3)*gconst10*gconst14*r21*rxp2_2))+(((54.0)*gconst0*gconst12*gconst5*npy))+((gconst0*gconst12*gconst3*gconst9))+(((-54.0)*gconst11*gconst7*npy*rxp2_2))+(((-23328.0)*gconst5*npx*npy*rxp0_2))+(((-1.0)*gconst0*gconst13*gconst2*gconst9))+(((-54.0)*gconst11*gconst6*npy*rxp2_2))+(((-1.0)*gconst0*gconst13*gconst14*rxp2_2))+(((-11664.0)*gconst5*gconst6*(npx*npx)))+(((54.0)*gconst0*gconst7*gconst9*npy))+(((-54.0)*gconst1*gconst13*gconst4*npy))+(((1749.6)*gconst12*r21*(npx*npx)))+(((129.6)*gconst1*npy*r20*rxp0_2))+(((1749.6)*gconst9*npx*npy*r20))+(((-0.15)*gconst10*gconst12*gconst3*r21))+(((-4.5)*gconst14*gconst9*npy*r20))+(((-1.0)*gconst1*gconst15*gconst8*rxp2_2))+(((-8.1)*gconst14*gconst4*npy*r21))+(((-1.0)*gconst0*gconst14*gconst5*gconst7))+(((-8.1)*gconst10*gconst7*npy*r21))+(((-108.0)*gconst11*gconst4*npy*rxp2_2))+((gconst11*gconst13*gconst2*rxp2_2))+((gconst0*gconst15*gconst5*gconst6))+(((-8.1)*gconst11*gconst6*npy*r21))+(((-1.0)*gconst10*gconst14*(rxp2_2*rxp2_2)))+(((108.0)*gconst14*gconst7*npy*rxp2_2))+(((-54.0)*gconst1*gconst12*gconst4*npy))+(((-1749.6)*gconst9*r21*(npx*npx)))+(((0.15)*gconst0*gconst14*gconst9*r21))+((gconst10*gconst3*gconst9*rxp2_2))+(((432.0)*gconst11*npx*rxp0_2*rxp2_2))+(((972.0)*r21*rxp0_2*(npy*npy))));
op[5]=((((-108.0)*gconst15*npy*(rxp2_2*rxp2_2)))+(((-8.1)*gconst1*gconst12*npy*r21))+((gconst11*gconst2*gconst7*rxp2_2))+(((54.0)*gconst0*gconst5*gconst6*npy))+(((1749.6)*gconst5*npx*npy*r20))+(((60.0)*gconst14*npy*rxp0_2*rxp2_2))+(((-54.0)*gconst1*gconst12*npy*rxp2_2))+(((-54.0)*gconst3*gconst8*npy*rxp2_2))+(((-0.15)*gconst11*gconst2*gconst4*r21))+(((-1.0)*gconst1*gconst3*gconst6*gconst8))+(((-8.1)*gconst0*gconst13*npy*r21))+(((-11664.0)*gconst5*rxp2_2*(npx*npx)))+(((-864.0)*gconst2*npy*(rxp0_2*rxp0_2)))+(((-4.86)*gconst2*npx*r20*r21))+(((-2.4)*gconst1*gconst2*r20*rxp0_2))+(((0.15)*gconst0*gconst14*gconst5*r21))+(((-32.4)*gconst14*npx*r20*rxp2_2))+(((-16.2)*gconst14*npy*r21*rxp2_2))+(((-16.2)*gconst10*npy*r21*rxp2_2))+(((4.86)*gconst1*npx*r20*r21))+(((-8.1)*gconst1*gconst13*npy*r21))+(((0.15)*gconst1*gconst14*gconst7*r21))+(((-1.0)*gconst1*gconst15*gconst4*rxp2_2))+(((243.0)*gconst9*r20*(npy*npy)))+(((-1.0)*gconst1*gconst12*gconst3*gconst4))+(((-225.0)*gconst12*gconst5*(npy*npy)))+(((0.15)*gconst0*gconst15*gconst5*r21))+(((-32.4)*gconst1*gconst12*npx*r20))+(((2.4)*gconst1*gconst14*r20*rxp0_2))+(((54.0)*gconst0*gconst5*gconst7*npy))+(((-486.0)*gconst9*npx*npy*r21))+(((4.86)*gconst11*npy*(r20*r20)))+(((-1.0)*gconst11*gconst3*gconst6*rxp2_2))+(((-16.2)*gconst15*npy*r21*rxp2_2))+(((-3240.0)*gconst12*npx*npy*rxp2_2))+(((-4.5)*gconst14*gconst5*npy*r20))+(((60.0)*gconst2*gconst9*npy*rxp0_2))+(((0.15)*gconst10*gconst2*gconst7*r21))+((gconst1*gconst13*gconst2*gconst4))+(((-9.0)*gconst2*npy*r21*rxp0_2))+(((-8.1)*gconst3*gconst9*npy*r21))+(((432.0)*gconst1*gconst6*npx*rxp0_2))+(((32.4)*gconst1*npx*r20*rxp2_2))+(((-54.0)*gconst1*gconst4*gconst6*npy))+(((-3240.0)*gconst5*gconst6*npx*npy))+((gconst1*gconst14*gconst4*rxp2_2))+((gconst10*gconst3*gconst6*rxp2_2))+(((-54.0)*gconst1*gconst13*npy*rxp2_2))+(((-1.0)*gconst11*gconst3*gconst4*rxp2_2))+(((32.4)*gconst2*npx*r20*rxp2_2))+(((-3240.0)*npx*npy*(rxp2_2*rxp2_2)))+(((54.0)*gconst0*gconst13*npy*rxp2_2))+(((-54.0)*gconst3*gconst4*gconst6*npy))+((gconst0*gconst3*gconst6*gconst9))+(((0.15)*gconst10*gconst3*gconst5*r21))+((gconst1*gconst14*gconst7*rxp2_2))+(((-5832.0)*gconst4*rxp2_2*(npy*npy)))+(((-11664.0)*gconst6*rxp2_2*(npx*npx)))+(((432.0)*gconst2*gconst5*npx*rxp0_2))+(((-108.0)*gconst12*gconst3*npy*rxp2_2))+(((54.0)*gconst2*gconst4*gconst7*npy))+(((-54.0)*gconst3*gconst5*gconst6*npy))+(((9.0)*gconst1*npy*r21*rxp0_2))+(((-4.86)*gconst11*npx*r20*r21))+(((-108.0)*gconst11*npy*(rxp2_2*rxp2_2)))+(((-1.0)*gconst10*gconst2*gconst7*rxp2_2))+(((0.15)*gconst0*gconst14*gconst7*r21))+(((-6282.0)*gconst5*rxp2_2*(npy*npy)))+(((-9.72)*gconst1*npy*(r20*r20)))+(((-6282.0)*gconst6*rxp2_2*(npy*npy)))+((gconst1*gconst2*gconst7*gconst8))+(((-8.1)*gconst3*gconst8*npy*r21))+(((-3240.0)*gconst9*npx*npy*rxp2_2))+(((60.0)*gconst11*npy*rxp0_2*rxp2_2))+(((-32.4)*gconst11*npx*r20*rxp2_2))+(((108.0)*gconst10*npy*(rxp2_2*rxp2_2)))+(((-1.0)*gconst1*gconst15*gconst6*rxp2_2))+(((-1.0)*gconst10*gconst2*gconst5*rxp2_2))+(((6998.4)*npx*npy*r21*rxp0_2))+(((-4.86)*gconst14*npy*(r20*r20)))+(((-9.0)*gconst14*npy*r21*rxp0_2))+(((72.9)*npx*npy*(r21*r21)))+(((-67.5)*gconst5*r21*(npy*npy)))+(((54.0)*gconst2*gconst8*npy*rxp2_2))+(((0.15)*gconst10*gconst2*gconst5*r21))+(((-6998.4)*r20*rxp0_2*(npy*npy)))+(((54.0)*gconst2*gconst9*npy*rxp2_2))+(((108.0)*gconst14*npy*(rxp2_2*rxp2_2)))+(((67.5)*gconst6*r21*(npy*npy)))+(((108.0)*gconst0*gconst9*npy*rxp2_2))+(((-16.2)*gconst11*npy*r21*rxp2_2))+((gconst11*gconst2*gconst4*rxp2_2))+(((54.0)*gconst2*gconst5*gconst7*npy))+(((9.72)*gconst2*npy*(r20*r20)))+(((-8.1)*gconst2*gconst8*npy*r21))+(((-0.15)*gconst1*gconst14*gconst4*r21))+(((108.0)*gconst13*gconst2*npy*rxp2_2))+(((60.0)*gconst1*npy*rxp0_2*rxp2_2))+(((-5832.0)*gconst7*rxp2_2*(npy*npy)))+(((3240.0)*gconst6*rxp0_2*(npy*npy)))+(((-1.0)*gconst0*gconst14*gconst7*rxp2_2))+(((0.15)*gconst11*gconst2*gconst7*r21))+(((-0.15)*gconst1*gconst15*gconst6*r21))+(((-1749.6)*gconst6*npx*npy*r20))+(((-0.15)*gconst0*gconst15*gconst6*r21))+(((-32.4)*gconst2*gconst9*npx*r20))+(((-8.1)*gconst0*gconst12*npy*r21))+(((9.0)*gconst11*npy*r21*rxp0_2))+(((-54.0)*gconst1*gconst4*gconst7*npy))+(((1749.6)*gconst6*r21*(npx*npx)))+((gconst0*gconst12*gconst3*gconst5))+(((-225.0)*gconst6*gconst9*(npy*npy)))+(((60.0)*gconst1*gconst12*npy*rxp0_2))+(((-1.0)*gconst0*gconst13*gconst2*gconst5))+(((60.0)*gconst2*npy*rxp0_2*rxp2_2))+(((864.0)*gconst1*npy*(rxp0_2*rxp0_2)))+((gconst0*gconst15*gconst6*rxp2_2))+(((-3240.0)*gconst5*rxp0_2*(npy*npy)))+(((54.0)*gconst0*gconst12*npy*rxp2_2))+(((-0.15)*gconst1*gconst15*gconst4*r21))+(((4.86)*gconst14*npx*r20*r21))+(((-1.0)*gconst0*gconst14*gconst5*rxp2_2))+(((2.4)*gconst11*gconst2*r20*rxp0_2))+(((-0.15)*gconst10*gconst3*gconst6*r21))+(((-1.0)*gconst0*gconst2*gconst7*gconst9))+(((486.0)*gconst12*npx*npy*r21))+(((-0.15)*gconst11*gconst3*gconst6*r21))+(((-1749.6)*gconst5*r21*(npx*npx)))+(((-54.0)*gconst3*gconst9*npy*rxp2_2))+(((-108.0)*gconst1*gconst8*npy*rxp2_2))+((gconst0*gconst15*gconst5*rxp2_2))+(((-8.1)*gconst2*gconst9*npy*r21))+(((-243.0)*gconst12*r20*(npy*npy)))+((gconst10*gconst3*gconst5*rxp2_2))+(((-0.15)*gconst11*gconst3*gconst4*r21))+(((-4.5)*gconst11*gconst6*npy*r20)));
op[6]=((((-54.0)*gconst3*gconst4*npy*rxp2_2))+(((60.0)*gconst2*gconst5*npy*rxp0_2))+((gconst0*gconst12*gconst3*rxp2_2))+((gconst1*gconst2*gconst4*gconst7))+(((0.15)*gconst1*gconst13*gconst2*r21))+(((0.3)*gconst0*gconst14*r21*rxp2_2))+(((54.0)*gconst2*gconst4*npy*rxp2_2))+(((-4.5)*gconst1*gconst12*npy*r20))+(((10.125)*(npy*npy)*(r21*r21)))+(((-33.75)*gconst9*r21*(npy*npy)))+(((54.0)*gconst0*gconst7*npy*rxp2_2))+(((0.18)*gconst1*gconst2*(r20*r20)))+(((-0.0225)*gconst1*gconst14*(r21*r21)))+(((64.8)*gconst1*npx*r21*rxp0_2))+(((54.0)*gconst2*gconst5*npy*rxp2_2))+(((33.75)*gconst12*r21*(npy*npy)))+(((-1.0)*gconst10*gconst2*(rxp2_2*rxp2_2)))+(((-8.1)*gconst3*gconst4*npy*r21))+(((-32.4)*gconst2*gconst5*npx*r20))+(((-4.5)*gconst2*gconst9*npy*r20))+(((-225.0)*gconst12*rxp2_2*(npy*npy)))+((gconst1*gconst2*gconst8*rxp2_2))+(((-0.0225)*gconst11*gconst3*(r21*r21)))+(((262.44)*(npx*npx)*(r21*r21)))+(((-0.675)*gconst11*npy*r20*r21))+(((-3240.0)*gconst6*npx*npy*rxp2_2))+(((0.15)*gconst0*gconst13*gconst2*r21))+(((-4.5)*gconst11*npy*r20*rxp2_2))+((gconst0*gconst3*gconst5*gconst6))+(((-8.1)*gconst2*gconst4*npy*r21))+(((-1.0)*gconst0*gconst14*(rxp2_2*rxp2_2)))+(((-8.1)*gconst2*gconst5*npy*r21))+(((-0.0225)*gconst11*gconst2*(r21*r21)))+(((-0.0225)*gconst0*gconst15*(r21*r21)))+(((0.15)*gconst0*gconst3*gconst9*r21))+(((-225.0)*gconst9*rxp2_2*(npy*npy)))+(((-8.1)*gconst3*gconst5*npy*r21))+(((-54.0)*gconst1*gconst7*npy*rxp2_2))+(((0.675)*gconst14*npy*r20*r21))+(((-4.5)*gconst14*npy*r20*rxp2_2))+((gconst1*gconst14*(rxp2_2*rxp2_2)))+(((0.15)*gconst0*gconst2*gconst9*r21))+(((-1.0)*gconst1*gconst3*gconst4*gconst6))+(((108.0)*gconst0*gconst5*npy*rxp2_2))+(((0.3)*gconst10*gconst2*r21*rxp2_2))+(((-0.0225)*gconst0*gconst14*(r21*r21)))+(((-64.8)*gconst2*npx*r21*rxp0_2))+((gconst0*gconst3*gconst9*rxp2_2))+(((129.6)*gconst2*npy*r20*rxp0_2))+(((-1.0)*gconst11*gconst3*(rxp2_2*rxp2_2)))+((gconst1*gconst13*gconst2*rxp2_2))+(((-1.0)*gconst0*gconst13*gconst2*rxp2_2))+(((432.0)*gconst2*npx*rxp0_2*rxp2_2))+((gconst10*gconst3*(rxp2_2*rxp2_2)))+(((-12114.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-11664.0)*(npx*npx)*(rxp2_2*rxp2_2)))+(((-0.15)*gconst0*gconst12*gconst3*r21))+(((-1.0)*gconst1*gconst3*gconst8*rxp2_2))+(((-8.1)*gconst0*gconst7*npy*r21))+(((-3240.0)*gconst5*npx*npy*rxp2_2))+(((-225.0)*gconst5*gconst6*(npy*npy)))+(((-32.4)*gconst1*gconst6*npx*r20))+(((-0.09)*gconst1*gconst14*(r20*r20)))+(((243.0)*gconst5*r20*(npy*npy)))+(((-486.0)*gconst5*npx*npy*r21))+(((-243.0)*gconst6*r20*(npy*npy)))+(((60.0)*gconst1*gconst6*npy*rxp0_2))+(((-129.6)*gconst1*npy*r20*rxp0_2))+(((-8.1)*gconst1*gconst6*npy*r21))+(((-54.0)*gconst1*gconst6*npy*rxp2_2))+(((262.44)*(npy*npy)*(r20*r20)))+(((-1.0)*gconst0*gconst2*gconst5*gconst7))+(((486.0)*gconst6*npx*npy*r21))+(((-524.88)*npx*npy*r20*r21))+(((-0.0225)*gconst10*gconst3*(r21*r21)))+(((-54.0)*gconst3*gconst5*npy*rxp2_2))+(((-1.0)*gconst0*gconst2*gconst9*rxp2_2))+((gconst0*gconst15*(rxp2_2*rxp2_2)))+(((-16.0)*gconst1*gconst2*(rxp0_2*rxp0_2)))+(((-108.0)*gconst3*gconst6*npy*rxp2_2))+(((54.0)*gconst0*gconst6*npy*rxp2_2))+(((-0.09)*gconst11*gconst2*(r20*r20)))+(((108.0)*gconst2*gconst7*npy*rxp2_2))+(((-0.3)*gconst1*gconst15*r21*rxp2_2))+(((-8.1)*gconst1*gconst7*npy*r21))+(((-0.3)*gconst11*gconst3*r21*rxp2_2))+(((-0.0225)*gconst1*gconst15*(r21*r21)))+(((-0.15)*gconst1*gconst3*gconst8*r21))+(((-0.15)*gconst1*gconst12*gconst3*r21))+(((-8.1)*gconst0*gconst6*npy*r21))+((gconst11*gconst2*(rxp2_2*rxp2_2)))+(((-1.0)*gconst1*gconst12*gconst3*rxp2_2))+(((-1.0)*gconst1*gconst15*(rxp2_2*rxp2_2)))+(((-108.0)*gconst1*gconst4*npy*rxp2_2))+(((-0.0225)*gconst10*gconst2*(r21*r21)))+(((432.0)*gconst1*npx*rxp0_2*rxp2_2))+(((-0.15)*gconst1*gconst2*gconst8*r21))+(((972.0)*r21*rxp0_2*(npy*npy))));
op[7]=(((gconst7*x100*x110))+(((-1.0)*npx*x86*x97))+(((33.75)*gconst6*x125))+(((-1.0)*gconst4*x108*x97))+(((-1.0)*gconst2*x111*x99))+(((-1.0)*gconst3*x130))+(((-3240.0)*x80*x91))+(((-72.9)*r20*x125))+((gconst2*x129))+(((-1.0)*gconst6*x108*x97))+(((-1.0)*gconst6*x82*x83))+(((108.0)*x115*x80))+(((-1.0)*gconst3*x100*x95))+((x106*x112))+(((-1.0)*x112*x124))+((rxp2_2*x104*x82))+(((-1.0)*gconst2*npx*rxp2_2*x86))+(((72.9)*x81*x91))+(((-1.0)*x115*x120))+(((-1.0)*gconst1*x129))+(((0.15)*gconst3*gconst5*x100))+(((-1.0)*x115*x119))+(((-1.0)*gconst4*x103*x90))+((x90*x94))+(((-1.0)*rxp2_2*x111*x82))+(((-33.75)*gconst5*x125))+((gconst7*x103*x90))+(((-16.2)*x100*x99))+(((-1.0)*gconst3*x111*x99))+((x119*x82))+(((-1.0)*x116*x94))+(((-1.0)*x117*x95))+(((-1.0)*gconst1*gconst3*gconst4*x103))+((x105*x106))+(((-1.0)*x105*x124))+((gconst0*x130))+((gconst5*x100*x110))+((x122*x90))+((gconst2*x104*x99))+(((-1.0)*x105*x116))+((gconst4*rxp2_2*x90))+(((-108.0)*x80*x82))+((x120*x82))+(((-1.0)*gconst5*x115*x83)));
op[8]=((((-1.0)*x123*x90))+(((-1.0)*gconst1*x108*x80))+(((-1.0)*x106*x123))+(((-1.0)*x127*x82))+(((-1.0)*x118*x90))+(((-1.0)*gconst0*gconst2*x123))+(((-1.0)*gconst2*x83*x99))+(((-1.0)*rxp2_2*x82*x83))+((x106*x80))+(((5.0625)*x79*x81))+(((-1.0)*x117*x87))+((x115*x127))+(((-1.0)*x116*x80))+((x80*x90))+((gconst2*x100*x87))+(((-1.0)*x124*x80))+(((-1.0)*gconst1*gconst3*x123)));
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5eval[2];
IkReal x131=cj4*cj4;
IkReal x132=((1.125)*cj4);
IkReal x133=(npz*r22);
IkReal x134=(npx*rxp1_2);
IkReal x135=(npy*rxp0_2);
IkReal x136=(npx*r21);
IkReal x137=(npy*r20);
IkReal x138=((6.66666666666667)*sj4);
IkReal x139=(npy*rxp1_2);
IkReal x140=(npx*rxp0_2);
IkReal x141=((7.5)*sj4);
IkReal x142=((24.0)*x135);
IkReal x143=((27.0)*x131);
IkReal x144=((4.05)*cj4*sj4);
IkReal x145=((3.6)*cj4*sj4);
j5eval[0]=((((-1.0)*x137*x145))+(((-1.0)*x138*x140))+(((24.0)*x131*x134))+(((-1.0)*x131*x142))+(((-1.0)*cj4*x133))+(((-24.0)*x134))+((x136*x145))+((cj4*pz))+(((-1.0)*x138*x139))+x142);
j5eval[1]=IKsign(((((-1.0)*x137*x144))+(((27.0)*x135))+(((-1.0)*x140*x141))+((x136*x144))+((pz*x132))+(((-1.0)*x139*x141))+(((-27.0)*x134))+(((-1.0)*x132*x133))+((x134*x143))+(((-1.0)*x135*x143))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x146=cj4*cj4;
IkReal x147=(npx*sj4);
IkReal x148=((1.125)*r22);
IkReal x149=((4.05)*r22);
IkReal x150=(rxp1_2*sj4);
IkReal x151=((25.0)*pp);
IkReal x152=(npy*sj4);
IkReal x153=(cj4*r21);
IkReal x154=((3.75)*pp);
IkReal x155=((7.5)*npy);
IkReal x156=(cj4*r20);
IkReal x157=(cj4*rxp2_2);
IkReal x158=(rxp0_2*sj4);
IkReal x159=((27.0)*x146);
IkReal x160=((27.0)*x157);
IkReal x161=((27.0)*cj4*npz);
IkReal x162=((4.05)*npz*x146);
CheckValue<IkReal> x163=IKPowWithIntegerCheck(IKsign(((((-1.0)*x150*x155))+(((-1.0)*cj4*npz*x148))+(((4.05)*x147*x153))+(((-7.5)*rxp0_2*x147))+((npx*rxp1_2*(((-27.0)+x159))))+(((1.125)*cj4*pz))+(((-4.05)*x152*x156))+((npy*rxp0_2*(((27.0)+(((-1.0)*x159)))))))),-1);
if(!x163.valid){
continue;
}
CheckValue<IkReal> x164 = IKatan2WithCheck(IkReal((((x153*x154))+(((4.75)*x150))+((npy*x149))+(((-0.7125)*x153))+((x152*x160))+(((-1.0)*x150*x151))+(((-1.0)*x150*x161))+((r21*x162))+(((-1.0)*x147*x148))+(((-7.5)*npx*x157))+(((-1.0)*npy*x146*x149)))),IkReal(((((-1.0)*x154*x156))+((npx*x146*x149))+(((0.7125)*x156))+((x151*x158))+(((-4.75)*x158))+(((-1.0)*x148*x152))+(((-1.0)*x147*x160))+(((-1.0)*r20*x162))+(((-1.0)*x155*x157))+(((-1.0)*npx*x149))+((x158*x161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x164.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x163.value)))+(x164.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x165=IKcos(j5);
IkReal x166=IKsin(j5);
IkReal x167=((27.0)*sj4);
IkReal x168=((1.0)*sj4);
IkReal x169=((0.15)*cj4);
evalcond[0]=((-4.75)+(((-1.0)*npy*x165*x167))+(((27.0)*cj4*npz))+(((-1.0)*npx*x166*x167))+(((-7.5)*npy*x166))+(((25.0)*pp))+(((7.5)*npx*x165)));
evalcond[1]=((((0.15)*r22*sj4))+((r20*x166*x169))+((r21*x165*x169))+((cj4*rxp2_2))+(((-1.0)*rxp1_2*x165*x168))+(((-1.0)*rxp0_2*x166*x168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
j0eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5))+(((6.66666666666667)*py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x170=((1.0)*sj4);
j0eval[0]=((((-1.0)*cj5*r11*x170))+(((-1.0)*r10*sj5*x170))+((cj4*r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x171=((6.66666666666667)*sj4);
j0eval[0]=((((-1.0)*rxp0_0*sj5*x171))+((cj4*r00*sj5))+(((6.66666666666667)*cj4*rxp2_0))+((r02*sj4))+((cj4*cj5*r01))+(((-1.0)*cj5*rxp1_0*x171)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x172=((6.66666666666667)*py);
IkReal x173=((1.0)+(((-1.0)*(r12*r12))));
if((x173) < -0.00001)
continue;
IkReal x174=IKabs(IKsqrt(x173));
IkReal x181 = x173;
if(IKabs(x181)==0){
continue;
}
IkReal x175=pow(x181,-0.5);
IkReal x176=(r11*x175);
IkReal x177=(r10*x175);
CheckValue<IkReal> x182=IKPowWithIntegerCheck(x174,-1);
if(!x182.valid){
continue;
}
IkReal x178=x182.value;
if((((1.0)+(((-44.4444444444444)*(py*py)*(x178*x178))))) < -0.00001)
continue;
IkReal x179=IKsqrt(((1.0)+(((-44.4444444444444)*(py*py)*(x178*x178)))));
IkReal x180=((1.0)*x179);
CheckValue<IkReal> x183 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x183.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x184=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x184.valid){
continue;
}
if( ((x172*(x184.value))) < -1-IKFAST_SINCOS_THRESH || ((x172*(x184.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst32=((((-1.0)*(x183.value)))+(((-1.0)*(IKasin((x172*(x184.value)))))));
IkReal gconst33=(((x172*x176*x178))+(((-1.0)*x177*x180)));
IkReal gconst34=((((-1.0)*x172*x177*x178))+(((-1.0)*x176*x180)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x185=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x185.valid){
continue;
}
if( (((6.66666666666667)*py*(x185.value))) < -1-IKFAST_SINCOS_THRESH || (((6.66666666666667)*py*(x185.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x186 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x186.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((6.66666666666667)*py*(x185.value))))+j5+(x186.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x187=gconst34*gconst34;
IkReal x188=gconst33*gconst33;
IkReal x189=(gconst33*r01);
IkReal x190=(gconst33*r11);
IkReal x191=((1.2)*py);
IkReal x192=((1.2)*px);
IkReal x193=(gconst34*r00);
IkReal x194=(gconst34*r10);
IkReal x195=((0.09)*x187);
IkReal x196=((0.09)*x188);
CheckValue<IkReal> x204=IKPowWithIntegerCheck(((((0.15)*x194))+py+(((-0.15)*x190))),-1);
if(!x204.valid){
continue;
}
IkReal x197=x204.value;
IkReal x198=(px*x197);
IkReal x199=((0.15)*x197);
IkReal x200=(x193*x199);
IkReal x201=(x189*x199);
IkReal x202=(x198+x200);
if((((((4.0)*(py*py)))+((x196*(r11*r11)))+(((-1.0)*x189*x192))+(((-1.0)*x190*x191))+((x192*x193))+((x195*(r10*r10)))+((x196*(r01*r01)))+((x191*x194))+(((4.0)*(px*px)))+(((-0.18)*x190*x194))+((x195*(r00*r00)))+(((-0.18)*x189*x193)))) < -0.00001)
continue;
IkReal x203=((0.5)*x197*(IKsqrt(((((4.0)*(py*py)))+((x196*(r11*r11)))+(((-1.0)*x189*x192))+(((-1.0)*x190*x191))+((x192*x193))+((x195*(r10*r10)))+((x196*(r01*r01)))+((x191*x194))+(((4.0)*(px*px)))+(((-0.18)*x190*x194))+((x195*(r00*r00)))+(((-0.18)*x189*x193))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x202))+x203+x201))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x201))+x203+x202))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2816=((6.66666666666667)*py);
IkReal x2817=((1.0)+(((-1.0)*(r12*r12))));
if((x2817) < -0.00001)
continue;
IkReal x2818=IKabs(IKsqrt(x2817));
IkReal x2825 = x2817;
if(IKabs(x2825)==0){
continue;
}
IkReal x2819=pow(x2825,-0.5);
IkReal x2820=(r11*x2819);
IkReal x2821=(r10*x2819);
CheckValue<IkReal> x2826=IKPowWithIntegerCheck(x2818,-1);
if(!x2826.valid){
continue;
}
IkReal x2822=x2826.value;
if((((1.0)+(((-44.4444444444444)*(py*py)*(x2822*x2822))))) < -0.00001)
continue;
IkReal x2823=IKsqrt(((1.0)+(((-44.4444444444444)*(py*py)*(x2822*x2822)))));
IkReal x2824=((1.0)*x2823);
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2827.valid){
continue;
}
if( ((x2816*(x2827.value))) < -1-IKFAST_SINCOS_THRESH || ((x2816*(x2827.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2828 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2828.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(IKasin((x2816*(x2827.value))))+(((-1.0)*(x2828.value))));
IkReal gconst36=(((x2821*x2824))+((x2816*x2820*x2822)));
IkReal gconst37=((((-1.0)*x2816*x2821*x2822))+((x2820*x2824)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2829=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2829.valid){
continue;
}
if( (((6.66666666666667)*py*(x2829.value))) < -1-IKFAST_SINCOS_THRESH || (((6.66666666666667)*py*(x2829.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2830 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((6.66666666666667)*py*(x2829.value))))))+j5+(x2830.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2831=gconst36*gconst36;
IkReal x2832=gconst37*gconst37;
IkReal x2833=((0.15)*gconst36);
IkReal x2834=(gconst36*r11);
IkReal x2835=((1.2)*py);
IkReal x2836=((0.18)*gconst37);
IkReal x2837=(gconst37*r00);
IkReal x2838=((1.2)*px);
IkReal x2839=(gconst36*r01);
IkReal x2840=(gconst37*r10);
IkReal x2841=((0.09)*x2832);
IkReal x2842=((0.09)*x2831);
CheckValue<IkReal> x2848=IKPowWithIntegerCheck(((((-1.0)*r11*x2833))+py+(((0.15)*x2840))),-1);
if(!x2848.valid){
continue;
}
IkReal x2843=x2848.value;
IkReal x2844=(px*x2843);
IkReal x2845=((0.15)*x2837*x2843);
CheckValue<IkReal> x2849=IKPowWithIntegerCheck(((((-0.15)*x2834))+py+(((0.15)*x2840))),-1);
if(!x2849.valid){
continue;
}
IkReal x2846=(r01*x2833*(x2849.value));
if((((((4.0)*(py*py)))+(((-1.0)*r10*x2834*x2836))+((x2841*(r00*r00)))+((x2842*(r11*r11)))+(((-1.0)*x2834*x2835))+((x2842*(r01*r01)))+(((-1.0)*x2838*x2839))+(((4.0)*(px*px)))+((x2841*(r10*r10)))+(((-1.0)*r00*x2836*x2839))+((x2837*x2838))+((x2835*x2840)))) < -0.00001)
continue;
IkReal x2847=((0.5)*x2843*(IKsqrt(((((4.0)*(py*py)))+(((-1.0)*r10*x2834*x2836))+((x2841*(r00*r00)))+((x2842*(r11*r11)))+(((-1.0)*x2834*x2835))+((x2842*(r01*r01)))+(((-1.0)*x2838*x2839))+(((4.0)*(px*px)))+((x2841*(r10*r10)))+(((-1.0)*r00*x2836*x2839))+((x2837*x2838))+((x2835*x2840))))));
j0array[0]=((-2.0)*(atan(((((1.0)*x2844))+x2845+(((-1.0)*x2847))+(((-1.0)*x2846))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x2847+x2844+x2845+(((-1.0)*x2846))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2850=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2850.valid){
continue;
}
CheckValue<IkReal> x2851=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2852.valid){
continue;
}
CheckValue<IkReal> x2853=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2853.valid){
continue;
}
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2854.valid){
continue;
}
if((((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))) < -0.00001)
continue;
CheckValue<IkReal> x2855=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2855.valid){
continue;
}
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2856.valid){
continue;
}
j0array[0]=((2.0)*(atan(((((0.15)*cj4*r10*sj5*(x2850.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2851.value)))+((cj4*rxp2_1*(x2852.value)))+(((0.15)*cj4*cj5*r11*(x2853.value)))+(((0.5)*(x2854.value)*(IKsqrt(((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))))))+(((0.15)*r12*sj4*(x2855.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2856.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
CheckValue<IkReal> x2857=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2857.valid){
continue;
}
CheckValue<IkReal> x2858=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2858.valid){
continue;
}
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2859.valid){
continue;
}
CheckValue<IkReal> x2860=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2860.valid){
continue;
}
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2861.valid){
continue;
}
CheckValue<IkReal> x2862=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2862.valid){
continue;
}
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(((((0.15)*cj4*r00*sj5))+(((-1.0)*cj5*rxp1_0*sj4))+(((0.15)*r02*sj4))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.15)*cj4*cj5*r01))),-1);
if(!x2863.valid){
continue;
}
if((((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))) < -0.00001)
continue;
j0array[1]=((2.0)*(atan(((((0.15)*cj4*r10*sj5*(x2857.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2858.value)))+((cj4*rxp2_1*(x2859.value)))+(((0.15)*cj4*cj5*r11*(x2860.value)))+(((0.15)*r12*sj4*(x2861.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2862.value)))+(((-0.5)*(x2863.value)*(IKsqrt(((((0.09)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.09)*(cj4*cj4)*(r00*r00)))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((1.2)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.18)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.09)*(r12*r12)))+(((-1.2)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((1.2)*cj4*r02*rxp2_0*sj4))+(((0.18)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-1.2)*r12*rxp0_1*sj5))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.18)*cj4*cj5*r11*r12*sj4))+(((-1.2)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((1.2)*cj5*r02*rxp1_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-1.2)*cj4*r10*rxp0_1*sj4))+(((0.09)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.18)*cj4*cj5*r01*r02*sj4))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-0.09)*(cj4*cj4)*(r02*r02)))+(((1.2)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.18)*cj4*r10*r12*sj4*sj5))+(((1.2)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.18)*cj4*r00*r02*sj4*sj5))+(((1.2)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-1.2)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((0.09)*(r02*r02)))+(((1.2)*r12*rxp0_1*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((1.2)*cj4*r12*rxp2_1*sj4))+(((-0.09)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((1.2)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-1.2)*cj4*r00*rxp0_0*sj4))+(((-1.2)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((-1.2)*r02*rxp0_0*sj5))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((1.2)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-1.2)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((-1.2)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.09)*(cj4*cj4)*(r12*r12)))+(((-1.2)*cj5*r12*rxp1_1))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-1.2)*cj5*r02*rxp1_0))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.09)*(cj4*cj4)*(r10*r10)))+(((4.0)*(rxp0_0*rxp0_0)))+(((1.2)*r02*rxp0_0*sj5*(cj4*cj4)))+(((1.2)*cj5*r12*rxp1_1*(cj4*cj4))))))))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2864=cj4*cj4;
IkReal x2865=cj5*cj5;
IkReal x2866=r10*r10;
IkReal x2867=r00*r00;
IkReal x2868=r11*r11;
IkReal x2869=r01*r01;
IkReal x2870=(r10*sj5);
IkReal x2871=((1.0)*sj4);
IkReal x2872=(cj5*r01);
IkReal x2873=(cj4*r02);
IkReal x2874=((4.0)*x2864);
IkReal x2875=((8.0)*cj5*r11);
IkReal x2876=(r00*sj4*sj5);
IkReal x2877=((4.0)*x2866);
IkReal x2878=((4.0)*x2867);
IkReal x2879=(cj4*r12*sj4);
IkReal x2880=((8.0)*r00*sj5);
IkReal x2881=(x2865*x2869);
IkReal x2882=(x2865*x2868);
CheckValue<IkReal> x2890=IKPowWithIntegerCheck(((((-1.0)*x2870*x2871))+(((-1.0)*cj5*r11*x2871))+((cj4*r12))),-1);
if(!x2890.valid){
continue;
}
IkReal x2883=x2890.value;
IkReal x2884=(sj4*x2883);
IkReal x2885=(x2872*x2884);
IkReal x2886=(x2876*x2883);
IkReal x2887=((1.0)*x2873*x2883);
IkReal x2888=(x2886+x2885);
if(((((x2874*(r12*r12)))+(((-1.0)*x2864*x2872*x2880))+(((-8.0)*sj4*x2872*x2873))+((x2872*x2880))+(((4.0)*x2882))+(((4.0)*x2881))+((x2865*x2866*x2874))+((x2870*x2875))+(((-1.0)*x2865*x2877))+(((-1.0)*x2865*x2878))+(((-1.0)*x2874*x2881))+(((-1.0)*x2874*x2882))+(((-8.0)*x2873*x2876))+(((-1.0)*x2864*x2870*x2875))+(((-8.0)*x2870*x2879))+((x2874*(r02*r02)))+(((-1.0)*x2867*x2874))+(((-1.0)*x2875*x2879))+x2877+x2878+(((-1.0)*x2866*x2874))+((x2865*x2867*x2874)))) < -0.00001)
continue;
IkReal x2889=((0.5)*x2883*(IKsqrt((((x2874*(r12*r12)))+(((-1.0)*x2864*x2872*x2880))+(((-8.0)*sj4*x2872*x2873))+((x2872*x2880))+(((4.0)*x2882))+(((4.0)*x2881))+((x2865*x2866*x2874))+((x2870*x2875))+(((-1.0)*x2865*x2877))+(((-1.0)*x2865*x2878))+(((-1.0)*x2874*x2881))+(((-1.0)*x2874*x2882))+(((-8.0)*x2873*x2876))+(((-1.0)*x2864*x2870*x2875))+(((-8.0)*x2870*x2879))+((x2874*(r02*r02)))+(((-1.0)*x2867*x2874))+(((-1.0)*x2875*x2879))+x2877+x2878+(((-1.0)*x2866*x2874))+((x2865*x2867*x2874))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2887))+x2888+x2889))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2888))+x2887+x2889))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2891=cj5*cj5;
IkReal x2892=r01*r01;
IkReal x2893=r11*r11;
IkReal x2894=(r11*sj5);
IkReal x2895=((1.2)*py);
IkReal x2896=((0.15)*cj5);
IkReal x2897=(cj5*r00);
IkReal x2898=((1.2)*px);
IkReal x2899=(r01*sj5);
IkReal x2900=(cj5*r10);
IkReal x2901=((0.09)*x2891);
CheckValue<IkReal> x2907=IKPowWithIntegerCheck((py+(((-0.15)*x2894))+((r10*x2896))),-1);
if(!x2907.valid){
continue;
}
IkReal x2902=x2907.value;
IkReal x2903=(px*x2902);
CheckValue<IkReal> x2908=IKPowWithIntegerCheck((py+(((-0.15)*x2894))+(((0.15)*x2900))),-1);
if(!x2908.valid){
continue;
}
IkReal x2904=(r00*x2896*(x2908.value));
IkReal x2905=((0.15)*x2899*x2902);
if((((((4.0)*(py*py)))+((x2901*(r10*r10)))+(((-0.18)*x2897*x2899))+(((-1.0)*x2893*x2901))+((x2901*(r00*r00)))+(((4.0)*(px*px)))+(((-1.0)*x2898*x2899))+((x2897*x2898))+(((-1.0)*x2892*x2901))+(((-1.0)*x2894*x2895))+(((-0.18)*x2894*x2900))+((x2895*x2900))+(((0.09)*x2893))+(((0.09)*x2892)))) < -0.00001)
continue;
IkReal x2906=((0.5)*x2902*(IKsqrt(((((4.0)*(py*py)))+((x2901*(r10*r10)))+(((-0.18)*x2897*x2899))+(((-1.0)*x2893*x2901))+((x2901*(r00*r00)))+(((4.0)*(px*px)))+(((-1.0)*x2898*x2899))+((x2897*x2898))+(((-1.0)*x2892*x2901))+(((-1.0)*x2894*x2895))+(((-0.18)*x2894*x2900))+((x2895*x2900))+(((0.09)*x2893))+(((0.09)*x2892))))));
j0array[0]=((-2.0)*(atan(((((1.0)*x2903))+(((-1.0)*x2905))+(((-1.0)*x2906))+x2904))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2905))+x2903+x2906+x2904))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x205=(cj0*r21);
IkReal x206=((1.0)*cj5);
IkReal x207=((1.0)*cj0);
IkReal x208=((((-1.0)*cj4*r02))+((r00*sj4*sj5))+((cj5*r01*sj4)));
j3eval[0]=x208;
j3eval[1]=IKsign(x208);
j3eval[2]=((IKabs(((((-1.0)*cj0*r20*x206))+((sj5*x205)))))+(IKabs(((((-1.0)*cj4*x205*x206))+(((-1.0)*cj4*r20*sj5*x207))+(((-1.0)*r22*sj4*x207))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x209=(r21*sj0);
IkReal x210=((1.0)*cj4);
IkReal x211=((1.0)*r20*sj0);
IkReal x212=(((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x210)));
j3eval[0]=x212;
j3eval[1]=((IKabs(((((-1.0)*cj5*x211))+((sj5*x209)))))+(IKabs(((((-1.0)*r20*sj0*sj5*x210))+(((-1.0)*cj5*x209*x210))+(((-1.0)*r22*sj0*sj4))))));
j3eval[2]=IKsign(x212);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x213=((1.0)*sj4);
IkReal x214=(((cj4*r22))+(((-1.0)*r20*sj5*x213))+(((-1.0)*cj5*r21*x213)));
j3eval[0]=x214;
j3eval[1]=IKsign(x214);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x215=((1.0)*r20);
IkReal x216=((1.0)*cj4);
IkReal x217=(((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x216)));
j3eval[0]=x217;
j3eval[1]=IKsign(x217);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x215))+(((-1.0)*cj5*r21*x216))+(((-1.0)*r22*sj4)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x215))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x218=((1.0)*sj4);
IkReal x219=((1.0)*r00);
IkReal x220=(((cj4*r22))+(((-1.0)*r20*sj5*x218))+(((-1.0)*cj5*r21*x218)));
j3eval[0]=x220;
j3eval[1]=IKsign(x220);
j3eval[2]=((IKabs((((r01*sj5))+(((-1.0)*cj5*x219)))))+(IKabs(((((-1.0)*cj4*cj5*r01))+(((-1.0)*cj4*sj5*x219))+(((-1.0)*r02*x218))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x221=cj4*cj4;
IkReal x222=cj5*cj5;
IkReal x223=r10*r10;
IkReal x224=r11*r11;
IkReal x225=r12*r12;
IkReal x226=(cj5*r10);
IkReal x227=((2.0)*sj5);
IkReal x228=(cj4*r10);
IkReal x229=(r12*sj4);
IkReal x230=((1.0)*x221);
IkReal x231=(cj4*cj5*r11);
IkReal x232=(x222*x224);
IkReal x233=(x222*x223);
IkReal x234=((((-1.0)*x230*x232))+(((-2.0)*x229*x231))+((r11*x226*x227))+x232+(((-1.0)*x227*x228*x229))+(((-1.0)*r11*x221*x226*x227))+((x221*x233))+((x221*x225))+(((-1.0)*x223*x230))+(((-1.0)*x233))+(((-1.0)*x225))+(((-1.0)*x224)));
j3eval[0]=x234;
j3eval[1]=((IKabs((((r11*sj5))+(((-1.0)*x226)))))+(IKabs((x229+x231+((sj5*x228))))));
j3eval[2]=IKsign(x234);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x235=cj4*cj4;
IkReal x236=cj5*cj5;
IkReal x237=r10*r10;
IkReal x238=r11*r11;
IkReal x239=r12*r12;
IkReal x240=(cj5*r10);
IkReal x241=((2.0)*sj5);
IkReal x242=(cj5*r11);
IkReal x243=((1.0)*x235);
IkReal x244=(cj4*r12*sj4);
IkReal x245=(x236*x238);
IkReal x246=(x236*x237);
CheckValue<IkReal> x247=IKPowWithIntegerCheck(IKsign(((((-2.0)*x242*x244))+(((-1.0)*x246))+(((-1.0)*x237*x243))+(((-1.0)*x243*x245))+x245+((x235*x239))+(((-1.0)*r10*x241*x244))+(((-1.0)*r11*x235*x240*x241))+((r11*x240*x241))+(((-1.0)*x238))+(((-1.0)*x239))+((x235*x246)))),-1);
if(!x247.valid){
continue;
}
CheckValue<IkReal> x248 = IKatan2WithCheck(IkReal((((cj4*x242))+((r12*sj4))+((cj4*r10*sj5)))),IkReal(((((-1.0)*x240))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x248.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x247.value)))+(x248.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x249=IKsin(j3);
IkReal x250=IKcos(j3);
IkReal x251=(cj4*r10);
IkReal x252=(cj4*r11);
IkReal x253=(cj5*x249);
IkReal x254=(sj5*x249);
IkReal x255=(sj4*x249);
IkReal x256=(sj5*x250);
IkReal x257=((1.0)*cj5*x250);
evalcond[0]=(((r21*x256))+((cj4*r20*x254))+((cj4*r21*x253))+(((-1.0)*r20*x257))+((r22*x255)));
evalcond[1]=(((cj4*r01*x253))+((cj4*r00*x254))+((r01*x256))+(((-1.0)*r00*x257))+((r02*x255)));
evalcond[2]=(((r10*x253))+((x251*x256))+(((-1.0)*r11*x254))+((cj5*x250*x252))+((r12*sj4*x250)));
evalcond[3]=((1.0)+((r11*x256))+((x251*x254))+((r12*x255))+((x252*x253))+(((-1.0)*r10*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x258=((0.76056338028169)*sj4);
IkReal x259=((0.211267605633803)*sj5);
IkReal x260=((0.76056338028169)*cj4);
IkReal x261=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x258))+((r02*x260))+(((-1.0)*r01*x259))+(((-1.0)*cj5*r01*x258))+(((1.40845070422535)*px))+((r00*x261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x260))+(((-1.0)*r20*sj5*x258))+(((-1.0)*r21*x259))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x258))+((r20*x261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x258))+((r02*x260))+(((-1.0)*r01*x259))+(((-1.0)*cj5*r01*x258))+(((1.40845070422535)*px))+((r00*x261))))+IKsqr((((r22*x260))+(((-1.0)*r20*sj5*x258))+(((-1.0)*r21*x259))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x258))+((r20*x261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x258))+((r02*x260))+(((-1.0)*r01*x259))+(((-1.0)*cj5*r01*x258))+(((1.40845070422535)*px))+((r00*x261))), (((r22*x260))+(((-1.0)*r20*sj5*x258))+(((-1.0)*r21*x259))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x258))+((r20*x261))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x262=((1.0)*px);
IkReal x263=((0.54)*sj5);
IkReal x264=((0.15)*sj5);
IkReal x265=((0.54)*cj5);
IkReal x266=(cj3*cj4);
IkReal x267=((0.15)*cj5);
IkReal x268=((0.54)*r02);
IkReal x269=(cj3*sj4);
IkReal x270=((0.54)*r22);
IkReal x271=(r01*x264);
IkReal x272=((0.71)*(IKsin(j1)));
IkReal x273=(r00*x267);
IkReal x274=(r21*x264);
IkReal x275=((0.71)*(IKcos(j1)));
IkReal x276=(r20*x267);
IkReal x277=(x262+x273);
IkReal x278=(x274+x275);
IkReal x279=(x272+x271);
evalcond[0]=((((-1.0)*r21*sj4*x265))+(((-1.0)*r20*sj4*x263))+((cj4*x270))+x276+pz+(((-1.0)*x278)));
evalcond[1]=(((r01*sj4*x265))+(((-1.0)*cj4*x268))+x279+((r00*sj4*x263))+(((-1.0)*x277)));
evalcond[2]=(((r21*sj3*x263))+(((-1.0)*r20*x263*x266))+(((-1.0)*r20*sj3*x265))+(((-1.0)*x269*x270))+x279+(((-1.0)*r21*x265*x266))+(((-1.0)*x277)));
evalcond[3]=(((r00*sj3*x265))+(((-1.0)*pz))+x278+((r00*x263*x266))+(((-1.0)*r01*sj3*x263))+(((-1.0)*x276))+((x268*x269))+((r01*x265*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x280=((1.0)*cj4);
IkReal x281=(sj1*sj4);
IkReal x282=(r20*sj5);
IkReal x283=(cj5*r01);
IkReal x284=(cj5*r21);
IkReal x285=(cj1*sj4);
IkReal x286=(r00*sj5);
if( IKabs((((x284*x285))+(((-1.0)*r02*sj1*x280))+((x281*x283))+((x281*x286))+(((-1.0)*cj1*r22*x280))+((x282*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x285*x286))+((cj4*r22*sj1))+(((-1.0)*x281*x282))+(((-1.0)*x281*x284))+(((-1.0)*cj1*r02*x280))+((x283*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x284*x285))+(((-1.0)*r02*sj1*x280))+((x281*x283))+((x281*x286))+(((-1.0)*cj1*r22*x280))+((x282*x285))))+IKsqr((((x285*x286))+((cj4*r22*sj1))+(((-1.0)*x281*x282))+(((-1.0)*x281*x284))+(((-1.0)*cj1*r02*x280))+((x283*x285))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x284*x285))+(((-1.0)*r02*sj1*x280))+((x281*x283))+((x281*x286))+(((-1.0)*cj1*r22*x280))+((x282*x285))), (((x285*x286))+((cj4*r22*sj1))+(((-1.0)*x281*x282))+(((-1.0)*x281*x284))+(((-1.0)*cj1*r02*x280))+((x283*x285))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x287=IKsin(j2);
IkReal x288=IKcos(j2);
IkReal x289=(cj3*sj4);
IkReal x290=(r21*sj5);
IkReal x291=(cj5*sj4);
IkReal x292=((0.15)*cj5);
IkReal x293=((1.0)*cj4);
IkReal x294=(sj4*sj5);
IkReal x295=((1.0)*sj3);
IkReal x296=(cj5*sj3);
IkReal x297=(r01*sj5);
IkReal x298=(sj1*x288);
IkReal x299=(cj1*x288);
IkReal x300=(cj3*cj4*sj5);
IkReal x301=((0.54)*x287);
IkReal x302=(sj1*x287);
IkReal x303=(cj3*cj4*cj5);
IkReal x304=((1.0)*cj1*x287);
evalcond[0]=(((r20*x294))+x298+(((-1.0)*r22*x293))+((r21*x291))+(((-1.0)*x304)));
evalcond[1]=((((-1.0)*x299))+(((-1.0)*x302))+(((-1.0)*r02*x293))+((r01*x291))+((r00*x294)));
evalcond[2]=((((0.71)*cj1))+((cj1*x301))+(((0.15)*x290))+(((-1.0)*pz))+(((-1.0)*r20*x292))+(((-0.54)*x298)));
evalcond[3]=((((0.54)*x299))+(((-1.0)*r00*x292))+(((0.15)*x297))+(((-1.0)*px))+(((0.71)*sj1))+((sj1*x301)));
evalcond[4]=((((-1.0)*x290*x295))+((r21*x303))+((r22*x289))+x302+((r20*x296))+x299+((r20*x300)));
evalcond[5]=(((r02*x289))+x298+((r00*x296))+(((-1.0)*x295*x297))+((r01*x303))+(((-1.0)*x304))+((r00*x300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x305=((1.0)*sj4);
IkReal x306=((1.0)*r00);
CheckValue<IkReal> x307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x305))+((cj4*r22))+(((-1.0)*cj5*r21*x305)))),-1);
if(!x307.valid){
continue;
}
CheckValue<IkReal> x308 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x306)))),IkReal(((((-1.0)*cj4*cj5*r01))+(((-1.0)*r02*x305))+(((-1.0)*cj4*sj5*x306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x308.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x307.value)))+(x308.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x309=IKsin(j3);
IkReal x310=IKcos(j3);
IkReal x311=(cj4*r10);
IkReal x312=(cj4*r11);
IkReal x313=(cj5*x309);
IkReal x314=(sj5*x309);
IkReal x315=(sj4*x309);
IkReal x316=(sj5*x310);
IkReal x317=((1.0)*cj5*x310);
evalcond[0]=((((-1.0)*r20*x317))+((cj4*r21*x313))+((cj4*r20*x314))+((r21*x316))+((r22*x315)));
evalcond[1]=(((r02*x315))+(((-1.0)*r00*x317))+((r01*x316))+((cj4*r00*x314))+((cj4*r01*x313)));
evalcond[2]=((((-1.0)*r11*x314))+((cj5*x310*x312))+((r12*sj4*x310))+((x311*x316))+((r10*x313)));
evalcond[3]=((1.0)+((r11*x316))+((x312*x313))+(((-1.0)*r10*x317))+((x311*x314))+((r12*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x318=((0.76056338028169)*sj4);
IkReal x319=((0.211267605633803)*sj5);
IkReal x320=((0.76056338028169)*cj4);
IkReal x321=((0.211267605633803)*cj5);
if( IKabs((((r02*x320))+((r00*x321))+(((-1.0)*cj5*r01*x318))+(((-1.0)*r01*x319))+(((-1.0)*r00*sj5*x318))+(((1.40845070422535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x319))+((r20*x321))+(((-1.0)*r20*sj5*x318))+(((-1.0)*cj5*r21*x318))+((r22*x320))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x320))+((r00*x321))+(((-1.0)*cj5*r01*x318))+(((-1.0)*r01*x319))+(((-1.0)*r00*sj5*x318))+(((1.40845070422535)*px))))+IKsqr(((((-1.0)*r21*x319))+((r20*x321))+(((-1.0)*r20*sj5*x318))+(((-1.0)*cj5*r21*x318))+((r22*x320))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x320))+((r00*x321))+(((-1.0)*cj5*r01*x318))+(((-1.0)*r01*x319))+(((-1.0)*r00*sj5*x318))+(((1.40845070422535)*px))), ((((-1.0)*r21*x319))+((r20*x321))+(((-1.0)*r20*sj5*x318))+(((-1.0)*cj5*r21*x318))+((r22*x320))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x322=((1.0)*px);
IkReal x323=((0.54)*sj5);
IkReal x324=((0.15)*sj5);
IkReal x325=((0.54)*cj5);
IkReal x326=(cj3*cj4);
IkReal x327=((0.15)*cj5);
IkReal x328=((0.54)*r02);
IkReal x329=(cj3*sj4);
IkReal x330=((0.54)*r22);
IkReal x331=(r01*x324);
IkReal x332=((0.71)*(IKsin(j1)));
IkReal x333=(r00*x327);
IkReal x334=(r21*x324);
IkReal x335=((0.71)*(IKcos(j1)));
IkReal x336=(r20*x327);
IkReal x337=(x333+x322);
IkReal x338=(x335+x334);
IkReal x339=(x332+x331);
evalcond[0]=((((-1.0)*r21*sj4*x325))+(((-1.0)*r20*sj4*x323))+x336+pz+(((-1.0)*x338))+((cj4*x330)));
evalcond[1]=(((r01*sj4*x325))+((r00*sj4*x323))+x339+(((-1.0)*x337))+(((-1.0)*cj4*x328)));
evalcond[2]=(((r21*sj3*x323))+(((-1.0)*x329*x330))+x339+(((-1.0)*r20*x323*x326))+(((-1.0)*r20*sj3*x325))+(((-1.0)*r21*x325*x326))+(((-1.0)*x337)));
evalcond[3]=((((-1.0)*r01*sj3*x323))+((x328*x329))+((r01*x325*x326))+x338+(((-1.0)*pz))+((r00*sj3*x325))+(((-1.0)*x336))+((r00*x323*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x340=((1.0)*cj4);
IkReal x341=(sj1*sj4);
IkReal x342=(r20*sj5);
IkReal x343=(cj5*r01);
IkReal x344=(cj5*r21);
IkReal x345=(cj1*sj4);
IkReal x346=(r00*sj5);
if( IKabs(((((-1.0)*r02*sj1*x340))+(((-1.0)*cj1*r22*x340))+((x344*x345))+((x341*x346))+((x341*x343))+((x342*x345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x341*x344))+(((-1.0)*x341*x342))+((cj4*r22*sj1))+((x345*x346))+(((-1.0)*cj1*r02*x340))+((x343*x345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x340))+(((-1.0)*cj1*r22*x340))+((x344*x345))+((x341*x346))+((x341*x343))+((x342*x345))))+IKsqr(((((-1.0)*x341*x344))+(((-1.0)*x341*x342))+((cj4*r22*sj1))+((x345*x346))+(((-1.0)*cj1*r02*x340))+((x343*x345))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*sj1*x340))+(((-1.0)*cj1*r22*x340))+((x344*x345))+((x341*x346))+((x341*x343))+((x342*x345))), ((((-1.0)*x341*x344))+(((-1.0)*x341*x342))+((cj4*r22*sj1))+((x345*x346))+(((-1.0)*cj1*r02*x340))+((x343*x345))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x347=IKsin(j2);
IkReal x348=IKcos(j2);
IkReal x349=(cj3*sj4);
IkReal x350=(r21*sj5);
IkReal x351=(cj5*sj4);
IkReal x352=((0.15)*cj5);
IkReal x353=((1.0)*cj4);
IkReal x354=(sj4*sj5);
IkReal x355=((1.0)*sj3);
IkReal x356=(cj5*sj3);
IkReal x357=(r01*sj5);
IkReal x358=(sj1*x348);
IkReal x359=(cj1*x348);
IkReal x360=(cj3*cj4*sj5);
IkReal x361=((0.54)*x347);
IkReal x362=(sj1*x347);
IkReal x363=(cj3*cj4*cj5);
IkReal x364=((1.0)*cj1*x347);
evalcond[0]=((((-1.0)*r22*x353))+((r21*x351))+(((-1.0)*x364))+x358+((r20*x354)));
evalcond[1]=((((-1.0)*x362))+((r01*x351))+((r00*x354))+(((-1.0)*x359))+(((-1.0)*r02*x353)));
evalcond[2]=((((-0.54)*x358))+(((0.71)*cj1))+(((-1.0)*pz))+(((0.15)*x350))+((cj1*x361))+(((-1.0)*r20*x352)));
evalcond[3]=(((sj1*x361))+(((0.54)*x359))+(((-1.0)*px))+(((0.15)*x357))+(((-1.0)*r00*x352))+(((0.71)*sj1)));
evalcond[4]=(((r20*x360))+((r22*x349))+x359+x362+((r21*x363))+(((-1.0)*x350*x355))+((r20*x356)));
evalcond[5]=(((r01*x363))+(((-1.0)*x364))+((r00*x360))+((r00*x356))+x358+((r02*x349))+(((-1.0)*x355*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x365=((1.0)*r20);
IkReal x366=((1.0)*cj4);
CheckValue<IkReal> x367=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+(((-1.0)*r02*x366))+((cj5*r01*sj4)))),-1);
if(!x367.valid){
continue;
}
CheckValue<IkReal> x368 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x365))+((r21*sj5)))),IkReal(((((-1.0)*cj4*sj5*x365))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x368.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x367.value)))+(x368.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x369=IKsin(j3);
IkReal x370=IKcos(j3);
IkReal x371=(cj4*r10);
IkReal x372=(cj4*r11);
IkReal x373=(cj5*x369);
IkReal x374=(sj5*x369);
IkReal x375=(sj4*x369);
IkReal x376=(sj5*x370);
IkReal x377=((1.0)*cj5*x370);
evalcond[0]=((((-1.0)*r20*x377))+((cj4*r21*x373))+((r22*x375))+((r21*x376))+((cj4*r20*x374)));
evalcond[1]=(((r02*x375))+(((-1.0)*r00*x377))+((r01*x376))+((cj4*r00*x374))+((cj4*r01*x373)));
evalcond[2]=((((-1.0)*r11*x374))+((r12*sj4*x370))+((cj5*x370*x372))+((r10*x373))+((x371*x376)));
evalcond[3]=((1.0)+((x372*x373))+(((-1.0)*r10*x377))+((r12*x375))+((r11*x376))+((x371*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x378=((0.76056338028169)*sj4);
IkReal x379=((0.211267605633803)*sj5);
IkReal x380=((0.76056338028169)*cj4);
IkReal x381=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x378))+(((-1.0)*r01*x379))+((r02*x380))+(((-1.0)*cj5*r01*x378))+(((1.40845070422535)*px))+((r00*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x380))+(((-1.0)*r21*x379))+((r20*x381))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x378))+(((-1.0)*r20*sj5*x378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x378))+(((-1.0)*r01*x379))+((r02*x380))+(((-1.0)*cj5*r01*x378))+(((1.40845070422535)*px))+((r00*x381))))+IKsqr((((r22*x380))+(((-1.0)*r21*x379))+((r20*x381))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x378))+(((-1.0)*r20*sj5*x378))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x378))+(((-1.0)*r01*x379))+((r02*x380))+(((-1.0)*cj5*r01*x378))+(((1.40845070422535)*px))+((r00*x381))), (((r22*x380))+(((-1.0)*r21*x379))+((r20*x381))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x378))+(((-1.0)*r20*sj5*x378))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x382=((1.0)*px);
IkReal x383=((0.54)*sj5);
IkReal x384=((0.15)*sj5);
IkReal x385=((0.54)*cj5);
IkReal x386=(cj3*cj4);
IkReal x387=((0.15)*cj5);
IkReal x388=((0.54)*r02);
IkReal x389=(cj3*sj4);
IkReal x390=((0.54)*r22);
IkReal x391=(r01*x384);
IkReal x392=((0.71)*(IKsin(j1)));
IkReal x393=(r00*x387);
IkReal x394=(r21*x384);
IkReal x395=((0.71)*(IKcos(j1)));
IkReal x396=(r20*x387);
IkReal x397=(x382+x393);
IkReal x398=(x395+x394);
IkReal x399=(x391+x392);
evalcond[0]=((((-1.0)*x398))+((cj4*x390))+x396+pz+(((-1.0)*r20*sj4*x383))+(((-1.0)*r21*sj4*x385)));
evalcond[1]=((((-1.0)*x397))+((r01*sj4*x385))+x399+((r00*sj4*x383))+(((-1.0)*cj4*x388)));
evalcond[2]=((((-1.0)*x397))+((r21*sj3*x383))+(((-1.0)*r20*sj3*x385))+(((-1.0)*x389*x390))+x399+(((-1.0)*r20*x383*x386))+(((-1.0)*r21*x385*x386)));
evalcond[3]=(((r01*x385*x386))+(((-1.0)*x396))+((x388*x389))+((r00*x383*x386))+x398+(((-1.0)*pz))+((r00*sj3*x385))+(((-1.0)*r01*sj3*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x400=((1.0)*cj4);
IkReal x401=(sj1*sj4);
IkReal x402=(r20*sj5);
IkReal x403=(cj5*r01);
IkReal x404=(cj5*r21);
IkReal x405=(cj1*sj4);
IkReal x406=(r00*sj5);
if( IKabs(((((-1.0)*cj1*r22*x400))+((x404*x405))+(((-1.0)*r02*sj1*x400))+((x402*x405))+((x401*x406))+((x401*x403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x405*x406))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x400))+((x403*x405))+(((-1.0)*x401*x402))+(((-1.0)*x401*x404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x400))+((x404*x405))+(((-1.0)*r02*sj1*x400))+((x402*x405))+((x401*x406))+((x401*x403))))+IKsqr((((x405*x406))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x400))+((x403*x405))+(((-1.0)*x401*x402))+(((-1.0)*x401*x404))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x400))+((x404*x405))+(((-1.0)*r02*sj1*x400))+((x402*x405))+((x401*x406))+((x401*x403))), (((x405*x406))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x400))+((x403*x405))+(((-1.0)*x401*x402))+(((-1.0)*x401*x404))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x407=IKsin(j2);
IkReal x408=IKcos(j2);
IkReal x409=(cj3*sj4);
IkReal x410=(r21*sj5);
IkReal x411=(cj5*sj4);
IkReal x412=((0.15)*cj5);
IkReal x413=((1.0)*cj4);
IkReal x414=(sj4*sj5);
IkReal x415=((1.0)*sj3);
IkReal x416=(cj5*sj3);
IkReal x417=(r01*sj5);
IkReal x418=(sj1*x408);
IkReal x419=(cj1*x408);
IkReal x420=(cj3*cj4*sj5);
IkReal x421=((0.54)*x407);
IkReal x422=(sj1*x407);
IkReal x423=(cj3*cj4*cj5);
IkReal x424=((1.0)*cj1*x407);
evalcond[0]=((((-1.0)*x424))+((r21*x411))+x418+((r20*x414))+(((-1.0)*r22*x413)));
evalcond[1]=((((-1.0)*x422))+(((-1.0)*r02*x413))+((r01*x411))+((r00*x414))+(((-1.0)*x419)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x410))+(((-1.0)*r20*x412))+(((-1.0)*pz))+((cj1*x421))+(((-0.54)*x418)));
evalcond[3]=((((0.15)*x417))+(((0.54)*x419))+(((-1.0)*px))+(((0.71)*sj1))+(((-1.0)*r00*x412))+((sj1*x421)));
evalcond[4]=(((r20*x420))+((r21*x423))+((r22*x409))+x419+x422+((r20*x416))+(((-1.0)*x410*x415)));
evalcond[5]=((((-1.0)*x424))+((r00*x420))+((r01*x423))+((r00*x416))+x418+(((-1.0)*x415*x417))+((r02*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x425=((1.0)*cj4);
IkReal x426=(((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x425)));
j3eval[0]=x426;
j3eval[1]=IKsign(x426);
j3eval[2]=((IKabs(((((-1.0)*cj5*r01*x425))+(((-1.0)*r00*sj5*x425))+(((-1.0)*r02*sj4)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x427=((1.0)*sj5);
IkReal x428=((1.0)*cj5);
IkReal x429=((((-1.0)*r00*sj4*x427))+(((-1.0)*r01*sj4*x428))+((cj4*r02)));
j3eval[0]=x429;
j3eval[1]=IKsign(x429);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*r20*x428)))))+(IKabs(((((-1.0)*r22*sj4))+(((-1.0)*cj4*r20*x427))+(((-1.0)*cj4*r21*x428))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x430=cj4*cj4;
IkReal x431=r11*r11;
IkReal x432=cj5*cj5;
IkReal x433=r10*r10;
IkReal x434=r12*r12;
IkReal x435=(cj5*r11);
IkReal x436=((1.0)*x430);
IkReal x437=((2.0)*r10*sj5);
IkReal x438=(cj4*r12*sj4);
IkReal x439=(x432*x433);
IkReal x440=(x431*x432);
IkReal x441=((((-1.0)*x435*x437))+(((-1.0)*x440))+(((2.0)*x435*x438))+(((-1.0)*x434*x436))+(((-1.0)*x436*x439))+x439+x431+x434+((x430*x433))+((x430*x440))+((x430*x435*x437))+((x437*x438)));
j3eval[0]=x441;
j3eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs((((cj4*x435))+((r12*sj4))+((cj4*r10*sj5))))));
j3eval[2]=IKsign(x441);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x442=cj4*cj4;
IkReal x443=r11*r11;
IkReal x444=cj5*cj5;
IkReal x445=r10*r10;
IkReal x446=r12*r12;
IkReal x447=(cj5*r11);
IkReal x448=((2.0)*r10*sj5);
IkReal x449=(cj4*r12*sj4);
IkReal x450=((1.0)*x442);
IkReal x451=(x444*x445);
IkReal x452=(x443*x444);
CheckValue<IkReal> x453 = IKatan2WithCheck(IkReal((((cj4*x447))+((r12*sj4))+((cj4*r10*sj5)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454=IKPowWithIntegerCheck(IKsign(((((-1.0)*x446*x450))+(((-1.0)*x452))+x446+x443+x451+(((-1.0)*x447*x448))+(((-1.0)*x450*x451))+((x442*x452))+((x442*x445))+((x442*x447*x448))+((x448*x449))+(((2.0)*x447*x449)))),-1);
if(!x454.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x453.value)+(((1.5707963267949)*(x454.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x455=IKsin(j3);
IkReal x456=IKcos(j3);
IkReal x457=(cj4*r10);
IkReal x458=(cj4*r11);
IkReal x459=(cj5*x455);
IkReal x460=(sj5*x455);
IkReal x461=(sj4*x455);
IkReal x462=(sj5*x456);
IkReal x463=((1.0)*cj5*x456);
evalcond[0]=(((r22*x461))+((cj4*r21*x459))+((cj4*r20*x460))+((r21*x462))+(((-1.0)*r20*x463)));
evalcond[1]=(((cj4*r00*x460))+((cj4*r01*x459))+(((-1.0)*r00*x463))+((r02*x461))+((r01*x462)));
evalcond[2]=(((cj5*x456*x458))+((r12*sj4*x456))+(((-1.0)*r11*x460))+((r10*x459))+((x457*x462)));
evalcond[3]=((-1.0)+((r12*x461))+(((-1.0)*r10*x463))+((r11*x462))+((x458*x459))+((x457*x460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x464=((0.76056338028169)*sj4);
IkReal x465=((0.211267605633803)*sj5);
IkReal x466=((0.76056338028169)*cj4);
IkReal x467=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x467))+((r00*sj5*x464))+(((-1.40845070422535)*px))+(((-1.0)*r02*x466))+((r01*x465))+((cj5*r01*x464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x466))+((r20*x467))+(((-1.0)*r20*sj5*x464))+(((-1.0)*cj5*r21*x464))+(((1.40845070422535)*pz))+(((-1.0)*r21*x465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x467))+((r00*sj5*x464))+(((-1.40845070422535)*px))+(((-1.0)*r02*x466))+((r01*x465))+((cj5*r01*x464))))+IKsqr((((r22*x466))+((r20*x467))+(((-1.0)*r20*sj5*x464))+(((-1.0)*cj5*r21*x464))+(((1.40845070422535)*pz))+(((-1.0)*r21*x465))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x467))+((r00*sj5*x464))+(((-1.40845070422535)*px))+(((-1.0)*r02*x466))+((r01*x465))+((cj5*r01*x464))), (((r22*x466))+((r20*x467))+(((-1.0)*r20*sj5*x464))+(((-1.0)*cj5*r21*x464))+(((1.40845070422535)*pz))+(((-1.0)*r21*x465))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x468=((0.54)*sj5);
IkReal x469=((0.15)*sj5);
IkReal x470=((0.54)*cj5);
IkReal x471=(cj3*cj4);
IkReal x472=((0.15)*cj5);
IkReal x473=((0.54)*r02);
IkReal x474=(cj3*sj4);
IkReal x475=((0.54)*r22);
IkReal x476=(r20*x472);
IkReal x477=(r21*x469);
IkReal x478=((0.71)*(IKcos(j1)));
IkReal x479=(r01*x469);
IkReal x480=((0.71)*(IKsin(j1)));
IkReal x481=(r00*x472);
IkReal x482=(x476+pz);
IkReal x483=(x477+x478);
IkReal x484=(x481+x480);
evalcond[0]=(((cj4*x475))+(((-1.0)*x483))+x482+(((-1.0)*r21*sj4*x470))+(((-1.0)*r20*sj4*x468)));
evalcond[1]=(((cj4*x473))+(((-1.0)*r00*sj4*x468))+(((-1.0)*x479))+(((-1.0)*r01*sj4*x470))+x484+px);
evalcond[2]=(((x473*x474))+(((-1.0)*x483))+((r01*x470*x471))+((r00*x468*x471))+x482+((r00*sj3*x470))+(((-1.0)*r01*sj3*x468)));
evalcond[3]=((((-1.0)*x484))+((r20*x468*x471))+(((-1.0)*px))+x479+(((-1.0)*r21*sj3*x468))+((r21*x470*x471))+((x474*x475))+((r20*sj3*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x485=(cj4*r22);
IkReal x486=((1.0)*cj1);
IkReal x487=(r20*sj5);
IkReal x488=(cj4*r02);
IkReal x489=(cj5*r21);
IkReal x490=(cj1*sj4);
IkReal x491=(cj5*r01);
IkReal x492=(r00*sj5);
IkReal x493=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x491*x493))+((x489*x490))+((sj1*x488))+((x487*x490))+(((-1.0)*x492*x493))+(((-1.0)*x485*x486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x489*x493))+(((-1.0)*sj4*x486*x492))+(((-1.0)*sj4*x486*x491))+((sj1*x485))+(((-1.0)*x487*x493))+((cj1*x488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x491*x493))+((x489*x490))+((sj1*x488))+((x487*x490))+(((-1.0)*x492*x493))+(((-1.0)*x485*x486))))+IKsqr(((((-1.0)*x489*x493))+(((-1.0)*sj4*x486*x492))+(((-1.0)*sj4*x486*x491))+((sj1*x485))+(((-1.0)*x487*x493))+((cj1*x488))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x491*x493))+((x489*x490))+((sj1*x488))+((x487*x490))+(((-1.0)*x492*x493))+(((-1.0)*x485*x486))), ((((-1.0)*x489*x493))+(((-1.0)*sj4*x486*x492))+(((-1.0)*sj4*x486*x491))+((sj1*x485))+(((-1.0)*x487*x493))+((cj1*x488))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x494=IKcos(j2);
IkReal x495=IKsin(j2);
IkReal x496=(cj3*sj4);
IkReal x497=(r21*sj5);
IkReal x498=(cj5*sj4);
IkReal x499=((0.15)*cj5);
IkReal x500=((1.0)*cj4);
IkReal x501=(sj4*sj5);
IkReal x502=((1.0)*sj3);
IkReal x503=(cj5*sj3);
IkReal x504=(r01*sj5);
IkReal x505=(cj1*x494);
IkReal x506=(sj1*x495);
IkReal x507=(cj3*cj4*sj5);
IkReal x508=(cj1*x495);
IkReal x509=(sj1*x494);
IkReal x510=(cj3*cj4*cj5);
IkReal x511=(x505+x506);
evalcond[0]=(((r00*x501))+x511+((r01*x498))+(((-1.0)*r02*x500)));
evalcond[1]=(((r20*x501))+(((-1.0)*r22*x500))+x509+((r21*x498))+(((-1.0)*x508)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*pz))+(((0.54)*x508))+(((-0.54)*x509))+(((0.15)*x497))+(((-1.0)*r20*x499)));
evalcond[3]=((((-1.0)*r00*x499))+(((0.15)*x504))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x505))+(((-0.54)*x506)));
evalcond[4]=(((r20*x507))+((r20*x503))+(((-1.0)*x497*x502))+((r22*x496))+x511+((r21*x510)));
evalcond[5]=(((r01*x510))+((r02*x496))+(((-1.0)*x502*x504))+((r00*x507))+((r00*x503))+x508+(((-1.0)*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x512=((1.0)*sj5);
IkReal x513=((1.0)*cj5);
CheckValue<IkReal> x514 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x513)))),IkReal(((((-1.0)*cj4*r20*x512))+(((-1.0)*cj4*r21*x513))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
CheckValue<IkReal> x515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj4*x513))+(((-1.0)*r00*sj4*x512))+((cj4*r02)))),-1);
if(!x515.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x514.value)+(((1.5707963267949)*(x515.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x516=IKsin(j3);
IkReal x517=IKcos(j3);
IkReal x518=(cj4*r10);
IkReal x519=(cj4*r11);
IkReal x520=(cj5*x516);
IkReal x521=(sj5*x516);
IkReal x522=(sj4*x516);
IkReal x523=(sj5*x517);
IkReal x524=((1.0)*cj5*x517);
evalcond[0]=(((r21*x523))+((r22*x522))+(((-1.0)*r20*x524))+((cj4*r20*x521))+((cj4*r21*x520)));
evalcond[1]=(((r02*x522))+((cj4*r01*x520))+(((-1.0)*r00*x524))+((cj4*r00*x521))+((r01*x523)));
evalcond[2]=(((cj5*x517*x519))+(((-1.0)*r11*x521))+((x518*x523))+((r10*x520))+((r12*sj4*x517)));
evalcond[3]=((-1.0)+((x519*x520))+((r11*x523))+(((-1.0)*r10*x524))+((r12*x522))+((x518*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x525=((0.76056338028169)*sj4);
IkReal x526=((0.211267605633803)*sj5);
IkReal x527=((0.76056338028169)*cj4);
IkReal x528=((0.211267605633803)*cj5);
if( IKabs((((r00*sj5*x525))+(((-1.0)*r00*x528))+(((-1.0)*r02*x527))+(((-1.40845070422535)*px))+((cj5*r01*x525))+((r01*x526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x528))+(((-1.0)*r21*x526))+(((-1.0)*r20*sj5*x525))+((r22*x527))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5*x525))+(((-1.0)*r00*x528))+(((-1.0)*r02*x527))+(((-1.40845070422535)*px))+((cj5*r01*x525))+((r01*x526))))+IKsqr((((r20*x528))+(((-1.0)*r21*x526))+(((-1.0)*r20*sj5*x525))+((r22*x527))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x525))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj5*x525))+(((-1.0)*r00*x528))+(((-1.0)*r02*x527))+(((-1.40845070422535)*px))+((cj5*r01*x525))+((r01*x526))), (((r20*x528))+(((-1.0)*r21*x526))+(((-1.0)*r20*sj5*x525))+((r22*x527))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x525))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x529=((0.54)*sj5);
IkReal x530=((0.15)*sj5);
IkReal x531=((0.54)*cj5);
IkReal x532=(cj3*cj4);
IkReal x533=((0.15)*cj5);
IkReal x534=((0.54)*r02);
IkReal x535=(cj3*sj4);
IkReal x536=((0.54)*r22);
IkReal x537=(r20*x533);
IkReal x538=(r21*x530);
IkReal x539=((0.71)*(IKcos(j1)));
IkReal x540=(r01*x530);
IkReal x541=((0.71)*(IKsin(j1)));
IkReal x542=(r00*x533);
IkReal x543=(pz+x537);
IkReal x544=(x539+x538);
IkReal x545=(x541+x542);
evalcond[0]=(((cj4*x536))+(((-1.0)*x544))+x543+(((-1.0)*r21*sj4*x531))+(((-1.0)*r20*sj4*x529)));
evalcond[1]=(((cj4*x534))+(((-1.0)*r01*sj4*x531))+(((-1.0)*x540))+(((-1.0)*r00*sj4*x529))+px+x545);
evalcond[2]=(((r00*x529*x532))+(((-1.0)*x544))+x543+((x534*x535))+((r01*x531*x532))+((r00*sj3*x531))+(((-1.0)*r01*sj3*x529)));
evalcond[3]=(((r21*x531*x532))+((r20*x529*x532))+(((-1.0)*x545))+(((-1.0)*px))+x540+(((-1.0)*r21*sj3*x529))+((r20*sj3*x531))+((x535*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x546=(cj4*r22);
IkReal x547=((1.0)*cj1);
IkReal x548=(r20*sj5);
IkReal x549=(cj4*r02);
IkReal x550=(cj5*r21);
IkReal x551=(cj1*sj4);
IkReal x552=(cj5*r01);
IkReal x553=(r00*sj5);
IkReal x554=((1.0)*sj1*sj4);
if( IKabs((((x548*x551))+((sj1*x549))+(((-1.0)*x553*x554))+(((-1.0)*x552*x554))+((x550*x551))+(((-1.0)*x546*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x546))+(((-1.0)*x550*x554))+(((-1.0)*x548*x554))+((cj1*x549))+(((-1.0)*sj4*x547*x552))+(((-1.0)*sj4*x547*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x548*x551))+((sj1*x549))+(((-1.0)*x553*x554))+(((-1.0)*x552*x554))+((x550*x551))+(((-1.0)*x546*x547))))+IKsqr((((sj1*x546))+(((-1.0)*x550*x554))+(((-1.0)*x548*x554))+((cj1*x549))+(((-1.0)*sj4*x547*x552))+(((-1.0)*sj4*x547*x553))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x548*x551))+((sj1*x549))+(((-1.0)*x553*x554))+(((-1.0)*x552*x554))+((x550*x551))+(((-1.0)*x546*x547))), (((sj1*x546))+(((-1.0)*x550*x554))+(((-1.0)*x548*x554))+((cj1*x549))+(((-1.0)*sj4*x547*x552))+(((-1.0)*sj4*x547*x553))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x555=IKcos(j2);
IkReal x556=IKsin(j2);
IkReal x557=(cj3*sj4);
IkReal x558=(r21*sj5);
IkReal x559=(cj5*sj4);
IkReal x560=((0.15)*cj5);
IkReal x561=((1.0)*cj4);
IkReal x562=(sj4*sj5);
IkReal x563=((1.0)*sj3);
IkReal x564=(cj5*sj3);
IkReal x565=(r01*sj5);
IkReal x566=(cj1*x555);
IkReal x567=(sj1*x556);
IkReal x568=(cj3*cj4*sj5);
IkReal x569=(cj1*x556);
IkReal x570=(sj1*x555);
IkReal x571=(cj3*cj4*cj5);
IkReal x572=(x566+x567);
evalcond[0]=(((r00*x562))+x572+((r01*x559))+(((-1.0)*r02*x561)));
evalcond[1]=(x570+(((-1.0)*x569))+(((-1.0)*r22*x561))+((r20*x562))+((r21*x559)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x570))+(((-1.0)*pz))+(((0.15)*x558))+(((0.54)*x569))+(((-1.0)*r20*x560)));
evalcond[3]=((((0.15)*x565))+(((-0.54)*x566))+(((-0.54)*x567))+(((-0.71)*sj1))+(((-1.0)*px))+(((-1.0)*r00*x560)));
evalcond[4]=((((-1.0)*x558*x563))+x572+((r22*x557))+((r20*x568))+((r20*x564))+((r21*x571)));
evalcond[5]=(((r01*x571))+((r02*x557))+((r00*x568))+((r00*x564))+(((-1.0)*x570))+x569+(((-1.0)*x563*x565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x573=((1.0)*cj4);
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*r00*sj5*x573))+(((-1.0)*cj5*r01*x573))+(((-1.0)*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x573)))),-1);
if(!x575.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x574.value)+(((1.5707963267949)*(x575.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x576=IKsin(j3);
IkReal x577=IKcos(j3);
IkReal x578=(cj4*r10);
IkReal x579=(cj4*r11);
IkReal x580=(cj5*x576);
IkReal x581=(sj5*x576);
IkReal x582=(sj4*x576);
IkReal x583=(sj5*x577);
IkReal x584=((1.0)*cj5*x577);
evalcond[0]=(((cj4*r20*x581))+(((-1.0)*r20*x584))+((cj4*r21*x580))+((r22*x582))+((r21*x583)));
evalcond[1]=(((r02*x582))+((r01*x583))+((cj4*r01*x580))+(((-1.0)*r00*x584))+((cj4*r00*x581)));
evalcond[2]=(((r12*sj4*x577))+((x578*x583))+((r10*x580))+((cj5*x577*x579))+(((-1.0)*r11*x581)));
evalcond[3]=((-1.0)+((x578*x581))+((x579*x580))+((r11*x583))+((r12*x582))+(((-1.0)*r10*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x585=((0.76056338028169)*sj4);
IkReal x586=((0.211267605633803)*sj5);
IkReal x587=((0.76056338028169)*cj4);
IkReal x588=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r02*x587))+((r00*sj5*x585))+(((-1.40845070422535)*px))+((r01*x586))+((cj5*r01*x585))+(((-1.0)*r00*x588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x588))+(((-1.0)*r21*x586))+(((1.40845070422535)*pz))+((r22*x587))+(((-1.0)*cj5*r21*x585))+(((-1.0)*r20*sj5*x585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x587))+((r00*sj5*x585))+(((-1.40845070422535)*px))+((r01*x586))+((cj5*r01*x585))+(((-1.0)*r00*x588))))+IKsqr((((r20*x588))+(((-1.0)*r21*x586))+(((1.40845070422535)*pz))+((r22*x587))+(((-1.0)*cj5*r21*x585))+(((-1.0)*r20*sj5*x585))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x587))+((r00*sj5*x585))+(((-1.40845070422535)*px))+((r01*x586))+((cj5*r01*x585))+(((-1.0)*r00*x588))), (((r20*x588))+(((-1.0)*r21*x586))+(((1.40845070422535)*pz))+((r22*x587))+(((-1.0)*cj5*r21*x585))+(((-1.0)*r20*sj5*x585))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x589=((0.54)*sj5);
IkReal x590=((0.15)*sj5);
IkReal x591=((0.54)*cj5);
IkReal x592=(cj3*cj4);
IkReal x593=((0.15)*cj5);
IkReal x594=((0.54)*r02);
IkReal x595=(cj3*sj4);
IkReal x596=((0.54)*r22);
IkReal x597=(r20*x593);
IkReal x598=(r21*x590);
IkReal x599=((0.71)*(IKcos(j1)));
IkReal x600=(r01*x590);
IkReal x601=((0.71)*(IKsin(j1)));
IkReal x602=(r00*x593);
IkReal x603=(pz+x597);
IkReal x604=(x599+x598);
IkReal x605=(x602+x601);
evalcond[0]=((((-1.0)*r20*sj4*x589))+(((-1.0)*r21*sj4*x591))+x603+(((-1.0)*x604))+((cj4*x596)));
evalcond[1]=((((-1.0)*r00*sj4*x589))+px+(((-1.0)*r01*sj4*x591))+x605+(((-1.0)*x600))+((cj4*x594)));
evalcond[2]=(((x594*x595))+((r01*x591*x592))+((r00*x589*x592))+x603+(((-1.0)*r01*sj3*x589))+(((-1.0)*x604))+((r00*sj3*x591)));
evalcond[3]=(((r20*sj3*x591))+((x595*x596))+(((-1.0)*r21*sj3*x589))+((r20*x589*x592))+(((-1.0)*px))+x600+(((-1.0)*x605))+((r21*x591*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x606=(cj4*r22);
IkReal x607=((1.0)*cj1);
IkReal x608=(r20*sj5);
IkReal x609=(cj4*r02);
IkReal x610=(cj5*r21);
IkReal x611=(cj1*sj4);
IkReal x612=(cj5*r01);
IkReal x613=(r00*sj5);
IkReal x614=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x612*x614))+((sj1*x609))+((x608*x611))+(((-1.0)*x613*x614))+(((-1.0)*x606*x607))+((x610*x611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x606))+(((-1.0)*x610*x614))+(((-1.0)*sj4*x607*x612))+(((-1.0)*sj4*x607*x613))+((cj1*x609))+(((-1.0)*x608*x614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x612*x614))+((sj1*x609))+((x608*x611))+(((-1.0)*x613*x614))+(((-1.0)*x606*x607))+((x610*x611))))+IKsqr((((sj1*x606))+(((-1.0)*x610*x614))+(((-1.0)*sj4*x607*x612))+(((-1.0)*sj4*x607*x613))+((cj1*x609))+(((-1.0)*x608*x614))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x612*x614))+((sj1*x609))+((x608*x611))+(((-1.0)*x613*x614))+(((-1.0)*x606*x607))+((x610*x611))), (((sj1*x606))+(((-1.0)*x610*x614))+(((-1.0)*sj4*x607*x612))+(((-1.0)*sj4*x607*x613))+((cj1*x609))+(((-1.0)*x608*x614))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x615=IKcos(j2);
IkReal x616=IKsin(j2);
IkReal x617=(cj3*sj4);
IkReal x618=(r21*sj5);
IkReal x619=(cj5*sj4);
IkReal x620=((0.15)*cj5);
IkReal x621=((1.0)*cj4);
IkReal x622=(sj4*sj5);
IkReal x623=((1.0)*sj3);
IkReal x624=(cj5*sj3);
IkReal x625=(r01*sj5);
IkReal x626=(cj1*x615);
IkReal x627=(sj1*x616);
IkReal x628=(cj3*cj4*sj5);
IkReal x629=(cj1*x616);
IkReal x630=(sj1*x615);
IkReal x631=(cj3*cj4*cj5);
IkReal x632=(x627+x626);
evalcond[0]=(((r01*x619))+(((-1.0)*r02*x621))+((r00*x622))+x632);
evalcond[1]=(((r21*x619))+x630+(((-1.0)*x629))+((r20*x622))+(((-1.0)*r22*x621)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x618))+(((-1.0)*pz))+(((-1.0)*r20*x620))+(((-0.54)*x630))+(((0.54)*x629)));
evalcond[3]=((((0.15)*x625))+(((-1.0)*r00*x620))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x627))+(((-0.54)*x626)));
evalcond[4]=(((r21*x631))+x632+((r22*x617))+(((-1.0)*x618*x623))+((r20*x624))+((r20*x628)));
evalcond[5]=((((-1.0)*x623*x625))+((r01*x631))+((r02*x617))+((r00*x628))+((r00*x624))+x629+(((-1.0)*x630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x633=((1.0)*r20);
IkReal x634=((1.0)*cj4);
IkReal x635=(((cj5*r11*sj4))+(((-1.0)*r12*x634))+((r10*sj4*sj5)));
j3eval[0]=x635;
j3eval[1]=IKsign(x635);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x633)))))+(IKabs(((((-1.0)*cj5*r21*x634))+(((-1.0)*cj4*sj5*x633))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x636=((1.0)*cj5);
IkReal x637=((1.0)*sj4);
IkReal x638=(((cj4*r22))+(((-1.0)*r20*sj5*x637))+(((-1.0)*r21*sj4*x636)));
j3eval[0]=x638;
j3eval[1]=IKsign(x638);
j3eval[2]=((IKabs(((((-1.0)*r12*x637))+(((-1.0)*cj4*r10*sj5))+(((-1.0)*cj4*r11*x636)))))+(IKabs((((r11*sj5))+(((-1.0)*r10*x636))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x639=cj4*cj4;
IkReal x640=r00*r00;
IkReal x641=cj5*cj5;
IkReal x642=r01*r01;
IkReal x643=r02*r02;
IkReal x644=(r00*sj5);
IkReal x645=((2.0)*cj5*r01);
IkReal x646=(cj4*r02*sj4);
IkReal x647=((1.0)*x641);
IkReal x648=(x639*x640);
IkReal x649=((((-1.0)*x642*x647))+((x639*x644*x645))+(((-1.0)*x647*x648))+(((-1.0)*x639*x643))+(((2.0)*x644*x646))+((x640*x641))+((x645*x646))+(((-1.0)*x644*x645))+x643+x642+x648+((x639*x641*x642)));
j3eval[0]=x649;
j3eval[1]=IKsign(x649);
j3eval[2]=((IKabs((((cj4*x644))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x650=cj4*cj4;
IkReal x651=r00*r00;
IkReal x652=cj5*cj5;
IkReal x653=r01*r01;
IkReal x654=r02*r02;
IkReal x655=(r00*sj5);
IkReal x656=((2.0)*cj5*r01);
IkReal x657=(cj4*r02*sj4);
IkReal x658=((1.0)*x652);
IkReal x659=(x650*x651);
CheckValue<IkReal> x660 = IKatan2WithCheck(IkReal((((cj4*x655))+((r02*sj4))+((cj4*cj5*r01)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x660.valid){
continue;
}
CheckValue<IkReal> x661=IKPowWithIntegerCheck(IKsign(((((2.0)*x655*x657))+((x650*x652*x653))+(((-1.0)*x650*x654))+(((-1.0)*x655*x656))+((x651*x652))+((x656*x657))+x653+x654+x659+(((-1.0)*x653*x658))+(((-1.0)*x658*x659))+((x650*x655*x656)))),-1);
if(!x661.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x660.value)+(((1.5707963267949)*(x661.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x662=IKsin(j3);
IkReal x663=IKcos(j3);
IkReal x664=(cj4*r00);
IkReal x665=(sj5*x662);
IkReal x666=(sj4*x662);
IkReal x667=(sj5*x663);
IkReal x668=(cj4*cj5*x662);
IkReal x669=((1.0)*cj5*x663);
evalcond[0]=((((-1.0)*r20*x669))+((r21*x667))+((r21*x668))+((cj4*r20*x665))+((r22*x666)));
evalcond[1]=((((-1.0)*r10*x669))+((r11*x667))+((r11*x668))+((cj4*r10*x665))+((r12*x666)));
evalcond[2]=(((cj4*cj5*r01*x663))+((x664*x667))+((cj5*r00*x662))+(((-1.0)*r01*x665))+((r02*sj4*x663)));
evalcond[3]=((-1.0)+((r01*x668))+((r01*x667))+((x664*x665))+(((-1.0)*r00*x669))+((r02*x666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x670=((0.76056338028169)*sj4);
IkReal x671=((0.211267605633803)*sj5);
IkReal x672=((0.76056338028169)*cj4);
IkReal x673=((0.211267605633803)*cj5);
if( IKabs((((r10*x673))+((r12*x672))+(((-1.0)*r10*sj5*x670))+(((1.40845070422535)*py))+(((-1.0)*r11*x671))+(((-1.0)*cj5*r11*x670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x670))+(((-1.0)*cj5*r21*x670))+(((-1.0)*r21*x671))+((r22*x672))+((r20*x673))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x673))+((r12*x672))+(((-1.0)*r10*sj5*x670))+(((1.40845070422535)*py))+(((-1.0)*r11*x671))+(((-1.0)*cj5*r11*x670))))+IKsqr(((((-1.0)*r20*sj5*x670))+(((-1.0)*cj5*r21*x670))+(((-1.0)*r21*x671))+((r22*x672))+((r20*x673))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x673))+((r12*x672))+(((-1.0)*r10*sj5*x670))+(((1.40845070422535)*py))+(((-1.0)*r11*x671))+(((-1.0)*cj5*r11*x670))), ((((-1.0)*r20*sj5*x670))+(((-1.0)*cj5*r21*x670))+(((-1.0)*r21*x671))+((r22*x672))+((r20*x673))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x674=((1.0)*py);
IkReal x675=((0.54)*sj5);
IkReal x676=((0.15)*sj5);
IkReal x677=(cj5*r10);
IkReal x678=((0.54)*cj5);
IkReal x679=(cj3*cj4);
IkReal x680=((0.54)*r12);
IkReal x681=(cj3*sj4);
IkReal x682=((0.54)*r22);
IkReal x683=((0.71)*(IKsin(j1)));
IkReal x684=(r11*x676);
IkReal x685=((0.15)*x677);
IkReal x686=(r21*x676);
IkReal x687=((0.71)*(IKcos(j1)));
IkReal x688=((0.15)*cj5*r20);
IkReal x689=(x674+x685);
IkReal x690=(x687+x686);
IkReal x691=(x683+x684);
evalcond[0]=(((cj4*x682))+pz+(((-1.0)*r20*sj4*x675))+x688+(((-1.0)*x690))+(((-1.0)*r21*sj4*x678)));
evalcond[1]=(((r10*sj4*x675))+(((-1.0)*x689))+(((-1.0)*cj4*x680))+((r11*sj4*x678))+x691);
evalcond[2]=((((-1.0)*x681*x682))+(((-1.0)*x689))+(((-1.0)*r20*sj3*x678))+((r21*sj3*x675))+x691+(((-1.0)*r20*x675*x679))+(((-1.0)*r21*x678*x679)));
evalcond[3]=(((r11*x678*x679))+(((-1.0)*r11*sj3*x675))+(((-1.0)*x688))+(((0.54)*sj3*x677))+(((-1.0)*pz))+((r10*x675*x679))+((x680*x681))+x690);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x692=((1.0)*cj4);
IkReal x693=(r20*sj5);
IkReal x694=((1.0)*sj1*sj4);
IkReal x695=(cj1*cj5*sj4);
IkReal x696=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((sj1*x696))+(((-1.0)*cj1*r22*x692))+(((-1.0)*r12*sj1*x692))+((cj1*sj4*x693))+((r21*x695)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x696))+(((-1.0)*x693*x694))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x694))+((r11*x695))+(((-1.0)*cj1*r12*x692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((sj1*x696))+(((-1.0)*cj1*r22*x692))+(((-1.0)*r12*sj1*x692))+((cj1*sj4*x693))+((r21*x695))))+IKsqr((((cj1*x696))+(((-1.0)*x693*x694))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x694))+((r11*x695))+(((-1.0)*cj1*r12*x692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((sj1*x696))+(((-1.0)*cj1*r22*x692))+(((-1.0)*r12*sj1*x692))+((cj1*sj4*x693))+((r21*x695))), (((cj1*x696))+(((-1.0)*x693*x694))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x694))+((r11*x695))+(((-1.0)*cj1*r12*x692))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x697=IKsin(j2);
IkReal x698=IKcos(j2);
IkReal x699=((0.15)*sj5);
IkReal x700=((0.15)*cj5);
IkReal x701=(cj5*sj4);
IkReal x702=(cj3*cj4);
IkReal x703=(r20*sj5);
IkReal x704=(cj3*sj4);
IkReal x705=(r10*sj5);
IkReal x706=((1.0)*cj4);
IkReal x707=(cj5*sj3);
IkReal x708=(sj1*x698);
IkReal x709=(cj1*x698);
IkReal x710=((0.54)*x697);
IkReal x711=((1.0)*sj3*sj5);
IkReal x712=(sj1*x697);
IkReal x713=((1.0)*cj1*x697);
evalcond[0]=((((-1.0)*x713))+((r21*x701))+x708+(((-1.0)*r22*x706))+((sj4*x703)));
evalcond[1]=((((-1.0)*r12*x706))+(((-1.0)*x712))+(((-1.0)*x709))+((r11*x701))+((sj4*x705)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x708))+(((-1.0)*pz))+(((-1.0)*r20*x700))+((r21*x699))+((cj1*x710)));
evalcond[3]=((((-1.0)*py))+(((0.54)*x709))+(((-1.0)*r10*x700))+((r11*x699))+((sj1*x710))+(((0.71)*sj1)));
evalcond[4]=(((r22*x704))+((cj5*r21*x702))+((x702*x703))+(((-1.0)*r21*x711))+((r20*x707))+x712+x709);
evalcond[5]=((((-1.0)*r11*x711))+((x702*x705))+((cj5*r11*x702))+(((-1.0)*x713))+x708+((r12*x704))+((r10*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x714=((1.0)*cj5);
IkReal x715=((1.0)*sj4);
CheckValue<IkReal> x716=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r21*sj4*x714))+(((-1.0)*r20*sj5*x715)))),-1);
if(!x716.valid){
continue;
}
CheckValue<IkReal> x717 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x714)))),IkReal(((((-1.0)*r12*x715))+(((-1.0)*cj4*r11*x714))+(((-1.0)*cj4*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x717.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x716.value)))+(x717.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x718=IKsin(j3);
IkReal x719=IKcos(j3);
IkReal x720=(cj4*r00);
IkReal x721=(sj5*x718);
IkReal x722=(sj4*x718);
IkReal x723=(sj5*x719);
IkReal x724=(cj4*cj5*x718);
IkReal x725=((1.0)*cj5*x719);
evalcond[0]=((((-1.0)*r20*x725))+((cj4*r20*x721))+((r21*x724))+((r21*x723))+((r22*x722)));
evalcond[1]=(((cj4*r10*x721))+(((-1.0)*r10*x725))+((r11*x723))+((r11*x724))+((r12*x722)));
evalcond[2]=(((x720*x723))+(((-1.0)*r01*x721))+((r02*sj4*x719))+((cj4*cj5*r01*x719))+((cj5*r00*x718)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x725))+((x720*x721))+((r01*x723))+((r01*x724))+((r02*x722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x726=((0.76056338028169)*sj4);
IkReal x727=((0.211267605633803)*sj5);
IkReal x728=((0.76056338028169)*cj4);
IkReal x729=((0.211267605633803)*cj5);
if( IKabs((((r10*x729))+(((-1.0)*cj5*r11*x726))+(((-1.0)*r10*sj5*x726))+(((1.40845070422535)*py))+(((-1.0)*r11*x727))+((r12*x728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x726))+((r20*x729))+(((-1.0)*cj5*r21*x726))+(((1.40845070422535)*pz))+(((-1.0)*r21*x727))+((r22*x728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x729))+(((-1.0)*cj5*r11*x726))+(((-1.0)*r10*sj5*x726))+(((1.40845070422535)*py))+(((-1.0)*r11*x727))+((r12*x728))))+IKsqr(((((-1.0)*r20*sj5*x726))+((r20*x729))+(((-1.0)*cj5*r21*x726))+(((1.40845070422535)*pz))+(((-1.0)*r21*x727))+((r22*x728))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x729))+(((-1.0)*cj5*r11*x726))+(((-1.0)*r10*sj5*x726))+(((1.40845070422535)*py))+(((-1.0)*r11*x727))+((r12*x728))), ((((-1.0)*r20*sj5*x726))+((r20*x729))+(((-1.0)*cj5*r21*x726))+(((1.40845070422535)*pz))+(((-1.0)*r21*x727))+((r22*x728))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x730=((1.0)*py);
IkReal x731=((0.54)*sj5);
IkReal x732=((0.15)*sj5);
IkReal x733=(cj5*r10);
IkReal x734=((0.54)*cj5);
IkReal x735=(cj3*cj4);
IkReal x736=((0.54)*r12);
IkReal x737=(cj3*sj4);
IkReal x738=((0.54)*r22);
IkReal x739=((0.71)*(IKsin(j1)));
IkReal x740=(r11*x732);
IkReal x741=((0.15)*x733);
IkReal x742=(r21*x732);
IkReal x743=((0.71)*(IKcos(j1)));
IkReal x744=((0.15)*cj5*r20);
IkReal x745=(x730+x741);
IkReal x746=(x742+x743);
IkReal x747=(x739+x740);
evalcond[0]=((((-1.0)*r21*sj4*x734))+((cj4*x738))+(((-1.0)*r20*sj4*x731))+pz+x744+(((-1.0)*x746)));
evalcond[1]=(((r10*sj4*x731))+((r11*sj4*x734))+(((-1.0)*cj4*x736))+x747+(((-1.0)*x745)));
evalcond[2]=(((r21*sj3*x731))+(((-1.0)*r21*x734*x735))+(((-1.0)*x737*x738))+(((-1.0)*r20*x731*x735))+x747+(((-1.0)*x745))+(((-1.0)*r20*sj3*x734)));
evalcond[3]=((((0.54)*sj3*x733))+((x736*x737))+((r11*x734*x735))+((r10*x731*x735))+(((-1.0)*pz))+(((-1.0)*r11*sj3*x731))+x746+(((-1.0)*x744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x748=((1.0)*cj4);
IkReal x749=(r20*sj5);
IkReal x750=((1.0)*sj1*sj4);
IkReal x751=(cj1*cj5*sj4);
IkReal x752=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x748))+((r21*x751))+((cj1*sj4*x749))+((sj1*x752))+(((-1.0)*cj1*r22*x748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x748))+((cj1*x752))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x750))+((r11*x751))+(((-1.0)*x749*x750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x748))+((r21*x751))+((cj1*sj4*x749))+((sj1*x752))+(((-1.0)*cj1*r22*x748))))+IKsqr(((((-1.0)*cj1*r12*x748))+((cj1*x752))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x750))+((r11*x751))+(((-1.0)*x749*x750))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+(((-1.0)*r12*sj1*x748))+((r21*x751))+((cj1*sj4*x749))+((sj1*x752))+(((-1.0)*cj1*r22*x748))), ((((-1.0)*cj1*r12*x748))+((cj1*x752))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x750))+((r11*x751))+(((-1.0)*x749*x750))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x753=IKsin(j2);
IkReal x754=IKcos(j2);
IkReal x755=((0.15)*sj5);
IkReal x756=((0.15)*cj5);
IkReal x757=(cj5*sj4);
IkReal x758=(cj3*cj4);
IkReal x759=(r20*sj5);
IkReal x760=(cj3*sj4);
IkReal x761=(r10*sj5);
IkReal x762=((1.0)*cj4);
IkReal x763=(cj5*sj3);
IkReal x764=(sj1*x754);
IkReal x765=(cj1*x754);
IkReal x766=((0.54)*x753);
IkReal x767=((1.0)*sj3*sj5);
IkReal x768=(sj1*x753);
IkReal x769=((1.0)*cj1*x753);
evalcond[0]=(((sj4*x759))+(((-1.0)*x769))+((r21*x757))+x764+(((-1.0)*r22*x762)));
evalcond[1]=(((sj4*x761))+(((-1.0)*x765))+(((-1.0)*x768))+(((-1.0)*r12*x762))+((r11*x757)));
evalcond[2]=((((0.71)*cj1))+((cj1*x766))+((r21*x755))+(((-1.0)*pz))+(((-0.54)*x764))+(((-1.0)*r20*x756)));
evalcond[3]=(((sj1*x766))+(((-1.0)*r10*x756))+(((-1.0)*py))+((r11*x755))+(((0.71)*sj1))+(((0.54)*x765)));
evalcond[4]=(((r20*x763))+((x758*x759))+(((-1.0)*r21*x767))+((r22*x760))+x768+x765+((cj5*r21*x758)));
evalcond[5]=(((r10*x763))+(((-1.0)*x769))+((x758*x761))+(((-1.0)*r11*x767))+((r12*x760))+x764+((cj5*r11*x758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x770=((1.0)*r20);
IkReal x771=((1.0)*cj4);
CheckValue<IkReal> x772 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x770)))),IkReal(((((-1.0)*cj4*sj5*x770))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x772.valid){
continue;
}
CheckValue<IkReal> x773=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+(((-1.0)*r12*x771))+((r10*sj4*sj5)))),-1);
if(!x773.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x772.value)+(((1.5707963267949)*(x773.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x774=IKsin(j3);
IkReal x775=IKcos(j3);
IkReal x776=(cj4*r00);
IkReal x777=(sj5*x774);
IkReal x778=(sj4*x774);
IkReal x779=(sj5*x775);
IkReal x780=(cj4*cj5*x774);
IkReal x781=((1.0)*cj5*x775);
evalcond[0]=(((cj4*r20*x777))+((r22*x778))+(((-1.0)*r20*x781))+((r21*x779))+((r21*x780)));
evalcond[1]=(((r11*x779))+(((-1.0)*r10*x781))+((r12*x778))+((r11*x780))+((cj4*r10*x777)));
evalcond[2]=(((cj5*r00*x774))+((x776*x779))+((cj4*cj5*r01*x775))+((r02*sj4*x775))+(((-1.0)*r01*x777)));
evalcond[3]=((-1.0)+((x776*x777))+((r01*x780))+(((-1.0)*r00*x781))+((r01*x779))+((r02*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x782=((0.76056338028169)*sj4);
IkReal x783=((0.211267605633803)*sj5);
IkReal x784=((0.76056338028169)*cj4);
IkReal x785=((0.211267605633803)*cj5);
if( IKabs((((r10*x785))+(((-1.0)*cj5*r11*x782))+(((-1.0)*r11*x783))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x782))+((r12*x784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x785))+(((-1.0)*r20*sj5*x782))+((r22*x784))+(((-1.0)*r21*x783))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x785))+(((-1.0)*cj5*r11*x782))+(((-1.0)*r11*x783))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x782))+((r12*x784))))+IKsqr((((r20*x785))+(((-1.0)*r20*sj5*x782))+((r22*x784))+(((-1.0)*r21*x783))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x782))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x785))+(((-1.0)*cj5*r11*x782))+(((-1.0)*r11*x783))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x782))+((r12*x784))), (((r20*x785))+(((-1.0)*r20*sj5*x782))+((r22*x784))+(((-1.0)*r21*x783))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x782))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x786=((1.0)*py);
IkReal x787=((0.54)*sj5);
IkReal x788=((0.15)*sj5);
IkReal x789=(cj5*r10);
IkReal x790=((0.54)*cj5);
IkReal x791=(cj3*cj4);
IkReal x792=((0.54)*r12);
IkReal x793=(cj3*sj4);
IkReal x794=((0.54)*r22);
IkReal x795=((0.71)*(IKsin(j1)));
IkReal x796=(r11*x788);
IkReal x797=((0.15)*x789);
IkReal x798=(r21*x788);
IkReal x799=((0.71)*(IKcos(j1)));
IkReal x800=((0.15)*cj5*r20);
IkReal x801=(x797+x786);
IkReal x802=(x799+x798);
IkReal x803=(x795+x796);
evalcond[0]=((((-1.0)*r21*sj4*x790))+((cj4*x794))+pz+(((-1.0)*r20*sj4*x787))+x800+(((-1.0)*x802)));
evalcond[1]=(((r11*sj4*x790))+((r10*sj4*x787))+x803+(((-1.0)*x801))+(((-1.0)*cj4*x792)));
evalcond[2]=((((-1.0)*r20*sj3*x790))+(((-1.0)*r20*x787*x791))+(((-1.0)*r21*x790*x791))+(((-1.0)*x793*x794))+x803+(((-1.0)*x801))+((r21*sj3*x787)));
evalcond[3]=((((0.54)*sj3*x789))+((r10*x787*x791))+((r11*x790*x791))+(((-1.0)*pz))+((x792*x793))+(((-1.0)*r11*sj3*x787))+x802+(((-1.0)*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x804=((1.0)*cj4);
IkReal x805=(r20*sj5);
IkReal x806=((1.0)*sj1*sj4);
IkReal x807=(cj1*cj5*sj4);
IkReal x808=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((r21*x807))+(((-1.0)*r12*sj1*x804))+((cj1*sj4*x805))+(((-1.0)*cj1*r22*x804))+((sj1*x808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x805*x806))+((cj4*r22*sj1))+((cj1*x808))+((r11*x807))+(((-1.0)*cj5*r21*x806))+(((-1.0)*cj1*r12*x804)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((r21*x807))+(((-1.0)*r12*sj1*x804))+((cj1*sj4*x805))+(((-1.0)*cj1*r22*x804))+((sj1*x808))))+IKsqr(((((-1.0)*x805*x806))+((cj4*r22*sj1))+((cj1*x808))+((r11*x807))+(((-1.0)*cj5*r21*x806))+(((-1.0)*cj1*r12*x804))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((r21*x807))+(((-1.0)*r12*sj1*x804))+((cj1*sj4*x805))+(((-1.0)*cj1*r22*x804))+((sj1*x808))), ((((-1.0)*x805*x806))+((cj4*r22*sj1))+((cj1*x808))+((r11*x807))+(((-1.0)*cj5*r21*x806))+(((-1.0)*cj1*r12*x804))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x809=IKsin(j2);
IkReal x810=IKcos(j2);
IkReal x811=((0.15)*sj5);
IkReal x812=((0.15)*cj5);
IkReal x813=(cj5*sj4);
IkReal x814=(cj3*cj4);
IkReal x815=(r20*sj5);
IkReal x816=(cj3*sj4);
IkReal x817=(r10*sj5);
IkReal x818=((1.0)*cj4);
IkReal x819=(cj5*sj3);
IkReal x820=(sj1*x810);
IkReal x821=(cj1*x810);
IkReal x822=((0.54)*x809);
IkReal x823=((1.0)*sj3*sj5);
IkReal x824=(sj1*x809);
IkReal x825=((1.0)*cj1*x809);
evalcond[0]=(((sj4*x815))+(((-1.0)*x825))+(((-1.0)*r22*x818))+x820+((r21*x813)));
evalcond[1]=(((r11*x813))+((sj4*x817))+(((-1.0)*r12*x818))+(((-1.0)*x824))+(((-1.0)*x821)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x820))+(((-1.0)*pz))+((r21*x811))+((cj1*x822))+(((-1.0)*r20*x812)));
evalcond[3]=(((r11*x811))+((sj1*x822))+(((-1.0)*py))+(((-1.0)*r10*x812))+(((0.71)*sj1))+(((0.54)*x821)));
evalcond[4]=((((-1.0)*r21*x823))+((r20*x819))+((x814*x815))+x821+x824+((cj5*r21*x814))+((r22*x816)));
evalcond[5]=((((-1.0)*r11*x823))+((cj5*r11*x814))+(((-1.0)*x825))+((r10*x819))+((x814*x817))+x820+((r12*x816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x826=((1.0)*r10);
IkReal x827=((1.0)*cj4);
IkReal x828=(((cj5*r21*sj4))+(((-1.0)*r22*x827))+((r20*sj4*sj5)));
j3eval[0]=x828;
j3eval[1]=IKsign(x828);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11*x827))+(((-1.0)*cj4*sj5*x826))+(((-1.0)*r12*sj4)))))+(IKabs((((r11*sj5))+(((-1.0)*cj5*x826))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x829=((1.0)*sj5);
IkReal x830=((1.0)*cj5);
IkReal x831=((((-1.0)*r11*sj4*x830))+(((-1.0)*r10*sj4*x829))+((cj4*r12)));
j3eval[0]=x831;
j3eval[1]=IKsign(x831);
j3eval[2]=((IKabs(((((-1.0)*cj4*r20*x829))+(((-1.0)*cj4*r21*x830))+(((-1.0)*r22*sj4)))))+(IKabs(((((-1.0)*r20*x830))+((r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x832=cj5*cj5;
IkReal x833=cj4*cj4;
IkReal x834=r00*r00;
IkReal x835=r01*r01;
IkReal x836=r02*r02;
IkReal x837=(r00*sj5);
IkReal x838=((2.0)*cj5*r01);
IkReal x839=(cj4*r02*sj4);
IkReal x840=((1.0)*x833);
IkReal x841=(x832*x834);
IkReal x842=(x832*x835);
IkReal x843=((((-1.0)*x833*x837*x838))+((x833*x841))+(((-1.0)*x840*x842))+((x833*x836))+((x837*x838))+(((-1.0)*x834*x840))+(((-2.0)*x837*x839))+(((-1.0)*x835))+(((-1.0)*x836))+(((-1.0)*x838*x839))+(((-1.0)*x841))+x842);
j3eval[0]=x843;
j3eval[1]=IKsign(x843);
j3eval[2]=((IKabs((((r02*sj4))+((cj4*x837))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x844=cj5*cj5;
IkReal x845=cj4*cj4;
IkReal x846=r00*r00;
IkReal x847=r01*r01;
IkReal x848=r02*r02;
IkReal x849=(r00*sj5);
IkReal x850=((2.0)*cj5*r01);
IkReal x851=(cj4*r02*sj4);
IkReal x852=((1.0)*x845);
IkReal x853=(x844*x846);
IkReal x854=(x844*x847);
CheckValue<IkReal> x855=IKPowWithIntegerCheck(IKsign(((((-1.0)*x846*x852))+(((-1.0)*x853))+((x845*x853))+(((-1.0)*x852*x854))+(((-1.0)*x850*x851))+(((-2.0)*x849*x851))+((x845*x848))+(((-1.0)*x848))+(((-1.0)*x847))+(((-1.0)*x845*x849*x850))+x854+((x849*x850)))),-1);
if(!x855.valid){
continue;
}
CheckValue<IkReal> x856 = IKatan2WithCheck(IkReal((((cj4*x849))+((r02*sj4))+((cj4*cj5*r01)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x856.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x855.value)))+(x856.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x857=IKsin(j3);
IkReal x858=IKcos(j3);
IkReal x859=(cj4*r00);
IkReal x860=(sj5*x857);
IkReal x861=(sj4*x857);
IkReal x862=(sj5*x858);
IkReal x863=(cj4*cj5*x857);
IkReal x864=((1.0)*cj5*x858);
evalcond[0]=(((r21*x863))+((r21*x862))+((r22*x861))+((cj4*r20*x860))+(((-1.0)*r20*x864)));
evalcond[1]=((((-1.0)*r10*x864))+((cj4*r10*x860))+((r11*x862))+((r11*x863))+((r12*x861)));
evalcond[2]=((((-1.0)*r01*x860))+((cj5*r00*x857))+((x859*x862))+((cj4*cj5*r01*x858))+((r02*sj4*x858)));
evalcond[3]=((1.0)+((r01*x863))+((r01*x862))+(((-1.0)*r00*x864))+((x859*x860))+((r02*x861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x865=((0.76056338028169)*sj4);
IkReal x866=((0.211267605633803)*sj5);
IkReal x867=((0.76056338028169)*cj4);
IkReal x868=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*x868))+((cj5*r11*x865))+((r11*x866))+((r10*sj5*x865))+(((-1.40845070422535)*py))+(((-1.0)*r12*x867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x865))+((r22*x867))+(((-1.0)*cj5*r21*x865))+(((1.40845070422535)*pz))+(((-1.0)*r21*x866))+((r20*x868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x868))+((cj5*r11*x865))+((r11*x866))+((r10*sj5*x865))+(((-1.40845070422535)*py))+(((-1.0)*r12*x867))))+IKsqr(((((-1.0)*r20*sj5*x865))+((r22*x867))+(((-1.0)*cj5*r21*x865))+(((1.40845070422535)*pz))+(((-1.0)*r21*x866))+((r20*x868))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x868))+((cj5*r11*x865))+((r11*x866))+((r10*sj5*x865))+(((-1.40845070422535)*py))+(((-1.0)*r12*x867))), ((((-1.0)*r20*sj5*x865))+((r22*x867))+(((-1.0)*cj5*r21*x865))+(((1.40845070422535)*pz))+(((-1.0)*r21*x866))+((r20*x868))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x869=(r21*sj5);
IkReal x870=((0.54)*sj3);
IkReal x871=(cj5*r10);
IkReal x872=((0.54)*sj4);
IkReal x873=(cj5*r11);
IkReal x874=(r20*sj5);
IkReal x875=(cj5*r20);
IkReal x876=(cj5*r21);
IkReal x877=((0.54)*cj4);
IkReal x878=(r11*sj5);
IkReal x879=(r10*sj5);
IkReal x880=((0.15)*x875);
IkReal x881=((0.15)*x869);
IkReal x882=((0.71)*(IKcos(j1)));
IkReal x883=((0.15)*x878);
IkReal x884=((0.71)*(IKsin(j1)));
IkReal x885=((0.15)*x871);
IkReal x886=(pz+x880);
IkReal x887=(x881+x882);
IkReal x888=(x885+x884);
evalcond[0]=((((-1.0)*x872*x876))+(((-1.0)*x872*x874))+((r22*x877))+(((-1.0)*x887))+x886);
evalcond[1]=((((-1.0)*x872*x879))+(((-1.0)*x872*x873))+((r12*x877))+(((-1.0)*x883))+py+x888);
evalcond[2]=(((x870*x871))+(((-1.0)*x887))+((cj3*x873*x877))+(((-1.0)*x870*x878))+((cj3*r12*x872))+x886+((cj3*x877*x879)));
evalcond[3]=(((x870*x875))+(((-1.0)*x869*x870))+(((-1.0)*x888))+((cj3*x874*x877))+(((-1.0)*py))+((cj3*r22*x872))+x883+((cj3*x876*x877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x889=(cj1*cj4);
IkReal x890=(r20*sj5);
IkReal x891=(cj4*sj1);
IkReal x892=(cj5*r21);
IkReal x893=(cj1*sj4);
IkReal x894=(cj5*r11);
IkReal x895=(r10*sj5);
IkReal x896=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x895*x896))+((x892*x893))+(((-1.0)*x894*x896))+(((-1.0)*r22*x889))+((x890*x893))+((r12*x891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x892*x896))+(((-1.0)*x893*x894))+(((-1.0)*x893*x895))+((r22*x891))+(((-1.0)*x890*x896))+((r12*x889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x895*x896))+((x892*x893))+(((-1.0)*x894*x896))+(((-1.0)*r22*x889))+((x890*x893))+((r12*x891))))+IKsqr(((((-1.0)*x892*x896))+(((-1.0)*x893*x894))+(((-1.0)*x893*x895))+((r22*x891))+(((-1.0)*x890*x896))+((r12*x889))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x895*x896))+((x892*x893))+(((-1.0)*x894*x896))+(((-1.0)*r22*x889))+((x890*x893))+((r12*x891))), ((((-1.0)*x892*x896))+(((-1.0)*x893*x894))+(((-1.0)*x893*x895))+((r22*x891))+(((-1.0)*x890*x896))+((r12*x889))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x897=IKcos(j2);
IkReal x898=IKsin(j2);
IkReal x899=((0.15)*sj5);
IkReal x900=((0.15)*cj5);
IkReal x901=(r10*sj5);
IkReal x902=(cj5*sj4);
IkReal x903=(cj3*cj4);
IkReal x904=(r20*sj5);
IkReal x905=(cj3*sj4);
IkReal x906=((1.0)*cj4);
IkReal x907=(cj5*sj3);
IkReal x908=(cj1*x897);
IkReal x909=(sj1*x898);
IkReal x910=(cj1*x898);
IkReal x911=(sj1*x897);
IkReal x912=((1.0)*sj3*sj5);
IkReal x913=(x908+x909);
evalcond[0]=(((r11*x902))+(((-1.0)*r12*x906))+((sj4*x901))+x913);
evalcond[1]=(((r21*x902))+(((-1.0)*r22*x906))+(((-1.0)*x910))+((sj4*x904))+x911);
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x900))+(((-0.54)*x911))+(((-1.0)*pz))+(((0.54)*x910))+((r21*x899)));
evalcond[3]=(((r11*x899))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.54)*x908))+(((-0.54)*x909))+(((-1.0)*r10*x900)));
evalcond[4]=(((cj5*r21*x903))+((x903*x904))+((r20*x907))+(((-1.0)*r21*x912))+((r22*x905))+x913);
evalcond[5]=(((x901*x903))+((r12*x905))+((r10*x907))+(((-1.0)*r11*x912))+(((-1.0)*x911))+((cj5*r11*x903))+x910);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x914=((1.0)*sj5);
IkReal x915=((1.0)*cj5);
CheckValue<IkReal> x916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x914))+(((-1.0)*r11*sj4*x915))+((cj4*r12)))),-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x915)))),IkReal(((((-1.0)*cj4*r21*x915))+(((-1.0)*cj4*r20*x914))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x916.value)))+(x917.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x918=IKsin(j3);
IkReal x919=IKcos(j3);
IkReal x920=(cj4*r00);
IkReal x921=(sj5*x918);
IkReal x922=(sj4*x918);
IkReal x923=(sj5*x919);
IkReal x924=(cj4*cj5*x918);
IkReal x925=((1.0)*cj5*x919);
evalcond[0]=(((cj4*r20*x921))+((r22*x922))+(((-1.0)*r20*x925))+((r21*x924))+((r21*x923)));
evalcond[1]=((((-1.0)*r10*x925))+((r11*x923))+((r11*x924))+((cj4*r10*x921))+((r12*x922)));
evalcond[2]=(((x920*x923))+((cj4*cj5*r01*x919))+((r02*sj4*x919))+(((-1.0)*r01*x921))+((cj5*r00*x918)));
evalcond[3]=((1.0)+((x920*x921))+((r01*x923))+((r01*x924))+(((-1.0)*r00*x925))+((r02*x922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x926=((0.76056338028169)*sj4);
IkReal x927=((0.211267605633803)*sj5);
IkReal x928=((0.76056338028169)*cj4);
IkReal x929=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*x929))+(((-1.0)*r12*x928))+((r10*sj5*x926))+((cj5*r11*x926))+(((-1.40845070422535)*py))+((r11*x927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x927))+((r22*x928))+(((-1.0)*cj5*r21*x926))+(((-1.0)*r20*sj5*x926))+(((1.40845070422535)*pz))+((r20*x929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x929))+(((-1.0)*r12*x928))+((r10*sj5*x926))+((cj5*r11*x926))+(((-1.40845070422535)*py))+((r11*x927))))+IKsqr(((((-1.0)*r21*x927))+((r22*x928))+(((-1.0)*cj5*r21*x926))+(((-1.0)*r20*sj5*x926))+(((1.40845070422535)*pz))+((r20*x929))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x929))+(((-1.0)*r12*x928))+((r10*sj5*x926))+((cj5*r11*x926))+(((-1.40845070422535)*py))+((r11*x927))), ((((-1.0)*r21*x927))+((r22*x928))+(((-1.0)*cj5*r21*x926))+(((-1.0)*r20*sj5*x926))+(((1.40845070422535)*pz))+((r20*x929))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x930=(r21*sj5);
IkReal x931=((0.54)*sj3);
IkReal x932=(cj5*r10);
IkReal x933=((0.54)*sj4);
IkReal x934=(cj5*r11);
IkReal x935=(r20*sj5);
IkReal x936=(cj5*r20);
IkReal x937=(cj5*r21);
IkReal x938=((0.54)*cj4);
IkReal x939=(r11*sj5);
IkReal x940=(r10*sj5);
IkReal x941=((0.15)*x936);
IkReal x942=((0.15)*x930);
IkReal x943=((0.71)*(IKcos(j1)));
IkReal x944=((0.15)*x939);
IkReal x945=((0.71)*(IKsin(j1)));
IkReal x946=((0.15)*x932);
IkReal x947=(pz+x941);
IkReal x948=(x942+x943);
IkReal x949=(x945+x946);
evalcond[0]=((((-1.0)*x948))+((r22*x938))+(((-1.0)*x933*x937))+(((-1.0)*x933*x935))+x947);
evalcond[1]=((((-1.0)*x944))+(((-1.0)*x933*x940))+py+((r12*x938))+(((-1.0)*x933*x934))+x949);
evalcond[2]=((((-1.0)*x948))+(((-1.0)*x931*x939))+((cj3*r12*x933))+((x931*x932))+((cj3*x938*x940))+((cj3*x934*x938))+x947);
evalcond[3]=(((cj3*x937*x938))+(((-1.0)*x949))+(((-1.0)*x930*x931))+((cj3*x935*x938))+(((-1.0)*py))+((x931*x936))+((cj3*r22*x933))+x944);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x950=(cj1*cj4);
IkReal x951=(r20*sj5);
IkReal x952=(cj4*sj1);
IkReal x953=(cj5*r21);
IkReal x954=(cj1*sj4);
IkReal x955=(cj5*r11);
IkReal x956=(r10*sj5);
IkReal x957=((1.0)*sj1*sj4);
if( IKabs((((x951*x954))+(((-1.0)*r22*x950))+(((-1.0)*x956*x957))+((r12*x952))+(((-1.0)*x955*x957))+((x953*x954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x952))+(((-1.0)*x953*x957))+(((-1.0)*x954*x956))+(((-1.0)*x954*x955))+((r12*x950))+(((-1.0)*x951*x957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x951*x954))+(((-1.0)*r22*x950))+(((-1.0)*x956*x957))+((r12*x952))+(((-1.0)*x955*x957))+((x953*x954))))+IKsqr((((r22*x952))+(((-1.0)*x953*x957))+(((-1.0)*x954*x956))+(((-1.0)*x954*x955))+((r12*x950))+(((-1.0)*x951*x957))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x951*x954))+(((-1.0)*r22*x950))+(((-1.0)*x956*x957))+((r12*x952))+(((-1.0)*x955*x957))+((x953*x954))), (((r22*x952))+(((-1.0)*x953*x957))+(((-1.0)*x954*x956))+(((-1.0)*x954*x955))+((r12*x950))+(((-1.0)*x951*x957))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x958=IKcos(j2);
IkReal x959=IKsin(j2);
IkReal x960=((0.15)*sj5);
IkReal x961=((0.15)*cj5);
IkReal x962=(r10*sj5);
IkReal x963=(cj5*sj4);
IkReal x964=(cj3*cj4);
IkReal x965=(r20*sj5);
IkReal x966=(cj3*sj4);
IkReal x967=((1.0)*cj4);
IkReal x968=(cj5*sj3);
IkReal x969=(cj1*x958);
IkReal x970=(sj1*x959);
IkReal x971=(cj1*x959);
IkReal x972=(sj1*x958);
IkReal x973=((1.0)*sj3*sj5);
IkReal x974=(x970+x969);
evalcond[0]=(((sj4*x962))+((r11*x963))+(((-1.0)*r12*x967))+x974);
evalcond[1]=((((-1.0)*x971))+((sj4*x965))+((r21*x963))+(((-1.0)*r22*x967))+x972);
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x972))+(((0.54)*x971))+(((-1.0)*r20*x961))+(((-1.0)*pz))+((r21*x960)));
evalcond[3]=((((-0.54)*x970))+(((-1.0)*r10*x961))+(((-0.54)*x969))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x960)));
evalcond[4]=(((cj5*r21*x964))+((x964*x965))+((r20*x968))+x974+((r22*x966))+(((-1.0)*r21*x973)));
evalcond[5]=((((-1.0)*x972))+((x962*x964))+((cj5*r11*x964))+((r12*x966))+(((-1.0)*r11*x973))+x971+((r10*x968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x975=((1.0)*cj5);
IkReal x976=((1.0)*cj4);
CheckValue<IkReal> x977=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x976)))),-1);
if(!x977.valid){
continue;
}
CheckValue<IkReal> x978 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x975)))),IkReal(((((-1.0)*cj4*r11*x975))+(((-1.0)*r10*sj5*x976))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x977.value)))+(x978.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x979=IKsin(j3);
IkReal x980=IKcos(j3);
IkReal x981=(cj4*r00);
IkReal x982=(sj5*x979);
IkReal x983=(sj4*x979);
IkReal x984=(sj5*x980);
IkReal x985=(cj4*cj5*x979);
IkReal x986=((1.0)*cj5*x980);
evalcond[0]=((((-1.0)*r20*x986))+((r22*x983))+((r21*x985))+((r21*x984))+((cj4*r20*x982)));
evalcond[1]=((((-1.0)*r10*x986))+((r12*x983))+((r11*x984))+((r11*x985))+((cj4*r10*x982)));
evalcond[2]=(((x981*x984))+((cj5*r00*x979))+((cj4*cj5*r01*x980))+((r02*sj4*x980))+(((-1.0)*r01*x982)));
evalcond[3]=((1.0)+((x981*x982))+(((-1.0)*r00*x986))+((r01*x984))+((r01*x985))+((r02*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x987=((0.76056338028169)*sj4);
IkReal x988=((0.211267605633803)*sj5);
IkReal x989=((0.76056338028169)*cj4);
IkReal x990=((0.211267605633803)*cj5);
if( IKabs((((cj5*r11*x987))+(((-1.0)*r10*x990))+(((-1.40845070422535)*py))+((r10*sj5*x987))+((r11*x988))+(((-1.0)*r12*x989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x988))+((r22*x989))+(((-1.0)*r20*sj5*x987))+((r20*x990))+(((-1.0)*cj5*r21*x987))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*x987))+(((-1.0)*r10*x990))+(((-1.40845070422535)*py))+((r10*sj5*x987))+((r11*x988))+(((-1.0)*r12*x989))))+IKsqr(((((-1.0)*r21*x988))+((r22*x989))+(((-1.0)*r20*sj5*x987))+((r20*x990))+(((-1.0)*cj5*r21*x987))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r11*x987))+(((-1.0)*r10*x990))+(((-1.40845070422535)*py))+((r10*sj5*x987))+((r11*x988))+(((-1.0)*r12*x989))), ((((-1.0)*r21*x988))+((r22*x989))+(((-1.0)*r20*sj5*x987))+((r20*x990))+(((-1.0)*cj5*r21*x987))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x991=(r21*sj5);
IkReal x992=((0.54)*sj3);
IkReal x993=(cj5*r10);
IkReal x994=((0.54)*sj4);
IkReal x995=(cj5*r11);
IkReal x996=(r20*sj5);
IkReal x997=(cj5*r20);
IkReal x998=(cj5*r21);
IkReal x999=((0.54)*cj4);
IkReal x1000=(r11*sj5);
IkReal x1001=(r10*sj5);
IkReal x1002=((0.15)*x997);
IkReal x1003=((0.15)*x991);
IkReal x1004=((0.71)*(IKcos(j1)));
IkReal x1005=((0.15)*x1000);
IkReal x1006=((0.71)*(IKsin(j1)));
IkReal x1007=((0.15)*x993);
IkReal x1008=(x1002+pz);
IkReal x1009=(x1004+x1003);
IkReal x1010=(x1007+x1006);
evalcond[0]=(x1008+(((-1.0)*x994*x996))+(((-1.0)*x994*x998))+(((-1.0)*x1009))+((r22*x999)));
evalcond[1]=(((r12*x999))+x1010+(((-1.0)*x994*x995))+(((-1.0)*x1005))+(((-1.0)*x1001*x994))+py);
evalcond[2]=(x1008+(((-1.0)*x1009))+((x992*x993))+((cj3*x1001*x999))+((cj3*r12*x994))+(((-1.0)*x1000*x992))+((cj3*x995*x999)));
evalcond[3]=(x1005+((cj3*x996*x999))+((x992*x997))+(((-1.0)*x991*x992))+(((-1.0)*x1010))+((cj3*x998*x999))+(((-1.0)*py))+((cj3*r22*x994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1011=(cj1*cj4);
IkReal x1012=(r20*sj5);
IkReal x1013=(cj4*sj1);
IkReal x1014=(cj5*r21);
IkReal x1015=(cj1*sj4);
IkReal x1016=(cj5*r11);
IkReal x1017=(r10*sj5);
IkReal x1018=((1.0)*sj1*sj4);
if( IKabs((((x1014*x1015))+(((-1.0)*x1017*x1018))+(((-1.0)*r22*x1011))+((x1012*x1015))+(((-1.0)*x1016*x1018))+((r12*x1013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1012*x1018))+(((-1.0)*x1014*x1018))+((r22*x1013))+(((-1.0)*x1015*x1016))+(((-1.0)*x1015*x1017))+((r12*x1011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1014*x1015))+(((-1.0)*x1017*x1018))+(((-1.0)*r22*x1011))+((x1012*x1015))+(((-1.0)*x1016*x1018))+((r12*x1013))))+IKsqr(((((-1.0)*x1012*x1018))+(((-1.0)*x1014*x1018))+((r22*x1013))+(((-1.0)*x1015*x1016))+(((-1.0)*x1015*x1017))+((r12*x1011))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1014*x1015))+(((-1.0)*x1017*x1018))+(((-1.0)*r22*x1011))+((x1012*x1015))+(((-1.0)*x1016*x1018))+((r12*x1013))), ((((-1.0)*x1012*x1018))+(((-1.0)*x1014*x1018))+((r22*x1013))+(((-1.0)*x1015*x1016))+(((-1.0)*x1015*x1017))+((r12*x1011))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1019=IKcos(j2);
IkReal x1020=IKsin(j2);
IkReal x1021=((0.15)*sj5);
IkReal x1022=((0.15)*cj5);
IkReal x1023=(r10*sj5);
IkReal x1024=(cj5*sj4);
IkReal x1025=(cj3*cj4);
IkReal x1026=(r20*sj5);
IkReal x1027=(cj3*sj4);
IkReal x1028=((1.0)*cj4);
IkReal x1029=(cj5*sj3);
IkReal x1030=(cj1*x1019);
IkReal x1031=(sj1*x1020);
IkReal x1032=(cj1*x1020);
IkReal x1033=(sj1*x1019);
IkReal x1034=((1.0)*sj3*sj5);
IkReal x1035=(x1030+x1031);
evalcond[0]=((((-1.0)*r12*x1028))+x1035+((sj4*x1023))+((r11*x1024)));
evalcond[1]=((((-1.0)*r22*x1028))+((r21*x1024))+x1033+(((-1.0)*x1032))+((sj4*x1026)));
evalcond[2]=((((0.71)*cj1))+((r21*x1021))+(((-0.54)*x1033))+(((0.54)*x1032))+(((-1.0)*r20*x1022))+(((-1.0)*pz)));
evalcond[3]=((((-0.54)*x1031))+(((-0.54)*x1030))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1021))+(((-1.0)*r10*x1022)));
evalcond[4]=(((r20*x1029))+x1035+(((-1.0)*r21*x1034))+((r22*x1027))+((x1025*x1026))+((cj5*r21*x1025)));
evalcond[5]=(x1032+(((-1.0)*x1033))+((r12*x1027))+((x1023*x1025))+(((-1.0)*r11*x1034))+((cj5*r11*x1025))+((r10*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1036=((1.0)*sj4);
IkReal x1037=(cj0*r01);
IkReal x1038=(cj4*sj5);
IkReal x1039=(r11*sj0);
IkReal x1040=((1.0)*cj0*r00);
IkReal x1041=((1.0)*cj4*cj5);
IkReal x1042=((1.0)*r10*sj0);
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x1036))+((cj4*r22))+(((-1.0)*cj5*r21*x1036)))),-1);
if(!x1043.valid){
continue;
}
CheckValue<IkReal> x1044 = IKatan2WithCheck(IkReal((((sj5*x1039))+((sj5*x1037))+(((-1.0)*cj5*x1042))+(((-1.0)*cj5*x1040)))),IkReal(((((-1.0)*x1038*x1042))+(((-1.0)*x1038*x1040))+(((-1.0)*r12*sj0*x1036))+(((-1.0)*x1039*x1041))+(((-1.0)*x1037*x1041))+(((-1.0)*cj0*r02*x1036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1044.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1043.value)))+(x1044.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1045=IKsin(j3);
IkReal x1046=IKcos(j3);
IkReal x1047=(sj4*x1045);
IkReal x1048=(sj5*x1046);
IkReal x1049=(cj4*cj5*x1045);
IkReal x1050=(cj4*sj5*x1045);
IkReal x1051=((1.0)*cj5*x1046);
evalcond[0]=(((r20*x1050))+((r21*x1048))+((r21*x1049))+(((-1.0)*r20*x1051))+((r22*x1047)));
evalcond[1]=(cj0+((r11*x1048))+((r11*x1049))+(((-1.0)*r10*x1051))+((r10*x1050))+((r12*x1047)));
evalcond[2]=((((-1.0)*r00*x1051))+((r02*x1047))+(((-1.0)*sj0))+((r00*x1050))+((r01*x1048))+((r01*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1052=((0.76056338028169)*sj4);
IkReal x1053=((0.211267605633803)*sj5);
IkReal x1054=((0.76056338028169)*cj4);
IkReal x1055=((0.211267605633803)*cj5);
if( IKabs((((r12*x1054))+(((-1.0)*r11*x1053))+((r10*x1055))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1052))+(((-1.0)*cj5*r11*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1052))+(((-1.0)*r20*sj5*x1052))+((r20*x1055))+(((1.40845070422535)*pz))+((r22*x1054))+(((-1.0)*r21*x1053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1054))+(((-1.0)*r11*x1053))+((r10*x1055))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1052))+(((-1.0)*cj5*r11*x1052))))+IKsqr(((((-1.0)*cj5*r21*x1052))+(((-1.0)*r20*sj5*x1052))+((r20*x1055))+(((1.40845070422535)*pz))+((r22*x1054))+(((-1.0)*r21*x1053))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x1054))+(((-1.0)*r11*x1053))+((r10*x1055))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1052))+(((-1.0)*cj5*r11*x1052))), ((((-1.0)*cj5*r21*x1052))+(((-1.0)*r20*sj5*x1052))+((r20*x1055))+(((1.40845070422535)*pz))+((r22*x1054))+(((-1.0)*r21*x1053))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1056=((1.0)*py);
IkReal x1057=((0.54)*sj5);
IkReal x1058=((0.15)*sj5);
IkReal x1059=(cj5*r10);
IkReal x1060=((0.54)*cj5);
IkReal x1061=(cj3*cj4);
IkReal x1062=((0.54)*r12);
IkReal x1063=(cj3*sj4);
IkReal x1064=((0.54)*r22);
IkReal x1065=((0.71)*(IKsin(j1)));
IkReal x1066=(r11*x1058);
IkReal x1067=((0.15)*x1059);
IkReal x1068=(r21*x1058);
IkReal x1069=((0.71)*(IKcos(j1)));
IkReal x1070=((0.15)*cj5*r20);
IkReal x1071=(x1056+x1067);
IkReal x1072=(x1069+x1068);
IkReal x1073=(x1065+x1066);
evalcond[0]=((((-1.0)*r20*sj4*x1057))+x1070+(((-1.0)*r21*sj4*x1060))+pz+((cj4*x1064))+(((-1.0)*x1072)));
evalcond[1]=(x1073+((r11*sj4*x1060))+(((-1.0)*cj4*x1062))+((r10*sj4*x1057))+(((-1.0)*x1071)));
evalcond[2]=((((-1.0)*x1063*x1064))+x1073+(((-1.0)*r20*sj3*x1060))+(((-1.0)*r20*x1057*x1061))+((r21*sj3*x1057))+(((-1.0)*x1071))+(((-1.0)*r21*x1060*x1061)));
evalcond[3]=(x1072+(((0.54)*sj3*x1059))+(((-1.0)*pz))+((r10*x1057*x1061))+(((-1.0)*r11*sj3*x1057))+((x1062*x1063))+((r11*x1060*x1061))+(((-1.0)*x1070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1074=((1.0)*cj4);
IkReal x1075=(r20*sj5);
IkReal x1076=((1.0)*sj1*sj4);
IkReal x1077=(cj1*cj5*sj4);
IkReal x1078=(r10*sj4*sj5);
if( IKabs(((((-1.0)*cj1*r22*x1074))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1075))+((sj1*x1078))+(((-1.0)*r12*sj1*x1074))+((r21*x1077)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1075*x1076))+(((-1.0)*cj5*r21*x1076))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1074))+((cj1*x1078))+((r11*x1077)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x1074))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1075))+((sj1*x1078))+(((-1.0)*r12*sj1*x1074))+((r21*x1077))))+IKsqr(((((-1.0)*x1075*x1076))+(((-1.0)*cj5*r21*x1076))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1074))+((cj1*x1078))+((r11*x1077))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x1074))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1075))+((sj1*x1078))+(((-1.0)*r12*sj1*x1074))+((r21*x1077))), ((((-1.0)*x1075*x1076))+(((-1.0)*cj5*r21*x1076))+((cj4*r22*sj1))+(((-1.0)*cj1*r12*x1074))+((cj1*x1078))+((r11*x1077))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1079=IKsin(j2);
IkReal x1080=IKcos(j2);
IkReal x1081=((0.15)*sj5);
IkReal x1082=((0.15)*cj5);
IkReal x1083=(cj5*sj4);
IkReal x1084=(cj3*cj4);
IkReal x1085=(r20*sj5);
IkReal x1086=(cj3*sj4);
IkReal x1087=(r10*sj5);
IkReal x1088=((1.0)*cj4);
IkReal x1089=(cj5*sj3);
IkReal x1090=(sj1*x1080);
IkReal x1091=(cj1*x1080);
IkReal x1092=((0.54)*x1079);
IkReal x1093=((1.0)*sj3*sj5);
IkReal x1094=(sj1*x1079);
IkReal x1095=((1.0)*cj1*x1079);
evalcond[0]=(x1090+(((-1.0)*x1095))+((sj4*x1085))+(((-1.0)*r22*x1088))+((r21*x1083)));
evalcond[1]=(((r11*x1083))+(((-1.0)*x1091))+(((-1.0)*x1094))+((sj4*x1087))+(((-1.0)*r12*x1088)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1092))+(((-0.54)*x1090))+(((-1.0)*pz))+(((-1.0)*r20*x1082))+((r21*x1081)));
evalcond[3]=((((0.54)*x1091))+(((-1.0)*r10*x1082))+((sj1*x1092))+((r11*x1081))+(((-1.0)*py))+(((0.71)*sj1)));
evalcond[4]=(((cj5*r21*x1084))+x1094+x1091+((r20*x1089))+((r22*x1086))+(((-1.0)*r21*x1093))+((x1084*x1085)));
evalcond[5]=(x1090+((cj5*r11*x1084))+((r12*x1086))+(((-1.0)*x1095))+((r10*x1089))+(((-1.0)*r11*x1093))+((x1084*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1096=((0.76056338028169)*sj4);
IkReal x1097=((0.211267605633803)*sj5);
IkReal x1098=((0.76056338028169)*cj4);
IkReal x1099=((0.211267605633803)*cj5);
if( IKabs((((cj5*r11*x1096))+(((-1.40845070422535)*py))+((r11*x1097))+(((-1.0)*r12*x1098))+(((-1.0)*r10*x1099))+((r10*sj5*x1096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1096))+((r22*x1098))+(((-1.0)*cj5*r21*x1096))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1097))+((r20*x1099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*x1096))+(((-1.40845070422535)*py))+((r11*x1097))+(((-1.0)*r12*x1098))+(((-1.0)*r10*x1099))+((r10*sj5*x1096))))+IKsqr(((((-1.0)*r20*sj5*x1096))+((r22*x1098))+(((-1.0)*cj5*r21*x1096))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1097))+((r20*x1099))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r11*x1096))+(((-1.40845070422535)*py))+((r11*x1097))+(((-1.0)*r12*x1098))+(((-1.0)*r10*x1099))+((r10*sj5*x1096))), ((((-1.0)*r20*sj5*x1096))+((r22*x1098))+(((-1.0)*cj5*r21*x1096))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1097))+((r20*x1099))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1100=(r21*sj5);
IkReal x1101=((0.54)*sj3);
IkReal x1102=(cj5*r10);
IkReal x1103=((0.54)*sj4);
IkReal x1104=(cj5*r11);
IkReal x1105=(r20*sj5);
IkReal x1106=(cj5*r20);
IkReal x1107=(cj5*r21);
IkReal x1108=((0.54)*cj4);
IkReal x1109=(r11*sj5);
IkReal x1110=(r10*sj5);
IkReal x1111=((0.15)*x1106);
IkReal x1112=((0.15)*x1100);
IkReal x1113=((0.71)*(IKcos(j1)));
IkReal x1114=((0.15)*x1109);
IkReal x1115=((0.71)*(IKsin(j1)));
IkReal x1116=((0.15)*x1102);
IkReal x1117=(x1111+pz);
IkReal x1118=(x1113+x1112);
IkReal x1119=(x1115+x1116);
evalcond[0]=((((-1.0)*x1103*x1105))+(((-1.0)*x1103*x1107))+x1117+((r22*x1108))+(((-1.0)*x1118)));
evalcond[1]=((((-1.0)*x1103*x1104))+(((-1.0)*x1103*x1110))+x1119+py+((r12*x1108))+(((-1.0)*x1114)));
evalcond[2]=(x1117+((x1101*x1102))+((cj3*x1108*x1110))+((cj3*x1104*x1108))+((cj3*r12*x1103))+(((-1.0)*x1118))+(((-1.0)*x1101*x1109)));
evalcond[3]=(x1114+((cj3*x1105*x1108))+((x1101*x1106))+(((-1.0)*py))+(((-1.0)*x1100*x1101))+((cj3*x1107*x1108))+(((-1.0)*x1119))+((cj3*r22*x1103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1120=(cj1*cj4);
IkReal x1121=(r20*sj5);
IkReal x1122=(cj4*sj1);
IkReal x1123=(cj5*r21);
IkReal x1124=(cj1*sj4);
IkReal x1125=(cj5*r11);
IkReal x1126=(r10*sj5);
IkReal x1127=((1.0)*sj1*sj4);
if( IKabs((((x1121*x1124))+(((-1.0)*x1126*x1127))+((r12*x1122))+((x1123*x1124))+(((-1.0)*x1125*x1127))+(((-1.0)*r22*x1120)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1124*x1126))+(((-1.0)*x1124*x1125))+(((-1.0)*x1121*x1127))+(((-1.0)*x1123*x1127))+((r22*x1122))+((r12*x1120)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1121*x1124))+(((-1.0)*x1126*x1127))+((r12*x1122))+((x1123*x1124))+(((-1.0)*x1125*x1127))+(((-1.0)*r22*x1120))))+IKsqr(((((-1.0)*x1124*x1126))+(((-1.0)*x1124*x1125))+(((-1.0)*x1121*x1127))+(((-1.0)*x1123*x1127))+((r22*x1122))+((r12*x1120))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1121*x1124))+(((-1.0)*x1126*x1127))+((r12*x1122))+((x1123*x1124))+(((-1.0)*x1125*x1127))+(((-1.0)*r22*x1120))), ((((-1.0)*x1124*x1126))+(((-1.0)*x1124*x1125))+(((-1.0)*x1121*x1127))+(((-1.0)*x1123*x1127))+((r22*x1122))+((r12*x1120))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1128=IKcos(j2);
IkReal x1129=IKsin(j2);
IkReal x1130=((0.15)*sj5);
IkReal x1131=((0.15)*cj5);
IkReal x1132=(r10*sj5);
IkReal x1133=(cj5*sj4);
IkReal x1134=(cj3*cj4);
IkReal x1135=(r20*sj5);
IkReal x1136=(cj3*sj4);
IkReal x1137=((1.0)*cj4);
IkReal x1138=(cj5*sj3);
IkReal x1139=(cj1*x1128);
IkReal x1140=(sj1*x1129);
IkReal x1141=(cj1*x1129);
IkReal x1142=(sj1*x1128);
IkReal x1143=((1.0)*sj3*sj5);
IkReal x1144=(x1140+x1139);
evalcond[0]=(x1144+(((-1.0)*r12*x1137))+((sj4*x1132))+((r11*x1133)));
evalcond[1]=(x1142+((sj4*x1135))+((r21*x1133))+(((-1.0)*x1141))+(((-1.0)*r22*x1137)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x1141))+((r21*x1130))+(((-1.0)*pz))+(((-1.0)*r20*x1131))+(((-0.54)*x1142)));
evalcond[3]=((((-0.54)*x1139))+(((-1.0)*r10*x1131))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.54)*x1140))+((r11*x1130)));
evalcond[4]=(x1144+((x1134*x1135))+(((-1.0)*r21*x1143))+((r22*x1136))+((cj5*r21*x1134))+((r20*x1138)));
evalcond[5]=(x1141+((r10*x1138))+((cj5*r11*x1134))+(((-1.0)*x1142))+((r12*x1136))+(((-1.0)*r11*x1143))+((x1132*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1145=((0.76056338028169)*sj4);
IkReal x1146=((0.211267605633803)*sj5);
IkReal x1147=((0.76056338028169)*cj4);
IkReal x1148=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r01*x1146))+(((-1.0)*cj5*r01*x1145))+(((-1.0)*r00*sj5*x1145))+((r02*x1147))+(((1.40845070422535)*px))+((r00*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1147))+(((-1.0)*r21*x1146))+((r20*x1148))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1145))+(((-1.0)*cj5*r21*x1145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1146))+(((-1.0)*cj5*r01*x1145))+(((-1.0)*r00*sj5*x1145))+((r02*x1147))+(((1.40845070422535)*px))+((r00*x1148))))+IKsqr((((r22*x1147))+(((-1.0)*r21*x1146))+((r20*x1148))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1145))+(((-1.0)*cj5*r21*x1145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x1146))+(((-1.0)*cj5*r01*x1145))+(((-1.0)*r00*sj5*x1145))+((r02*x1147))+(((1.40845070422535)*px))+((r00*x1148))), (((r22*x1147))+(((-1.0)*r21*x1146))+((r20*x1148))+(((1.40845070422535)*pz))+(((-1.0)*r20*sj5*x1145))+(((-1.0)*cj5*r21*x1145))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1149=((1.0)*px);
IkReal x1150=((0.54)*sj5);
IkReal x1151=((0.15)*sj5);
IkReal x1152=((0.54)*cj5);
IkReal x1153=(cj3*cj4);
IkReal x1154=((0.15)*cj5);
IkReal x1155=((0.54)*r02);
IkReal x1156=(cj3*sj4);
IkReal x1157=((0.54)*r22);
IkReal x1158=(r01*x1151);
IkReal x1159=((0.71)*(IKsin(j1)));
IkReal x1160=(r00*x1154);
IkReal x1161=(r21*x1151);
IkReal x1162=((0.71)*(IKcos(j1)));
IkReal x1163=(r20*x1154);
IkReal x1164=(x1149+x1160);
IkReal x1165=(x1161+x1162);
IkReal x1166=(x1159+x1158);
evalcond[0]=(x1163+(((-1.0)*r20*sj4*x1150))+(((-1.0)*r21*sj4*x1152))+pz+((cj4*x1157))+(((-1.0)*x1165)));
evalcond[1]=(x1166+((r00*sj4*x1150))+(((-1.0)*cj4*x1155))+(((-1.0)*x1164))+((r01*sj4*x1152)));
evalcond[2]=(x1166+((r21*sj3*x1150))+(((-1.0)*x1156*x1157))+(((-1.0)*r21*x1152*x1153))+(((-1.0)*r20*sj3*x1152))+(((-1.0)*x1164))+(((-1.0)*r20*x1150*x1153)));
evalcond[3]=(((r00*sj3*x1152))+x1165+((r01*x1152*x1153))+(((-1.0)*r01*sj3*x1150))+(((-1.0)*pz))+((r00*x1150*x1153))+(((-1.0)*x1163))+((x1155*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1167=((1.0)*cj4);
IkReal x1168=(sj1*sj4);
IkReal x1169=(r20*sj5);
IkReal x1170=(cj5*r01);
IkReal x1171=(cj5*r21);
IkReal x1172=(cj1*sj4);
IkReal x1173=(r00*sj5);
if( IKabs((((x1168*x1170))+((x1168*x1173))+(((-1.0)*r02*sj1*x1167))+(((-1.0)*cj1*r22*x1167))+((x1169*x1172))+((x1171*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1167))+((x1172*x1173))+(((-1.0)*x1168*x1169))+(((-1.0)*x1168*x1171))+((x1170*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1168*x1170))+((x1168*x1173))+(((-1.0)*r02*sj1*x1167))+(((-1.0)*cj1*r22*x1167))+((x1169*x1172))+((x1171*x1172))))+IKsqr((((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1167))+((x1172*x1173))+(((-1.0)*x1168*x1169))+(((-1.0)*x1168*x1171))+((x1170*x1172))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1168*x1170))+((x1168*x1173))+(((-1.0)*r02*sj1*x1167))+(((-1.0)*cj1*r22*x1167))+((x1169*x1172))+((x1171*x1172))), (((cj4*r22*sj1))+(((-1.0)*cj1*r02*x1167))+((x1172*x1173))+(((-1.0)*x1168*x1169))+(((-1.0)*x1168*x1171))+((x1170*x1172))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1174=IKsin(j2);
IkReal x1175=IKcos(j2);
IkReal x1176=(cj3*sj4);
IkReal x1177=(r21*sj5);
IkReal x1178=(cj5*sj4);
IkReal x1179=((0.15)*cj5);
IkReal x1180=((1.0)*cj4);
IkReal x1181=(sj4*sj5);
IkReal x1182=((1.0)*sj3);
IkReal x1183=(cj5*sj3);
IkReal x1184=(r01*sj5);
IkReal x1185=(sj1*x1175);
IkReal x1186=(cj1*x1175);
IkReal x1187=(cj3*cj4*sj5);
IkReal x1188=((0.54)*x1174);
IkReal x1189=(sj1*x1174);
IkReal x1190=(cj3*cj4*cj5);
IkReal x1191=((1.0)*cj1*x1174);
evalcond[0]=(x1185+((r21*x1178))+(((-1.0)*x1191))+(((-1.0)*r22*x1180))+((r20*x1181)));
evalcond[1]=(((r00*x1181))+((r01*x1178))+(((-1.0)*x1189))+(((-1.0)*x1186))+(((-1.0)*r02*x1180)));
evalcond[2]=((((0.15)*x1177))+(((0.71)*cj1))+(((-1.0)*r20*x1179))+(((-0.54)*x1185))+(((-1.0)*pz))+((cj1*x1188)));
evalcond[3]=(((sj1*x1188))+(((-1.0)*px))+(((0.71)*sj1))+(((-1.0)*r00*x1179))+(((0.15)*x1184))+(((0.54)*x1186)));
evalcond[4]=(x1189+x1186+((r21*x1190))+((r22*x1176))+((r20*x1187))+((r20*x1183))+(((-1.0)*x1177*x1182)));
evalcond[5]=(((r02*x1176))+x1185+((r00*x1187))+((r00*x1183))+((r01*x1190))+(((-1.0)*x1191))+(((-1.0)*x1182*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1192=((0.76056338028169)*sj4);
IkReal x1193=((0.211267605633803)*sj5);
IkReal x1194=((0.76056338028169)*cj4);
IkReal x1195=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x1195))+((r01*x1193))+(((-1.40845070422535)*px))+((cj5*r01*x1192))+(((-1.0)*r02*x1194))+((r00*sj5*x1192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1192))+((r22*x1194))+(((-1.0)*r20*sj5*x1192))+(((1.40845070422535)*pz))+((r20*x1195))+(((-1.0)*r21*x1193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1195))+((r01*x1193))+(((-1.40845070422535)*px))+((cj5*r01*x1192))+(((-1.0)*r02*x1194))+((r00*sj5*x1192))))+IKsqr(((((-1.0)*cj5*r21*x1192))+((r22*x1194))+(((-1.0)*r20*sj5*x1192))+(((1.40845070422535)*pz))+((r20*x1195))+(((-1.0)*r21*x1193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1195))+((r01*x1193))+(((-1.40845070422535)*px))+((cj5*r01*x1192))+(((-1.0)*r02*x1194))+((r00*sj5*x1192))), ((((-1.0)*cj5*r21*x1192))+((r22*x1194))+(((-1.0)*r20*sj5*x1192))+(((1.40845070422535)*pz))+((r20*x1195))+(((-1.0)*r21*x1193))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1196=((0.54)*sj5);
IkReal x1197=((0.15)*sj5);
IkReal x1198=((0.54)*cj5);
IkReal x1199=(cj3*cj4);
IkReal x1200=((0.15)*cj5);
IkReal x1201=((0.54)*r02);
IkReal x1202=(cj3*sj4);
IkReal x1203=((0.54)*r22);
IkReal x1204=(r20*x1200);
IkReal x1205=(r21*x1197);
IkReal x1206=((0.71)*(IKcos(j1)));
IkReal x1207=(r01*x1197);
IkReal x1208=((0.71)*(IKsin(j1)));
IkReal x1209=(r00*x1200);
IkReal x1210=(x1204+pz);
IkReal x1211=(x1205+x1206);
IkReal x1212=(x1209+x1208);
evalcond[0]=((((-1.0)*r20*sj4*x1196))+x1210+(((-1.0)*r21*sj4*x1198))+(((-1.0)*x1211))+((cj4*x1203)));
evalcond[1]=(x1212+(((-1.0)*r00*sj4*x1196))+px+(((-1.0)*r01*sj4*x1198))+(((-1.0)*x1207))+((cj4*x1201)));
evalcond[2]=(x1210+((r00*sj3*x1198))+((r01*x1198*x1199))+((r00*x1196*x1199))+((x1201*x1202))+(((-1.0)*x1211))+(((-1.0)*r01*sj3*x1196)));
evalcond[3]=(((r21*x1198*x1199))+((r20*x1196*x1199))+x1207+((r20*sj3*x1198))+((x1202*x1203))+(((-1.0)*px))+(((-1.0)*r21*sj3*x1196))+(((-1.0)*x1212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1213=(cj4*r22);
IkReal x1214=((1.0)*cj1);
IkReal x1215=(r20*sj5);
IkReal x1216=(cj4*r02);
IkReal x1217=(cj5*r21);
IkReal x1218=(cj1*sj4);
IkReal x1219=(cj5*r01);
IkReal x1220=(r00*sj5);
IkReal x1221=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1220*x1221))+(((-1.0)*x1213*x1214))+((sj1*x1216))+((x1217*x1218))+(((-1.0)*x1219*x1221))+((x1215*x1218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1215*x1221))+(((-1.0)*sj4*x1214*x1220))+(((-1.0)*x1217*x1221))+((sj1*x1213))+(((-1.0)*sj4*x1214*x1219))+((cj1*x1216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1220*x1221))+(((-1.0)*x1213*x1214))+((sj1*x1216))+((x1217*x1218))+(((-1.0)*x1219*x1221))+((x1215*x1218))))+IKsqr(((((-1.0)*x1215*x1221))+(((-1.0)*sj4*x1214*x1220))+(((-1.0)*x1217*x1221))+((sj1*x1213))+(((-1.0)*sj4*x1214*x1219))+((cj1*x1216))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1220*x1221))+(((-1.0)*x1213*x1214))+((sj1*x1216))+((x1217*x1218))+(((-1.0)*x1219*x1221))+((x1215*x1218))), ((((-1.0)*x1215*x1221))+(((-1.0)*sj4*x1214*x1220))+(((-1.0)*x1217*x1221))+((sj1*x1213))+(((-1.0)*sj4*x1214*x1219))+((cj1*x1216))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1222=IKcos(j2);
IkReal x1223=IKsin(j2);
IkReal x1224=(cj3*sj4);
IkReal x1225=(r21*sj5);
IkReal x1226=(cj5*sj4);
IkReal x1227=((0.15)*cj5);
IkReal x1228=((1.0)*cj4);
IkReal x1229=(sj4*sj5);
IkReal x1230=((1.0)*sj3);
IkReal x1231=(cj5*sj3);
IkReal x1232=(r01*sj5);
IkReal x1233=(cj1*x1222);
IkReal x1234=(sj1*x1223);
IkReal x1235=(cj3*cj4*sj5);
IkReal x1236=(cj1*x1223);
IkReal x1237=(sj1*x1222);
IkReal x1238=(cj3*cj4*cj5);
IkReal x1239=(x1234+x1233);
evalcond[0]=(x1239+((r01*x1226))+((r00*x1229))+(((-1.0)*r02*x1228)));
evalcond[1]=((((-1.0)*x1236))+((r20*x1229))+x1237+((r21*x1226))+(((-1.0)*r22*x1228)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1225))+(((-1.0)*r20*x1227))+(((0.54)*x1236))+(((-1.0)*pz))+(((-0.54)*x1237)));
evalcond[3]=((((0.15)*x1232))+(((-1.0)*r00*x1227))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x1233))+(((-0.54)*x1234)));
evalcond[4]=(x1239+(((-1.0)*x1225*x1230))+((r20*x1231))+((r20*x1235))+((r22*x1224))+((r21*x1238)));
evalcond[5]=((((-1.0)*x1237))+x1236+((r00*x1231))+((r00*x1235))+((r01*x1238))+(((-1.0)*x1230*x1232))+((r02*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1240=(cj5*sj4);
IkReal x1241=(cj0*r01);
IkReal x1242=((0.54)*cj0);
IkReal x1243=(sj4*sj5);
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(cj0,-2);
if(!x1244.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1244.value)*(((((0.54)*x1240*x1241))+((r00*x1242*x1243))+(((0.15)*sj5*x1241))+(((-1.0)*cj4*r02*x1242))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r20*x1243))+(((-0.211267605633803)*r21*sj5))+(((-0.76056338028169)*r21*x1240))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1244.value)*(((((0.54)*x1240*x1241))+((r00*x1242*x1243))+(((0.15)*sj5*x1241))+(((-1.0)*cj4*r02*x1242))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.76056338028169)*r20*x1243))+(((-0.211267605633803)*r21*sj5))+(((-0.76056338028169)*r21*x1240))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1244.value)*(((((0.54)*x1240*x1241))+((r00*x1242*x1243))+(((0.15)*sj5*x1241))+(((-1.0)*cj4*r02*x1242))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))))), ((((-0.76056338028169)*r20*x1243))+(((-0.211267605633803)*r21*sj5))+(((-0.76056338028169)*r21*x1240))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1245=IKsin(j1);
IkReal x1246=IKcos(j1);
IkReal x1247=((0.15)*sj5);
IkReal x1248=(r21*sj0);
IkReal x1249=((0.54)*r20);
IkReal x1250=(sj4*sj5);
IkReal x1251=(cj5*sj3);
IkReal x1252=(cj3*cj5);
IkReal x1253=((0.15)*cj5);
IkReal x1254=(r11*sj0);
IkReal x1255=((0.54)*r01);
IkReal x1256=((0.54)*r00);
IkReal x1257=(cj3*sj0);
IkReal x1258=(cj4*sj5);
IkReal x1259=((1.0)*py);
IkReal x1260=(cj0*r21);
IkReal x1261=((0.54)*sj4);
IkReal x1262=((0.54)*r10);
IkReal x1263=(cj0*r11);
IkReal x1264=(cj5*sj4);
IkReal x1265=((1.0)*px);
IkReal x1266=((0.54)*cj4);
IkReal x1267=(cj0*cj3);
IkReal x1268=((1.0)*pz);
IkReal x1269=((0.71)*x1245);
IkReal x1270=(cj0*x1266);
IkReal x1271=((0.54)*sj3*sj5);
IkReal x1272=((0.71)*x1246);
IkReal x1273=(cj0*sj0*x1269);
evalcond[0]=((((-1.0)*x1249*x1250))+(((-1.0)*cj5*r21*x1261))+(((-1.0)*x1272))+((r22*x1266))+(((-1.0)*r21*x1247))+pz+((r20*x1253)));
evalcond[1]=(((x1247*x1254))+(((-1.0)*r10*sj0*x1253))+((sj0*x1250*x1262))+((x1269*(sj0*sj0)))+((cj5*x1254*x1261))+(((-1.0)*r12*sj0*x1266))+(((-1.0)*sj0*x1259)));
evalcond[2]=(((cj0*x1255*x1264))+(((-1.0)*cj0*x1265))+((x1269*(cj0*cj0)))+(((-1.0)*cj0*r00*x1253))+(((-1.0)*r02*x1270))+((cj0*x1250*x1256))+((cj0*r01*x1247)));
evalcond[3]=(((r11*x1252*x1266))+((sj0*x1272))+(((-1.0)*r11*x1271))+((cj3*x1258*x1262))+((cj3*r12*x1261))+((x1247*x1248))+((x1251*x1262))+(((-1.0)*r20*sj0*x1253))+(((-1.0)*sj0*x1268)));
evalcond[4]=(((x1247*x1260))+((cj0*x1272))+(((-1.0)*cj0*x1268))+((cj4*x1252*x1255))+(((-1.0)*cj0*r20*x1253))+((cj3*r02*x1261))+(((-1.0)*sj3*sj5*x1255))+((x1251*x1256))+((cj3*x1256*x1258)));
evalcond[5]=((((-1.0)*x1259))+(((-1.0)*x1249*x1257*x1258))+(((-1.0)*sj0*x1249*x1251))+((sj0*x1269))+(((-1.0)*x1248*x1252*x1266))+((r11*x1247))+((x1248*x1271))+(((-1.0)*r22*x1257*x1261))+(((-1.0)*r10*x1253)));
evalcond[6]=(((cj0*x1269))+(((-1.0)*r00*x1253))+((x1260*x1271))+((r01*x1247))+(((-1.0)*x1252*x1260*x1266))+(((-1.0)*cj0*x1249*x1251))+(((-1.0)*r22*x1261*x1267))+(((-1.0)*x1249*x1258*x1267))+(((-1.0)*x1265)));
evalcond[7]=(x1273+(((-1.0)*r12*x1270))+((cj5*x1261*x1263))+(((-1.0)*r00*sj0*x1253))+((r01*sj0*x1247))+((cj0*x1250*x1262))+(((-1.0)*sj0*x1265)));
evalcond[8]=(x1273+((x1247*x1263))+(((-1.0)*cj0*x1259))+(((-1.0)*r02*sj0*x1266))+((sj0*x1250*x1256))+((sj0*x1255*x1264))+(((-1.0)*cj0*r10*x1253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1274=((1.0)*cj4);
IkReal x1275=(sj1*sj4);
IkReal x1276=(r20*sj5);
IkReal x1277=(cj5*r01);
IkReal x1278=(cj5*r21);
IkReal x1279=(cj1*sj4);
IkReal x1280=(r00*sj5);
if( IKabs((((x1276*x1279))+((x1275*x1277))+((x1275*x1280))+((x1278*x1279))+(((-1.0)*r02*sj1*x1274))+(((-1.0)*cj1*r22*x1274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1279*x1280))+((x1277*x1279))+(((-1.0)*cj1*r02*x1274))+((cj4*r22*sj1))+(((-1.0)*x1275*x1276))+(((-1.0)*x1275*x1278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1276*x1279))+((x1275*x1277))+((x1275*x1280))+((x1278*x1279))+(((-1.0)*r02*sj1*x1274))+(((-1.0)*cj1*r22*x1274))))+IKsqr((((x1279*x1280))+((x1277*x1279))+(((-1.0)*cj1*r02*x1274))+((cj4*r22*sj1))+(((-1.0)*x1275*x1276))+(((-1.0)*x1275*x1278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1276*x1279))+((x1275*x1277))+((x1275*x1280))+((x1278*x1279))+(((-1.0)*r02*sj1*x1274))+(((-1.0)*cj1*r22*x1274))), (((x1279*x1280))+((x1277*x1279))+(((-1.0)*cj1*r02*x1274))+((cj4*r22*sj1))+(((-1.0)*x1275*x1276))+(((-1.0)*x1275*x1278))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1281=IKsin(j2);
IkReal x1282=IKcos(j2);
IkReal x1283=(cj3*sj4);
IkReal x1284=(r21*sj5);
IkReal x1285=(cj5*sj4);
IkReal x1286=((0.15)*cj5);
IkReal x1287=((1.0)*cj4);
IkReal x1288=(sj4*sj5);
IkReal x1289=((1.0)*sj3);
IkReal x1290=(cj5*sj3);
IkReal x1291=(r01*sj5);
IkReal x1292=(sj1*x1282);
IkReal x1293=(cj1*x1282);
IkReal x1294=(cj3*cj4*sj5);
IkReal x1295=((0.54)*x1281);
IkReal x1296=(sj1*x1281);
IkReal x1297=(cj3*cj4*cj5);
IkReal x1298=((1.0)*cj1*x1281);
evalcond[0]=(x1292+(((-1.0)*x1298))+(((-1.0)*r22*x1287))+((r20*x1288))+((r21*x1285)));
evalcond[1]=((((-1.0)*r02*x1287))+((r01*x1285))+((r00*x1288))+(((-1.0)*x1296))+(((-1.0)*x1293)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1284))+(((-0.54)*x1292))+((cj1*x1295))+(((-1.0)*pz))+(((-1.0)*r20*x1286)));
evalcond[3]=(((sj1*x1295))+(((0.54)*x1293))+(((-1.0)*r00*x1286))+(((-1.0)*px))+(((0.15)*x1291))+(((0.71)*sj1)));
evalcond[4]=(((r20*x1290))+((r20*x1294))+x1293+x1296+((r21*x1297))+((r22*x1283))+(((-1.0)*x1284*x1289)));
evalcond[5]=(x1292+((r02*x1283))+(((-1.0)*x1298))+(((-1.0)*x1289*x1291))+((r01*x1297))+((r00*x1290))+((r00*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1299=(cj4*r22);
IkReal x1300=((1.0)*cj1);
IkReal x1301=(r20*sj5);
IkReal x1302=(cj4*r02);
IkReal x1303=(cj5*r21);
IkReal x1304=(cj1*sj4);
IkReal x1305=(cj5*r01);
IkReal x1306=(r00*sj5);
IkReal x1307=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1306*x1307))+(((-1.0)*x1299*x1300))+((x1303*x1304))+(((-1.0)*x1305*x1307))+((sj1*x1302))+((x1301*x1304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1299))+(((-1.0)*x1303*x1307))+((cj1*x1302))+(((-1.0)*sj4*x1300*x1306))+(((-1.0)*sj4*x1300*x1305))+(((-1.0)*x1301*x1307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1306*x1307))+(((-1.0)*x1299*x1300))+((x1303*x1304))+(((-1.0)*x1305*x1307))+((sj1*x1302))+((x1301*x1304))))+IKsqr((((sj1*x1299))+(((-1.0)*x1303*x1307))+((cj1*x1302))+(((-1.0)*sj4*x1300*x1306))+(((-1.0)*sj4*x1300*x1305))+(((-1.0)*x1301*x1307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1306*x1307))+(((-1.0)*x1299*x1300))+((x1303*x1304))+(((-1.0)*x1305*x1307))+((sj1*x1302))+((x1301*x1304))), (((sj1*x1299))+(((-1.0)*x1303*x1307))+((cj1*x1302))+(((-1.0)*sj4*x1300*x1306))+(((-1.0)*sj4*x1300*x1305))+(((-1.0)*x1301*x1307))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1308=IKcos(j2);
IkReal x1309=IKsin(j2);
IkReal x1310=(cj3*sj4);
IkReal x1311=(r21*sj5);
IkReal x1312=(cj5*sj4);
IkReal x1313=((0.15)*cj5);
IkReal x1314=((1.0)*cj4);
IkReal x1315=(sj4*sj5);
IkReal x1316=((1.0)*sj3);
IkReal x1317=(cj5*sj3);
IkReal x1318=(r01*sj5);
IkReal x1319=(cj1*x1308);
IkReal x1320=(sj1*x1309);
IkReal x1321=(cj3*cj4*sj5);
IkReal x1322=(cj1*x1309);
IkReal x1323=(sj1*x1308);
IkReal x1324=(cj3*cj4*cj5);
IkReal x1325=(x1319+x1320);
evalcond[0]=(x1325+((r00*x1315))+((r01*x1312))+(((-1.0)*r02*x1314)));
evalcond[1]=(x1323+(((-1.0)*r22*x1314))+(((-1.0)*x1322))+((r21*x1312))+((r20*x1315)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x1323))+(((-1.0)*pz))+(((-1.0)*r20*x1313))+(((0.15)*x1311))+(((0.54)*x1322)));
evalcond[3]=((((-0.54)*x1320))+(((-0.54)*x1319))+(((-1.0)*r00*x1313))+(((-0.71)*sj1))+(((-1.0)*px))+(((0.15)*x1318)));
evalcond[4]=(x1325+(((-1.0)*x1311*x1316))+((r22*x1310))+((r21*x1324))+((r20*x1321))+((r20*x1317)));
evalcond[5]=(x1322+((r00*x1317))+((r01*x1324))+((r00*x1321))+(((-1.0)*x1323))+((r02*x1310))+(((-1.0)*x1316*x1318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1326=((1.0)*cj4);
IkReal x1327=(r20*sj5);
IkReal x1328=((1.0)*sj1*sj4);
IkReal x1329=(cj1*cj5*sj4);
IkReal x1330=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x1326))+((cj5*r11*sj1*sj4))+((sj1*x1330))+((r21*x1329))+((cj1*sj4*x1327))+(((-1.0)*cj1*r22*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1328))+(((-1.0)*cj1*r12*x1326))+(((-1.0)*x1327*x1328))+((cj4*r22*sj1))+((r11*x1329))+((cj1*x1330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x1326))+((cj5*r11*sj1*sj4))+((sj1*x1330))+((r21*x1329))+((cj1*sj4*x1327))+(((-1.0)*cj1*r22*x1326))))+IKsqr(((((-1.0)*cj5*r21*x1328))+(((-1.0)*cj1*r12*x1326))+(((-1.0)*x1327*x1328))+((cj4*r22*sj1))+((r11*x1329))+((cj1*x1330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x1326))+((cj5*r11*sj1*sj4))+((sj1*x1330))+((r21*x1329))+((cj1*sj4*x1327))+(((-1.0)*cj1*r22*x1326))), ((((-1.0)*cj5*r21*x1328))+(((-1.0)*cj1*r12*x1326))+(((-1.0)*x1327*x1328))+((cj4*r22*sj1))+((r11*x1329))+((cj1*x1330))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1331=IKsin(j2);
IkReal x1332=IKcos(j2);
IkReal x1333=((0.15)*sj5);
IkReal x1334=((0.15)*cj5);
IkReal x1335=(cj5*sj4);
IkReal x1336=(cj3*cj4);
IkReal x1337=(r20*sj5);
IkReal x1338=(cj3*sj4);
IkReal x1339=(r10*sj5);
IkReal x1340=((1.0)*cj4);
IkReal x1341=(cj5*sj3);
IkReal x1342=(sj1*x1332);
IkReal x1343=(cj1*x1332);
IkReal x1344=((0.54)*x1331);
IkReal x1345=((1.0)*sj3*sj5);
IkReal x1346=(sj1*x1331);
IkReal x1347=((1.0)*cj1*x1331);
evalcond[0]=(x1342+((sj4*x1337))+(((-1.0)*x1347))+((r21*x1335))+(((-1.0)*r22*x1340)));
evalcond[1]=(((sj4*x1339))+((r11*x1335))+(((-1.0)*r12*x1340))+(((-1.0)*x1343))+(((-1.0)*x1346)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1344))+((r21*x1333))+(((-1.0)*pz))+(((-1.0)*r20*x1334))+(((-0.54)*x1342)));
evalcond[3]=(((sj1*x1344))+((r11*x1333))+(((0.54)*x1343))+(((-1.0)*py))+(((-1.0)*r10*x1334))+(((0.71)*sj1)));
evalcond[4]=(x1343+x1346+((x1336*x1337))+(((-1.0)*r21*x1345))+((r22*x1338))+((r20*x1341))+((cj5*r21*x1336)));
evalcond[5]=(x1342+((r12*x1338))+((x1336*x1339))+(((-1.0)*x1347))+((cj5*r11*x1336))+(((-1.0)*r11*x1345))+((r10*x1341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1348=(cj1*cj4);
IkReal x1349=(r20*sj5);
IkReal x1350=(cj4*sj1);
IkReal x1351=(cj5*r21);
IkReal x1352=(cj1*sj4);
IkReal x1353=(cj5*r11);
IkReal x1354=(r10*sj5);
IkReal x1355=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1354*x1355))+((x1349*x1352))+((x1351*x1352))+(((-1.0)*r22*x1348))+((r12*x1350))+(((-1.0)*x1353*x1355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1350))+(((-1.0)*x1352*x1354))+(((-1.0)*x1352*x1353))+((r12*x1348))+(((-1.0)*x1349*x1355))+(((-1.0)*x1351*x1355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1354*x1355))+((x1349*x1352))+((x1351*x1352))+(((-1.0)*r22*x1348))+((r12*x1350))+(((-1.0)*x1353*x1355))))+IKsqr((((r22*x1350))+(((-1.0)*x1352*x1354))+(((-1.0)*x1352*x1353))+((r12*x1348))+(((-1.0)*x1349*x1355))+(((-1.0)*x1351*x1355))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1354*x1355))+((x1349*x1352))+((x1351*x1352))+(((-1.0)*r22*x1348))+((r12*x1350))+(((-1.0)*x1353*x1355))), (((r22*x1350))+(((-1.0)*x1352*x1354))+(((-1.0)*x1352*x1353))+((r12*x1348))+(((-1.0)*x1349*x1355))+(((-1.0)*x1351*x1355))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1356=IKcos(j2);
IkReal x1357=IKsin(j2);
IkReal x1358=((0.15)*sj5);
IkReal x1359=((0.15)*cj5);
IkReal x1360=(r10*sj5);
IkReal x1361=(cj5*sj4);
IkReal x1362=(cj3*cj4);
IkReal x1363=(r20*sj5);
IkReal x1364=(cj3*sj4);
IkReal x1365=((1.0)*cj4);
IkReal x1366=(cj5*sj3);
IkReal x1367=(cj1*x1356);
IkReal x1368=(sj1*x1357);
IkReal x1369=(cj1*x1357);
IkReal x1370=(sj1*x1356);
IkReal x1371=((1.0)*sj3*sj5);
IkReal x1372=(x1367+x1368);
evalcond[0]=(x1372+(((-1.0)*r12*x1365))+((sj4*x1360))+((r11*x1361)));
evalcond[1]=(x1370+(((-1.0)*x1369))+((sj4*x1363))+(((-1.0)*r22*x1365))+((r21*x1361)));
evalcond[2]=((((-0.54)*x1370))+(((0.71)*cj1))+(((0.54)*x1369))+(((-1.0)*r20*x1359))+(((-1.0)*pz))+((r21*x1358)));
evalcond[3]=((((-1.0)*r10*x1359))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1358))+(((-0.54)*x1368))+(((-0.54)*x1367)));
evalcond[4]=(x1372+((r22*x1364))+((r20*x1366))+(((-1.0)*r21*x1371))+((cj5*r21*x1362))+((x1362*x1363)));
evalcond[5]=(x1369+((cj5*r11*x1362))+((r10*x1366))+((x1360*x1362))+(((-1.0)*x1370))+(((-1.0)*r11*x1371))+((r12*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1373=(cj5*sj4);
IkReal x1374=((1.0)*sj0);
IkReal x1375=(cj4*r22);
IkReal x1376=(cj1*sj4*sj5);
IkReal x1377=((1.0)*cj4*r12);
IkReal x1378=(sj1*sj4*sj5);
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x1374*x1375))+((r11*sj1*x1373))+((r10*x1378))+((r20*sj0*x1376))+((cj1*r21*sj0*x1373))+(((-1.0)*sj1*x1377)))),IkReal((((r10*x1376))+(((-1.0)*r20*x1374*x1378))+((cj1*r11*x1373))+(((-1.0)*r21*sj1*x1373*x1374))+(((-1.0)*cj1*x1377))+((sj0*sj1*x1375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1380.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1379.value)+(((1.5707963267949)*(x1380.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1381=IKsin(j2);
IkReal x1382=IKcos(j2);
IkReal x1383=(cj3*sj4);
IkReal x1384=(cj0*sj1);
IkReal x1385=((0.15)*sj5);
IkReal x1386=((0.15)*cj5);
IkReal x1387=(cj5*r01);
IkReal x1388=(cj3*cj4);
IkReal x1389=(cj5*sj4);
IkReal x1390=((1.0)*cj0);
IkReal x1391=(r20*sj5);
IkReal x1392=(sj0*sj1);
IkReal x1393=(r10*sj5);
IkReal x1394=((1.0)*cj4);
IkReal x1395=(cj5*sj3);
IkReal x1396=(r00*sj5);
IkReal x1397=(cj1*x1382);
IkReal x1398=((0.54)*x1381);
IkReal x1399=((1.0)*x1381);
IkReal x1400=((1.0)*sj3*sj5);
IkReal x1401=(sj1*x1382);
IkReal x1402=(sj0*x1399);
evalcond[0]=(((sj4*x1391))+((r21*x1389))+x1401+(((-1.0)*r22*x1394))+(((-1.0)*cj1*x1399)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*r20*x1386))+((r21*x1385))+(((-1.0)*pz))+((cj1*x1398))+(((-0.54)*x1401)));
evalcond[2]=((((-1.0)*x1384*x1399))+(((-1.0)*r02*x1394))+((sj4*x1387))+((sj4*x1396))+(((-1.0)*x1390*x1397)));
evalcond[3]=((((-1.0)*x1392*x1399))+(((-1.0)*r12*x1394))+((sj4*x1393))+(((-1.0)*sj0*x1397))+((r11*x1389)));
evalcond[4]=((((-1.0)*r00*x1386))+(((-1.0)*px))+(((0.54)*cj0*x1397))+((r01*x1385))+(((0.71)*x1384))+((x1384*x1398)));
evalcond[5]=((((-1.0)*r10*x1386))+(((-1.0)*py))+((r11*x1385))+(((0.71)*x1392))+(((0.54)*sj0*x1397))+((x1392*x1398)));
evalcond[6]=(x1397+((x1388*x1391))+((cj5*r21*x1388))+((r20*x1395))+((sj1*x1381))+((r22*x1383))+(((-1.0)*r21*x1400)));
evalcond[7]=(((x1388*x1396))+(((-1.0)*cj1*x1381*x1390))+(((-1.0)*r01*x1400))+((x1387*x1388))+((r00*x1395))+((x1382*x1384))+((r02*x1383)));
evalcond[8]=(((x1382*x1392))+((x1388*x1393))+((r10*x1395))+(((-1.0)*r11*x1400))+(((-1.0)*cj1*x1402))+((cj5*r11*x1388))+((r12*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1403=(sj1*sj4);
IkReal x1404=(cj5*r01);
IkReal x1405=((1.0)*cj0);
IkReal x1406=(r20*sj5);
IkReal x1407=(cj4*r22);
IkReal x1408=(r00*sj5);
IkReal x1409=(cj1*sj4);
IkReal x1410=(cj5*r21);
IkReal x1411=((1.0)*cj4*r02);
CheckValue<IkReal> x1412=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1412.valid){
continue;
}
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal((((cj0*x1406*x1409))+(((-1.0)*cj1*x1405*x1407))+((cj0*x1409*x1410))+((x1403*x1408))+((x1403*x1404))+(((-1.0)*sj1*x1411)))),IkReal(((((-1.0)*cj1*x1411))+((x1404*x1409))+((x1408*x1409))+(((-1.0)*x1403*x1405*x1406))+((cj0*sj1*x1407))+(((-1.0)*x1403*x1405*x1410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1412.value)))+(x1413.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1414=IKsin(j2);
IkReal x1415=IKcos(j2);
IkReal x1416=(cj3*sj4);
IkReal x1417=(cj0*sj1);
IkReal x1418=((0.15)*sj5);
IkReal x1419=((0.15)*cj5);
IkReal x1420=(cj5*r01);
IkReal x1421=(cj3*cj4);
IkReal x1422=(cj5*sj4);
IkReal x1423=((1.0)*cj0);
IkReal x1424=(r20*sj5);
IkReal x1425=(sj0*sj1);
IkReal x1426=(r10*sj5);
IkReal x1427=((1.0)*cj4);
IkReal x1428=(cj5*sj3);
IkReal x1429=(r00*sj5);
IkReal x1430=(cj1*x1415);
IkReal x1431=((0.54)*x1414);
IkReal x1432=((1.0)*x1414);
IkReal x1433=((1.0)*sj3*sj5);
IkReal x1434=(sj1*x1415);
IkReal x1435=(sj0*x1432);
evalcond[0]=(((r21*x1422))+(((-1.0)*cj1*x1432))+((sj4*x1424))+x1434+(((-1.0)*r22*x1427)));
evalcond[1]=(((r21*x1418))+(((0.71)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1419))+(((-0.54)*x1434))+((cj1*x1431)));
evalcond[2]=(((sj4*x1429))+((sj4*x1420))+(((-1.0)*x1417*x1432))+(((-1.0)*r02*x1427))+(((-1.0)*x1423*x1430)));
evalcond[3]=(((r11*x1422))+(((-1.0)*sj0*x1430))+((sj4*x1426))+(((-1.0)*r12*x1427))+(((-1.0)*x1425*x1432)));
evalcond[4]=(((x1417*x1431))+(((-1.0)*px))+((r01*x1418))+(((-1.0)*r00*x1419))+(((0.71)*x1417))+(((0.54)*cj0*x1430)));
evalcond[5]=((((0.54)*sj0*x1430))+(((-1.0)*r10*x1419))+(((0.71)*x1425))+((x1425*x1431))+(((-1.0)*py))+((r11*x1418)));
evalcond[6]=(((cj5*r21*x1421))+((r22*x1416))+x1430+(((-1.0)*r21*x1433))+((sj1*x1414))+((x1421*x1424))+((r20*x1428)));
evalcond[7]=(((x1415*x1417))+((r00*x1428))+((x1420*x1421))+(((-1.0)*cj1*x1414*x1423))+(((-1.0)*r01*x1433))+((r02*x1416))+((x1421*x1429)));
evalcond[8]=((((-1.0)*r11*x1433))+((x1415*x1425))+(((-1.0)*cj1*x1435))+((r10*x1428))+((r12*x1416))+((cj5*r11*x1421))+((x1421*x1426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1436=(cj5*sj4);
IkReal x1437=((0.54)*sj0);
IkReal x1438=(sj4*sj5);
IkReal x1439=((0.15)*sj0);
CheckValue<IkReal> x1440=IKPowWithIntegerCheck(sj0,-2);
if(!x1440.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1440.value)*(((((-1.0)*cj4*r12*x1437))+((r10*x1437*x1438))+(((-1.0)*cj5*r10*x1439))+((r11*sj5*x1439))+((r11*x1436*x1437))+(((-1.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r20*x1438))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r21*x1436))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1440.value)*(((((-1.0)*cj4*r12*x1437))+((r10*x1437*x1438))+(((-1.0)*cj5*r10*x1439))+((r11*sj5*x1439))+((r11*x1436*x1437))+(((-1.0)*py*sj0))))))+IKsqr(((((-0.76056338028169)*r20*x1438))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r21*x1436))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1440.value)*(((((-1.0)*cj4*r12*x1437))+((r10*x1437*x1438))+(((-1.0)*cj5*r10*x1439))+((r11*sj5*x1439))+((r11*x1436*x1437))+(((-1.0)*py*sj0))))), ((((-0.76056338028169)*r20*x1438))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r21*x1436))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1441=IKsin(j1);
IkReal x1442=IKcos(j1);
IkReal x1443=((0.15)*sj5);
IkReal x1444=(r21*sj0);
IkReal x1445=((0.54)*r20);
IkReal x1446=(sj4*sj5);
IkReal x1447=(cj5*sj3);
IkReal x1448=(cj3*cj5);
IkReal x1449=((0.15)*cj5);
IkReal x1450=(r11*sj0);
IkReal x1451=((0.54)*r01);
IkReal x1452=((0.54)*r00);
IkReal x1453=(cj3*sj0);
IkReal x1454=(cj4*sj5);
IkReal x1455=((1.0)*py);
IkReal x1456=(cj0*r21);
IkReal x1457=((0.54)*sj4);
IkReal x1458=((0.54)*r10);
IkReal x1459=(cj0*r11);
IkReal x1460=(cj5*sj4);
IkReal x1461=((1.0)*px);
IkReal x1462=((0.54)*cj4);
IkReal x1463=(cj0*cj3);
IkReal x1464=((1.0)*pz);
IkReal x1465=((0.71)*x1441);
IkReal x1466=(cj0*x1462);
IkReal x1467=((0.54)*sj3*sj5);
IkReal x1468=((0.71)*x1442);
IkReal x1469=(cj0*sj0*x1465);
evalcond[0]=((((-1.0)*x1445*x1446))+(((-1.0)*r21*x1443))+(((-1.0)*x1468))+(((-1.0)*cj5*r21*x1457))+pz+((r22*x1462))+((r20*x1449)));
evalcond[1]=((((-1.0)*sj0*x1455))+(((-1.0)*r12*sj0*x1462))+((cj5*x1450*x1457))+((sj0*x1446*x1458))+((x1465*(sj0*sj0)))+((x1443*x1450))+(((-1.0)*r10*sj0*x1449)));
evalcond[2]=((((-1.0)*r02*x1466))+((cj0*x1446*x1452))+(((-1.0)*cj0*x1461))+((cj0*r01*x1443))+((x1465*(cj0*cj0)))+((cj0*x1451*x1460))+(((-1.0)*cj0*r00*x1449)));
evalcond[3]=(((r11*x1448*x1462))+((x1443*x1444))+(((-1.0)*r20*sj0*x1449))+((x1447*x1458))+(((-1.0)*sj0*x1464))+((sj0*x1468))+(((-1.0)*r11*x1467))+((cj3*x1454*x1458))+((cj3*r12*x1457)));
evalcond[4]=(((cj0*x1468))+((x1447*x1452))+((cj3*r02*x1457))+((cj3*x1452*x1454))+(((-1.0)*cj0*r20*x1449))+(((-1.0)*cj0*x1464))+(((-1.0)*sj3*sj5*x1451))+((cj4*x1448*x1451))+((x1443*x1456)));
evalcond[5]=(((r11*x1443))+(((-1.0)*x1455))+(((-1.0)*x1445*x1453*x1454))+(((-1.0)*r22*x1453*x1457))+(((-1.0)*r10*x1449))+(((-1.0)*sj0*x1445*x1447))+((x1444*x1467))+((sj0*x1465))+(((-1.0)*x1444*x1448*x1462)));
evalcond[6]=((((-1.0)*r00*x1449))+((cj0*x1465))+(((-1.0)*r22*x1457*x1463))+(((-1.0)*x1461))+(((-1.0)*x1445*x1454*x1463))+(((-1.0)*x1448*x1456*x1462))+(((-1.0)*cj0*x1445*x1447))+((x1456*x1467))+((r01*x1443)));
evalcond[7]=(((cj5*x1457*x1459))+(((-1.0)*sj0*x1461))+((cj0*x1446*x1458))+(((-1.0)*r00*sj0*x1449))+x1469+(((-1.0)*r12*x1466))+((r01*sj0*x1443)));
evalcond[8]=(((sj0*x1451*x1460))+(((-1.0)*r02*sj0*x1462))+x1469+((sj0*x1446*x1452))+(((-1.0)*cj0*r10*x1449))+((x1443*x1459))+(((-1.0)*cj0*x1455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1470=((1.0)*cj4);
IkReal x1471=(sj1*sj4);
IkReal x1472=(r20*sj5);
IkReal x1473=(cj5*r01);
IkReal x1474=(cj5*r21);
IkReal x1475=(cj1*sj4);
IkReal x1476=(r00*sj5);
if( IKabs((((x1471*x1473))+((x1471*x1476))+((x1474*x1475))+((x1472*x1475))+(((-1.0)*cj1*r22*x1470))+(((-1.0)*r02*sj1*x1470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r02*x1470))+((cj4*r22*sj1))+((x1473*x1475))+(((-1.0)*x1471*x1474))+(((-1.0)*x1471*x1472))+((x1475*x1476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1471*x1473))+((x1471*x1476))+((x1474*x1475))+((x1472*x1475))+(((-1.0)*cj1*r22*x1470))+(((-1.0)*r02*sj1*x1470))))+IKsqr(((((-1.0)*cj1*r02*x1470))+((cj4*r22*sj1))+((x1473*x1475))+(((-1.0)*x1471*x1474))+(((-1.0)*x1471*x1472))+((x1475*x1476))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1471*x1473))+((x1471*x1476))+((x1474*x1475))+((x1472*x1475))+(((-1.0)*cj1*r22*x1470))+(((-1.0)*r02*sj1*x1470))), ((((-1.0)*cj1*r02*x1470))+((cj4*r22*sj1))+((x1473*x1475))+(((-1.0)*x1471*x1474))+(((-1.0)*x1471*x1472))+((x1475*x1476))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1477=IKsin(j2);
IkReal x1478=IKcos(j2);
IkReal x1479=(cj3*sj4);
IkReal x1480=(r21*sj5);
IkReal x1481=(cj5*sj4);
IkReal x1482=((0.15)*cj5);
IkReal x1483=((1.0)*cj4);
IkReal x1484=(sj4*sj5);
IkReal x1485=((1.0)*sj3);
IkReal x1486=(cj5*sj3);
IkReal x1487=(r01*sj5);
IkReal x1488=(sj1*x1478);
IkReal x1489=(cj1*x1478);
IkReal x1490=(cj3*cj4*sj5);
IkReal x1491=((0.54)*x1477);
IkReal x1492=(sj1*x1477);
IkReal x1493=(cj3*cj4*cj5);
IkReal x1494=((1.0)*cj1*x1477);
evalcond[0]=(((r20*x1484))+(((-1.0)*x1494))+((r21*x1481))+(((-1.0)*r22*x1483))+x1488);
evalcond[1]=(((r01*x1481))+((r00*x1484))+(((-1.0)*x1492))+(((-1.0)*x1489))+(((-1.0)*r02*x1483)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1480))+((cj1*x1491))+(((-1.0)*r20*x1482))+(((-0.54)*x1488))+(((-1.0)*pz)));
evalcond[3]=((((0.15)*x1487))+((sj1*x1491))+(((-1.0)*r00*x1482))+(((-1.0)*px))+(((0.71)*sj1))+(((0.54)*x1489)));
evalcond[4]=(((r20*x1486))+((r22*x1479))+((r20*x1490))+(((-1.0)*x1480*x1485))+((r21*x1493))+x1492+x1489);
evalcond[5]=(((r00*x1490))+((r00*x1486))+(((-1.0)*x1494))+(((-1.0)*x1485*x1487))+((r01*x1493))+((r02*x1479))+x1488);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1495=(cj4*r22);
IkReal x1496=((1.0)*cj1);
IkReal x1497=(r20*sj5);
IkReal x1498=(cj4*r02);
IkReal x1499=(cj5*r21);
IkReal x1500=(cj1*sj4);
IkReal x1501=(cj5*r01);
IkReal x1502=(r00*sj5);
IkReal x1503=((1.0)*sj1*sj4);
if( IKabs((((x1499*x1500))+((sj1*x1498))+(((-1.0)*x1495*x1496))+(((-1.0)*x1501*x1503))+((x1497*x1500))+(((-1.0)*x1502*x1503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1499*x1503))+(((-1.0)*sj4*x1496*x1502))+(((-1.0)*sj4*x1496*x1501))+((sj1*x1495))+((cj1*x1498))+(((-1.0)*x1497*x1503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1499*x1500))+((sj1*x1498))+(((-1.0)*x1495*x1496))+(((-1.0)*x1501*x1503))+((x1497*x1500))+(((-1.0)*x1502*x1503))))+IKsqr(((((-1.0)*x1499*x1503))+(((-1.0)*sj4*x1496*x1502))+(((-1.0)*sj4*x1496*x1501))+((sj1*x1495))+((cj1*x1498))+(((-1.0)*x1497*x1503))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1499*x1500))+((sj1*x1498))+(((-1.0)*x1495*x1496))+(((-1.0)*x1501*x1503))+((x1497*x1500))+(((-1.0)*x1502*x1503))), ((((-1.0)*x1499*x1503))+(((-1.0)*sj4*x1496*x1502))+(((-1.0)*sj4*x1496*x1501))+((sj1*x1495))+((cj1*x1498))+(((-1.0)*x1497*x1503))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1504=IKcos(j2);
IkReal x1505=IKsin(j2);
IkReal x1506=(cj3*sj4);
IkReal x1507=(r21*sj5);
IkReal x1508=(cj5*sj4);
IkReal x1509=((0.15)*cj5);
IkReal x1510=((1.0)*cj4);
IkReal x1511=(sj4*sj5);
IkReal x1512=((1.0)*sj3);
IkReal x1513=(cj5*sj3);
IkReal x1514=(r01*sj5);
IkReal x1515=(cj1*x1504);
IkReal x1516=(sj1*x1505);
IkReal x1517=(cj3*cj4*sj5);
IkReal x1518=(cj1*x1505);
IkReal x1519=(sj1*x1504);
IkReal x1520=(cj3*cj4*cj5);
IkReal x1521=(x1515+x1516);
evalcond[0]=(((r01*x1508))+((r00*x1511))+x1521+(((-1.0)*r02*x1510)));
evalcond[1]=((((-1.0)*r22*x1510))+(((-1.0)*x1518))+((r20*x1511))+x1519+((r21*x1508)));
evalcond[2]=((((-1.0)*r20*x1509))+(((0.71)*cj1))+(((-1.0)*pz))+(((0.15)*x1507))+(((-0.54)*x1519))+(((0.54)*x1518)));
evalcond[3]=((((-1.0)*r00*x1509))+(((-0.71)*sj1))+(((-1.0)*px))+(((0.15)*x1514))+(((-0.54)*x1515))+(((-0.54)*x1516)));
evalcond[4]=(((r20*x1517))+((r20*x1513))+(((-1.0)*x1507*x1512))+x1521+((r21*x1520))+((r22*x1506)));
evalcond[5]=((((-1.0)*x1519))+((r01*x1520))+((r00*x1517))+((r00*x1513))+x1518+((r02*x1506))+(((-1.0)*x1512*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1522=((1.0)*cj4);
IkReal x1523=(r20*sj5);
IkReal x1524=((1.0)*sj1*sj4);
IkReal x1525=(cj1*cj5*sj4);
IkReal x1526=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((sj1*x1526))+((r21*x1525))+((cj1*sj4*x1523))+(((-1.0)*r12*sj1*x1522))+(((-1.0)*cj1*r22*x1522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x1522))+((r11*x1525))+((cj1*x1526))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x1524))+(((-1.0)*x1523*x1524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((sj1*x1526))+((r21*x1525))+((cj1*sj4*x1523))+(((-1.0)*r12*sj1*x1522))+(((-1.0)*cj1*r22*x1522))))+IKsqr(((((-1.0)*cj1*r12*x1522))+((r11*x1525))+((cj1*x1526))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x1524))+(((-1.0)*x1523*x1524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((sj1*x1526))+((r21*x1525))+((cj1*sj4*x1523))+(((-1.0)*r12*sj1*x1522))+(((-1.0)*cj1*r22*x1522))), ((((-1.0)*cj1*r12*x1522))+((r11*x1525))+((cj1*x1526))+((cj4*r22*sj1))+(((-1.0)*cj5*r21*x1524))+(((-1.0)*x1523*x1524))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1527=IKsin(j2);
IkReal x1528=IKcos(j2);
IkReal x1529=((0.15)*sj5);
IkReal x1530=((0.15)*cj5);
IkReal x1531=(cj5*sj4);
IkReal x1532=(cj3*cj4);
IkReal x1533=(r20*sj5);
IkReal x1534=(cj3*sj4);
IkReal x1535=(r10*sj5);
IkReal x1536=((1.0)*cj4);
IkReal x1537=(cj5*sj3);
IkReal x1538=(sj1*x1528);
IkReal x1539=(cj1*x1528);
IkReal x1540=((0.54)*x1527);
IkReal x1541=((1.0)*sj3*sj5);
IkReal x1542=(sj1*x1527);
IkReal x1543=((1.0)*cj1*x1527);
evalcond[0]=((((-1.0)*r22*x1536))+((r21*x1531))+x1538+((sj4*x1533))+(((-1.0)*x1543)));
evalcond[1]=((((-1.0)*x1542))+(((-1.0)*x1539))+(((-1.0)*r12*x1536))+((r11*x1531))+((sj4*x1535)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1540))+(((-1.0)*pz))+((r21*x1529))+(((-0.54)*x1538))+(((-1.0)*r20*x1530)));
evalcond[3]=(((r11*x1529))+(((-1.0)*py))+((sj1*x1540))+(((0.71)*sj1))+(((-1.0)*r10*x1530))+(((0.54)*x1539)));
evalcond[4]=(((cj5*r21*x1532))+((r20*x1537))+((x1532*x1533))+x1542+x1539+(((-1.0)*r21*x1541))+((r22*x1534)));
evalcond[5]=(((r12*x1534))+((r10*x1537))+((x1532*x1535))+x1538+((cj5*r11*x1532))+(((-1.0)*r11*x1541))+(((-1.0)*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1544=(cj1*cj4);
IkReal x1545=(r20*sj5);
IkReal x1546=(cj4*sj1);
IkReal x1547=(cj5*r21);
IkReal x1548=(cj1*sj4);
IkReal x1549=(cj5*r11);
IkReal x1550=(r10*sj5);
IkReal x1551=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1549*x1551))+(((-1.0)*r22*x1544))+((x1547*x1548))+((r12*x1546))+(((-1.0)*x1550*x1551))+((x1545*x1548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x1544))+(((-1.0)*x1548*x1550))+(((-1.0)*x1545*x1551))+(((-1.0)*x1548*x1549))+((r22*x1546))+(((-1.0)*x1547*x1551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1549*x1551))+(((-1.0)*r22*x1544))+((x1547*x1548))+((r12*x1546))+(((-1.0)*x1550*x1551))+((x1545*x1548))))+IKsqr((((r12*x1544))+(((-1.0)*x1548*x1550))+(((-1.0)*x1545*x1551))+(((-1.0)*x1548*x1549))+((r22*x1546))+(((-1.0)*x1547*x1551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1549*x1551))+(((-1.0)*r22*x1544))+((x1547*x1548))+((r12*x1546))+(((-1.0)*x1550*x1551))+((x1545*x1548))), (((r12*x1544))+(((-1.0)*x1548*x1550))+(((-1.0)*x1545*x1551))+(((-1.0)*x1548*x1549))+((r22*x1546))+(((-1.0)*x1547*x1551))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1552=IKcos(j2);
IkReal x1553=IKsin(j2);
IkReal x1554=((0.15)*sj5);
IkReal x1555=((0.15)*cj5);
IkReal x1556=(r10*sj5);
IkReal x1557=(cj5*sj4);
IkReal x1558=(cj3*cj4);
IkReal x1559=(r20*sj5);
IkReal x1560=(cj3*sj4);
IkReal x1561=((1.0)*cj4);
IkReal x1562=(cj5*sj3);
IkReal x1563=(cj1*x1552);
IkReal x1564=(sj1*x1553);
IkReal x1565=(cj1*x1553);
IkReal x1566=(sj1*x1552);
IkReal x1567=((1.0)*sj3*sj5);
IkReal x1568=(x1563+x1564);
evalcond[0]=(((sj4*x1556))+((r11*x1557))+x1568+(((-1.0)*r12*x1561)));
evalcond[1]=(((sj4*x1559))+(((-1.0)*r22*x1561))+x1566+((r21*x1557))+(((-1.0)*x1565)));
evalcond[2]=((((0.54)*x1565))+(((0.71)*cj1))+(((-0.54)*x1566))+(((-1.0)*pz))+(((-1.0)*r20*x1555))+((r21*x1554)));
evalcond[3]=(((r11*x1554))+(((-0.54)*x1564))+(((-0.54)*x1563))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x1555)));
evalcond[4]=(((r20*x1562))+((cj5*r21*x1558))+x1568+(((-1.0)*r21*x1567))+((r22*x1560))+((x1558*x1559)));
evalcond[5]=(((x1556*x1558))+((r12*x1560))+((cj5*r11*x1558))+x1565+((r10*x1562))+(((-1.0)*r11*x1567))+(((-1.0)*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1569=(cj5*sj4);
IkReal x1570=((1.0)*sj0);
IkReal x1571=(cj4*r22);
IkReal x1572=(cj1*sj4*sj5);
IkReal x1573=((1.0)*cj4*r12);
IkReal x1574=(sj1*sj4*sj5);
CheckValue<IkReal> x1575 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1573))+(((-1.0)*cj1*x1570*x1571))+((r20*sj0*x1572))+((r11*sj1*x1569))+((cj1*r21*sj0*x1569))+((r10*x1574)))),IkReal(((((-1.0)*r21*sj1*x1569*x1570))+(((-1.0)*cj1*x1573))+((sj0*sj1*x1571))+(((-1.0)*r20*x1570*x1574))+((r10*x1572))+((cj1*r11*x1569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1576.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1575.value)+(((1.5707963267949)*(x1576.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1577=IKsin(j2);
IkReal x1578=IKcos(j2);
IkReal x1579=(cj3*sj4);
IkReal x1580=(cj0*sj1);
IkReal x1581=((0.15)*sj5);
IkReal x1582=((0.15)*cj5);
IkReal x1583=(cj5*r01);
IkReal x1584=(cj3*cj4);
IkReal x1585=(cj5*sj4);
IkReal x1586=((1.0)*cj0);
IkReal x1587=(r20*sj5);
IkReal x1588=(sj0*sj1);
IkReal x1589=(r10*sj5);
IkReal x1590=((1.0)*cj4);
IkReal x1591=(cj5*sj3);
IkReal x1592=(r00*sj5);
IkReal x1593=(cj1*x1578);
IkReal x1594=((0.54)*x1577);
IkReal x1595=((1.0)*x1577);
IkReal x1596=((1.0)*sj3*sj5);
IkReal x1597=(sj1*x1578);
IkReal x1598=(sj0*x1595);
evalcond[0]=(((sj4*x1587))+(((-1.0)*cj1*x1595))+x1597+(((-1.0)*r22*x1590))+((r21*x1585)));
evalcond[1]=((((0.71)*cj1))+((cj1*x1594))+(((-0.54)*x1597))+(((-1.0)*pz))+(((-1.0)*r20*x1582))+((r21*x1581)));
evalcond[2]=((((-1.0)*x1580*x1595))+(((-1.0)*r02*x1590))+((sj4*x1592))+((sj4*x1583))+(((-1.0)*x1586*x1593)));
evalcond[3]=(((r11*x1585))+(((-1.0)*x1588*x1595))+((sj4*x1589))+(((-1.0)*sj0*x1593))+(((-1.0)*r12*x1590)));
evalcond[4]=(((r01*x1581))+(((0.71)*x1580))+(((-1.0)*r00*x1582))+(((-1.0)*px))+(((0.54)*cj0*x1593))+((x1580*x1594)));
evalcond[5]=((((0.71)*x1588))+((x1588*x1594))+((r11*x1581))+(((0.54)*sj0*x1593))+(((-1.0)*py))+(((-1.0)*r10*x1582)));
evalcond[6]=(((r20*x1591))+((x1584*x1587))+((cj5*r21*x1584))+((sj1*x1577))+x1593+((r22*x1579))+(((-1.0)*r21*x1596)));
evalcond[7]=(((r00*x1591))+(((-1.0)*cj1*x1577*x1586))+((x1584*x1592))+(((-1.0)*r01*x1596))+((x1583*x1584))+((r02*x1579))+((x1578*x1580)));
evalcond[8]=(((x1584*x1589))+((cj5*r11*x1584))+((r12*x1579))+(((-1.0)*cj1*x1598))+((r10*x1591))+((x1578*x1588))+(((-1.0)*r11*x1596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1599=(sj1*sj4);
IkReal x1600=(cj5*r01);
IkReal x1601=((1.0)*cj0);
IkReal x1602=(r20*sj5);
IkReal x1603=(cj4*r22);
IkReal x1604=(r00*sj5);
IkReal x1605=(cj1*sj4);
IkReal x1606=(cj5*r21);
IkReal x1607=((1.0)*cj4*r02);
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1608.valid){
continue;
}
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal((((cj0*x1605*x1606))+((x1599*x1604))+((x1599*x1600))+(((-1.0)*cj1*x1601*x1603))+(((-1.0)*sj1*x1607))+((cj0*x1602*x1605)))),IkReal(((((-1.0)*cj1*x1607))+((cj0*sj1*x1603))+((x1600*x1605))+(((-1.0)*x1599*x1601*x1602))+(((-1.0)*x1599*x1601*x1606))+((x1604*x1605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1608.value)))+(x1609.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1610=IKsin(j2);
IkReal x1611=IKcos(j2);
IkReal x1612=(cj3*sj4);
IkReal x1613=(cj0*sj1);
IkReal x1614=((0.15)*sj5);
IkReal x1615=((0.15)*cj5);
IkReal x1616=(cj5*r01);
IkReal x1617=(cj3*cj4);
IkReal x1618=(cj5*sj4);
IkReal x1619=((1.0)*cj0);
IkReal x1620=(r20*sj5);
IkReal x1621=(sj0*sj1);
IkReal x1622=(r10*sj5);
IkReal x1623=((1.0)*cj4);
IkReal x1624=(cj5*sj3);
IkReal x1625=(r00*sj5);
IkReal x1626=(cj1*x1611);
IkReal x1627=((0.54)*x1610);
IkReal x1628=((1.0)*x1610);
IkReal x1629=((1.0)*sj3*sj5);
IkReal x1630=(sj1*x1611);
IkReal x1631=(sj0*x1628);
evalcond[0]=(((r21*x1618))+x1630+(((-1.0)*r22*x1623))+((sj4*x1620))+(((-1.0)*cj1*x1628)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*r20*x1615))+((r21*x1614))+(((-1.0)*pz))+(((-0.54)*x1630))+((cj1*x1627)));
evalcond[2]=((((-1.0)*x1619*x1626))+(((-1.0)*r02*x1623))+((sj4*x1625))+((sj4*x1616))+(((-1.0)*x1613*x1628)));
evalcond[3]=((((-1.0)*r12*x1623))+(((-1.0)*x1621*x1628))+((r11*x1618))+((sj4*x1622))+(((-1.0)*sj0*x1626)));
evalcond[4]=((((0.71)*x1613))+((r01*x1614))+(((-1.0)*r00*x1615))+(((-1.0)*px))+((x1613*x1627))+(((0.54)*cj0*x1626)));
evalcond[5]=((((0.71)*x1621))+(((-1.0)*py))+(((0.54)*sj0*x1626))+((r11*x1614))+(((-1.0)*r10*x1615))+((x1621*x1627)));
evalcond[6]=(((r20*x1624))+(((-1.0)*r21*x1629))+x1626+((x1617*x1620))+((sj1*x1610))+((cj5*r21*x1617))+((r22*x1612)));
evalcond[7]=(((r00*x1624))+((x1617*x1625))+(((-1.0)*r01*x1629))+((x1616*x1617))+(((-1.0)*cj1*x1610*x1619))+((x1611*x1613))+((r02*x1612)));
evalcond[8]=((((-1.0)*r11*x1629))+((cj5*r11*x1617))+((x1617*x1622))+((r12*x1612))+(((-1.0)*cj1*x1631))+((r10*x1624))+((x1611*x1621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1632=(r21*sj0);
IkReal x1633=((1.0)*cj4);
IkReal x1634=((1.0)*r20*sj0);
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+(((-1.0)*r12*x1633))+((r10*sj4*sj5)))),-1);
if(!x1635.valid){
continue;
}
CheckValue<IkReal> x1636 = IKatan2WithCheck(IkReal((((sj5*x1632))+(((-1.0)*cj5*x1634)))),IkReal(((((-1.0)*r20*sj0*sj5*x1633))+(((-1.0)*r22*sj0*sj4))+(((-1.0)*cj5*x1632*x1633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1635.value)))+(x1636.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1637=IKsin(j3);
IkReal x1638=IKcos(j3);
IkReal x1639=(sj4*x1637);
IkReal x1640=(sj5*x1638);
IkReal x1641=(cj4*cj5*x1637);
IkReal x1642=(cj4*sj5*x1637);
IkReal x1643=((1.0)*cj5*x1638);
evalcond[0]=(((r21*x1640))+((r21*x1641))+((r20*x1642))+(((-1.0)*r20*x1643))+((r22*x1639)));
evalcond[1]=(((r11*x1640))+((r11*x1641))+cj0+((r10*x1642))+((r12*x1639))+(((-1.0)*r10*x1643)));
evalcond[2]=(((r02*x1639))+(((-1.0)*sj0))+(((-1.0)*r00*x1643))+((r00*x1642))+((r01*x1640))+((r01*x1641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1644=((0.76056338028169)*sj4);
IkReal x1645=((0.211267605633803)*sj5);
IkReal x1646=((0.76056338028169)*cj4);
IkReal x1647=((0.211267605633803)*cj5);
if( IKabs((((r10*x1647))+(((-1.0)*cj5*r11*x1644))+(((-1.0)*r11*x1645))+((r12*x1646))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1644)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1644))+((r20*x1647))+(((-1.0)*r20*sj5*x1644))+(((-1.0)*r21*x1645))+(((1.40845070422535)*pz))+((r22*x1646)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1647))+(((-1.0)*cj5*r11*x1644))+(((-1.0)*r11*x1645))+((r12*x1646))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1644))))+IKsqr(((((-1.0)*cj5*r21*x1644))+((r20*x1647))+(((-1.0)*r20*sj5*x1644))+(((-1.0)*r21*x1645))+(((1.40845070422535)*pz))+((r22*x1646))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x1647))+(((-1.0)*cj5*r11*x1644))+(((-1.0)*r11*x1645))+((r12*x1646))+(((1.40845070422535)*py))+(((-1.0)*r10*sj5*x1644))), ((((-1.0)*cj5*r21*x1644))+((r20*x1647))+(((-1.0)*r20*sj5*x1644))+(((-1.0)*r21*x1645))+(((1.40845070422535)*pz))+((r22*x1646))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1648=((1.0)*py);
IkReal x1649=((0.54)*sj5);
IkReal x1650=((0.15)*sj5);
IkReal x1651=(cj5*r10);
IkReal x1652=((0.54)*cj5);
IkReal x1653=(cj3*cj4);
IkReal x1654=((0.54)*r12);
IkReal x1655=(cj3*sj4);
IkReal x1656=((0.54)*r22);
IkReal x1657=((0.71)*(IKsin(j1)));
IkReal x1658=(r11*x1650);
IkReal x1659=((0.15)*x1651);
IkReal x1660=(r21*x1650);
IkReal x1661=((0.71)*(IKcos(j1)));
IkReal x1662=((0.15)*cj5*r20);
IkReal x1663=(x1659+x1648);
IkReal x1664=(x1661+x1660);
IkReal x1665=(x1658+x1657);
evalcond[0]=(((cj4*x1656))+(((-1.0)*r21*sj4*x1652))+x1662+pz+(((-1.0)*x1664))+(((-1.0)*r20*sj4*x1649)));
evalcond[1]=((((-1.0)*cj4*x1654))+x1665+((r11*sj4*x1652))+((r10*sj4*x1649))+(((-1.0)*x1663)));
evalcond[2]=(x1665+(((-1.0)*x1655*x1656))+(((-1.0)*r21*x1652*x1653))+(((-1.0)*r20*x1649*x1653))+(((-1.0)*r20*sj3*x1652))+(((-1.0)*x1663))+((r21*sj3*x1649)));
evalcond[3]=((((-1.0)*r11*sj3*x1649))+((x1654*x1655))+x1664+(((-1.0)*pz))+((r10*x1649*x1653))+(((-1.0)*x1662))+((r11*x1652*x1653))+(((0.54)*sj3*x1651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1666=((1.0)*cj4);
IkReal x1667=(r20*sj5);
IkReal x1668=((1.0)*sj1*sj4);
IkReal x1669=(cj1*cj5*sj4);
IkReal x1670=(r10*sj4*sj5);
if( IKabs((((sj1*x1670))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1667))+(((-1.0)*r12*sj1*x1666))+(((-1.0)*cj1*r22*x1666))+((r21*x1669)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1668))+(((-1.0)*x1667*x1668))+((r11*x1669))+((cj4*r22*sj1))+((cj1*x1670))+(((-1.0)*cj1*r12*x1666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1670))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1667))+(((-1.0)*r12*sj1*x1666))+(((-1.0)*cj1*r22*x1666))+((r21*x1669))))+IKsqr(((((-1.0)*cj5*r21*x1668))+(((-1.0)*x1667*x1668))+((r11*x1669))+((cj4*r22*sj1))+((cj1*x1670))+(((-1.0)*cj1*r12*x1666))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1670))+((cj5*r11*sj1*sj4))+((cj1*sj4*x1667))+(((-1.0)*r12*sj1*x1666))+(((-1.0)*cj1*r22*x1666))+((r21*x1669))), ((((-1.0)*cj5*r21*x1668))+(((-1.0)*x1667*x1668))+((r11*x1669))+((cj4*r22*sj1))+((cj1*x1670))+(((-1.0)*cj1*r12*x1666))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1671=IKsin(j2);
IkReal x1672=IKcos(j2);
IkReal x1673=((0.15)*sj5);
IkReal x1674=((0.15)*cj5);
IkReal x1675=(cj5*sj4);
IkReal x1676=(cj3*cj4);
IkReal x1677=(r20*sj5);
IkReal x1678=(cj3*sj4);
IkReal x1679=(r10*sj5);
IkReal x1680=((1.0)*cj4);
IkReal x1681=(cj5*sj3);
IkReal x1682=(sj1*x1672);
IkReal x1683=(cj1*x1672);
IkReal x1684=((0.54)*x1671);
IkReal x1685=((1.0)*sj3*sj5);
IkReal x1686=(sj1*x1671);
IkReal x1687=((1.0)*cj1*x1671);
evalcond[0]=(((r21*x1675))+(((-1.0)*x1687))+((sj4*x1677))+x1682+(((-1.0)*r22*x1680)));
evalcond[1]=((((-1.0)*r12*x1680))+((sj4*x1679))+(((-1.0)*x1686))+(((-1.0)*x1683))+((r11*x1675)));
evalcond[2]=(((r21*x1673))+((cj1*x1684))+(((0.71)*cj1))+(((-0.54)*x1682))+(((-1.0)*pz))+(((-1.0)*r20*x1674)));
evalcond[3]=(((sj1*x1684))+(((-1.0)*r10*x1674))+(((-1.0)*py))+(((0.54)*x1683))+(((0.71)*sj1))+((r11*x1673)));
evalcond[4]=(((x1676*x1677))+x1683+x1686+(((-1.0)*r21*x1685))+((cj5*r21*x1676))+((r22*x1678))+((r20*x1681)));
evalcond[5]=(((x1676*x1679))+(((-1.0)*r11*x1685))+(((-1.0)*x1687))+((r10*x1681))+x1682+((cj5*r11*x1676))+((r12*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1688=((0.76056338028169)*sj4);
IkReal x1689=((0.211267605633803)*sj5);
IkReal x1690=((0.76056338028169)*cj4);
IkReal x1691=((0.211267605633803)*cj5);
if( IKabs((((r11*x1689))+((r10*sj5*x1688))+(((-1.0)*r12*x1690))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1691))+((cj5*r11*x1688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1688))+((r20*x1691))+(((-1.0)*cj5*r21*x1688))+(((-1.0)*r21*x1689))+((r22*x1690))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1689))+((r10*sj5*x1688))+(((-1.0)*r12*x1690))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1691))+((cj5*r11*x1688))))+IKsqr(((((-1.0)*r20*sj5*x1688))+((r20*x1691))+(((-1.0)*cj5*r21*x1688))+(((-1.0)*r21*x1689))+((r22*x1690))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x1689))+((r10*sj5*x1688))+(((-1.0)*r12*x1690))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1691))+((cj5*r11*x1688))), ((((-1.0)*r20*sj5*x1688))+((r20*x1691))+(((-1.0)*cj5*r21*x1688))+(((-1.0)*r21*x1689))+((r22*x1690))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1692=(r21*sj5);
IkReal x1693=((0.54)*sj3);
IkReal x1694=(cj5*r10);
IkReal x1695=((0.54)*sj4);
IkReal x1696=(cj5*r11);
IkReal x1697=(r20*sj5);
IkReal x1698=(cj5*r20);
IkReal x1699=(cj5*r21);
IkReal x1700=((0.54)*cj4);
IkReal x1701=(r11*sj5);
IkReal x1702=(r10*sj5);
IkReal x1703=((0.15)*x1698);
IkReal x1704=((0.15)*x1692);
IkReal x1705=((0.71)*(IKcos(j1)));
IkReal x1706=((0.15)*x1701);
IkReal x1707=((0.71)*(IKsin(j1)));
IkReal x1708=((0.15)*x1694);
IkReal x1709=(x1703+pz);
IkReal x1710=(x1704+x1705);
IkReal x1711=(x1707+x1708);
evalcond[0]=(((r22*x1700))+x1709+(((-1.0)*x1710))+(((-1.0)*x1695*x1699))+(((-1.0)*x1695*x1697)));
evalcond[1]=(((r12*x1700))+x1711+(((-1.0)*x1706))+py+(((-1.0)*x1695*x1702))+(((-1.0)*x1695*x1696)));
evalcond[2]=(((cj3*r12*x1695))+x1709+(((-1.0)*x1710))+((cj3*x1696*x1700))+((cj3*x1700*x1702))+((x1693*x1694))+(((-1.0)*x1693*x1701)));
evalcond[3]=(((cj3*r22*x1695))+(((-1.0)*x1692*x1693))+x1706+((cj3*x1697*x1700))+(((-1.0)*x1711))+(((-1.0)*py))+((cj3*x1699*x1700))+((x1693*x1698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1712=(cj1*cj4);
IkReal x1713=(r20*sj5);
IkReal x1714=(cj4*sj1);
IkReal x1715=(cj5*r21);
IkReal x1716=(cj1*sj4);
IkReal x1717=(cj5*r11);
IkReal x1718=(r10*sj5);
IkReal x1719=((1.0)*sj1*sj4);
if( IKabs((((r12*x1714))+((x1713*x1716))+(((-1.0)*x1718*x1719))+((x1715*x1716))+(((-1.0)*r22*x1712))+(((-1.0)*x1717*x1719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1714))+(((-1.0)*x1716*x1717))+(((-1.0)*x1716*x1718))+((r12*x1712))+(((-1.0)*x1713*x1719))+(((-1.0)*x1715*x1719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1714))+((x1713*x1716))+(((-1.0)*x1718*x1719))+((x1715*x1716))+(((-1.0)*r22*x1712))+(((-1.0)*x1717*x1719))))+IKsqr((((r22*x1714))+(((-1.0)*x1716*x1717))+(((-1.0)*x1716*x1718))+((r12*x1712))+(((-1.0)*x1713*x1719))+(((-1.0)*x1715*x1719))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x1714))+((x1713*x1716))+(((-1.0)*x1718*x1719))+((x1715*x1716))+(((-1.0)*r22*x1712))+(((-1.0)*x1717*x1719))), (((r22*x1714))+(((-1.0)*x1716*x1717))+(((-1.0)*x1716*x1718))+((r12*x1712))+(((-1.0)*x1713*x1719))+(((-1.0)*x1715*x1719))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1720=IKcos(j2);
IkReal x1721=IKsin(j2);
IkReal x1722=((0.15)*sj5);
IkReal x1723=((0.15)*cj5);
IkReal x1724=(r10*sj5);
IkReal x1725=(cj5*sj4);
IkReal x1726=(cj3*cj4);
IkReal x1727=(r20*sj5);
IkReal x1728=(cj3*sj4);
IkReal x1729=((1.0)*cj4);
IkReal x1730=(cj5*sj3);
IkReal x1731=(cj1*x1720);
IkReal x1732=(sj1*x1721);
IkReal x1733=(cj1*x1721);
IkReal x1734=(sj1*x1720);
IkReal x1735=((1.0)*sj3*sj5);
IkReal x1736=(x1731+x1732);
evalcond[0]=(x1736+(((-1.0)*r12*x1729))+((sj4*x1724))+((r11*x1725)));
evalcond[1]=((((-1.0)*r22*x1729))+x1734+((r21*x1725))+((sj4*x1727))+(((-1.0)*x1733)));
evalcond[2]=((((0.71)*cj1))+((r21*x1722))+(((0.54)*x1733))+(((-0.54)*x1734))+(((-1.0)*pz))+(((-1.0)*r20*x1723)));
evalcond[3]=((((-1.0)*r10*x1723))+(((-0.54)*x1731))+(((-0.54)*x1732))+(((-0.71)*sj1))+(((-1.0)*py))+((r11*x1722)));
evalcond[4]=(x1736+((x1726*x1727))+((r22*x1728))+((cj5*r21*x1726))+((r20*x1730))+(((-1.0)*r21*x1735)));
evalcond[5]=((((-1.0)*r11*x1735))+((x1724*x1726))+x1733+((r10*x1730))+((cj5*r11*x1726))+((r12*x1728))+(((-1.0)*x1734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1737=((0.76056338028169)*sj4);
IkReal x1738=((0.211267605633803)*sj5);
IkReal x1739=((0.76056338028169)*cj4);
IkReal x1740=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x1737))+(((-1.0)*r01*x1738))+((r02*x1739))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x1737))+((r00*x1740)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1739))+(((-1.0)*r20*sj5*x1737))+((r20*x1740))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1737))+(((-1.0)*r21*x1738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x1737))+(((-1.0)*r01*x1738))+((r02*x1739))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x1737))+((r00*x1740))))+IKsqr((((r22*x1739))+(((-1.0)*r20*sj5*x1737))+((r20*x1740))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1737))+(((-1.0)*r21*x1738))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x1737))+(((-1.0)*r01*x1738))+((r02*x1739))+(((1.40845070422535)*px))+(((-1.0)*cj5*r01*x1737))+((r00*x1740))), (((r22*x1739))+(((-1.0)*r20*sj5*x1737))+((r20*x1740))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x1737))+(((-1.0)*r21*x1738))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1741=((1.0)*px);
IkReal x1742=((0.54)*sj5);
IkReal x1743=((0.15)*sj5);
IkReal x1744=((0.54)*cj5);
IkReal x1745=(cj3*cj4);
IkReal x1746=((0.15)*cj5);
IkReal x1747=((0.54)*r02);
IkReal x1748=(cj3*sj4);
IkReal x1749=((0.54)*r22);
IkReal x1750=(r01*x1743);
IkReal x1751=((0.71)*(IKsin(j1)));
IkReal x1752=(r00*x1746);
IkReal x1753=(r21*x1743);
IkReal x1754=((0.71)*(IKcos(j1)));
IkReal x1755=(r20*x1746);
IkReal x1756=(x1741+x1752);
IkReal x1757=(x1754+x1753);
IkReal x1758=(x1751+x1750);
evalcond[0]=((((-1.0)*r21*sj4*x1744))+((cj4*x1749))+(((-1.0)*r20*sj4*x1742))+x1755+(((-1.0)*x1757))+pz);
evalcond[1]=((((-1.0)*cj4*x1747))+x1758+((r00*sj4*x1742))+((r01*sj4*x1744))+(((-1.0)*x1756)));
evalcond[2]=(((r21*sj3*x1742))+(((-1.0)*r20*x1742*x1745))+(((-1.0)*x1748*x1749))+x1758+(((-1.0)*r21*x1744*x1745))+(((-1.0)*x1756))+(((-1.0)*r20*sj3*x1744)));
evalcond[3]=(x1757+((r00*x1742*x1745))+((x1747*x1748))+(((-1.0)*pz))+(((-1.0)*x1755))+((r01*x1744*x1745))+(((-1.0)*r01*sj3*x1742))+((r00*sj3*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1759=((1.0)*cj4);
IkReal x1760=(sj1*sj4);
IkReal x1761=(r20*sj5);
IkReal x1762=(cj5*r01);
IkReal x1763=(cj5*r21);
IkReal x1764=(cj1*sj4);
IkReal x1765=(r00*sj5);
if( IKabs(((((-1.0)*cj1*r22*x1759))+(((-1.0)*r02*sj1*x1759))+((x1761*x1764))+((x1760*x1762))+((x1760*x1765))+((x1763*x1764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r02*x1759))+((cj4*r22*sj1))+((x1764*x1765))+((x1762*x1764))+(((-1.0)*x1760*x1763))+(((-1.0)*x1760*x1761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x1759))+(((-1.0)*r02*sj1*x1759))+((x1761*x1764))+((x1760*x1762))+((x1760*x1765))+((x1763*x1764))))+IKsqr(((((-1.0)*cj1*r02*x1759))+((cj4*r22*sj1))+((x1764*x1765))+((x1762*x1764))+(((-1.0)*x1760*x1763))+(((-1.0)*x1760*x1761))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x1759))+(((-1.0)*r02*sj1*x1759))+((x1761*x1764))+((x1760*x1762))+((x1760*x1765))+((x1763*x1764))), ((((-1.0)*cj1*r02*x1759))+((cj4*r22*sj1))+((x1764*x1765))+((x1762*x1764))+(((-1.0)*x1760*x1763))+(((-1.0)*x1760*x1761))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1766=IKsin(j2);
IkReal x1767=IKcos(j2);
IkReal x1768=(cj3*sj4);
IkReal x1769=(r21*sj5);
IkReal x1770=(cj5*sj4);
IkReal x1771=((0.15)*cj5);
IkReal x1772=((1.0)*cj4);
IkReal x1773=(sj4*sj5);
IkReal x1774=((1.0)*sj3);
IkReal x1775=(cj5*sj3);
IkReal x1776=(r01*sj5);
IkReal x1777=(sj1*x1767);
IkReal x1778=(cj1*x1767);
IkReal x1779=(cj3*cj4*sj5);
IkReal x1780=((0.54)*x1766);
IkReal x1781=(sj1*x1766);
IkReal x1782=(cj3*cj4*cj5);
IkReal x1783=((1.0)*cj1*x1766);
evalcond[0]=((((-1.0)*x1783))+x1777+((r20*x1773))+((r21*x1770))+(((-1.0)*r22*x1772)));
evalcond[1]=((((-1.0)*x1778))+((r00*x1773))+((r01*x1770))+(((-1.0)*r02*x1772))+(((-1.0)*x1781)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*r20*x1771))+((cj1*x1780))+(((0.15)*x1769))+(((-1.0)*pz))+(((-0.54)*x1777)));
evalcond[3]=(((sj1*x1780))+(((-1.0)*px))+(((0.15)*x1776))+(((0.71)*sj1))+(((-1.0)*r00*x1771))+(((0.54)*x1778)));
evalcond[4]=(x1781+x1778+((r21*x1782))+((r20*x1779))+((r20*x1775))+((r22*x1768))+(((-1.0)*x1769*x1774)));
evalcond[5]=((((-1.0)*x1783))+x1777+((r00*x1779))+((r00*x1775))+((r02*x1768))+(((-1.0)*x1774*x1776))+((r01*x1782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1784=((0.76056338028169)*sj4);
IkReal x1785=((0.211267605633803)*sj5);
IkReal x1786=((0.76056338028169)*cj4);
IkReal x1787=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x1787))+((r00*sj5*x1784))+((cj5*r01*x1784))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1786))+((r01*x1785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1787))+(((-1.0)*r20*sj5*x1784))+(((-1.0)*cj5*r21*x1784))+((r22*x1786))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1787))+((r00*sj5*x1784))+((cj5*r01*x1784))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1786))+((r01*x1785))))+IKsqr((((r20*x1787))+(((-1.0)*r20*sj5*x1784))+(((-1.0)*cj5*r21*x1784))+((r22*x1786))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1785))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1787))+((r00*sj5*x1784))+((cj5*r01*x1784))+(((-1.40845070422535)*px))+(((-1.0)*r02*x1786))+((r01*x1785))), (((r20*x1787))+(((-1.0)*r20*sj5*x1784))+(((-1.0)*cj5*r21*x1784))+((r22*x1786))+(((1.40845070422535)*pz))+(((-1.0)*r21*x1785))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1788=((0.54)*sj5);
IkReal x1789=((0.15)*sj5);
IkReal x1790=((0.54)*cj5);
IkReal x1791=(cj3*cj4);
IkReal x1792=((0.15)*cj5);
IkReal x1793=((0.54)*r02);
IkReal x1794=(cj3*sj4);
IkReal x1795=((0.54)*r22);
IkReal x1796=(r20*x1792);
IkReal x1797=(r21*x1789);
IkReal x1798=((0.71)*(IKcos(j1)));
IkReal x1799=(r01*x1789);
IkReal x1800=((0.71)*(IKsin(j1)));
IkReal x1801=(r00*x1792);
IkReal x1802=(x1796+pz);
IkReal x1803=(x1798+x1797);
IkReal x1804=(x1801+x1800);
evalcond[0]=((((-1.0)*r20*sj4*x1788))+(((-1.0)*x1803))+x1802+(((-1.0)*r21*sj4*x1790))+((cj4*x1795)));
evalcond[1]=((((-1.0)*x1799))+(((-1.0)*r01*sj4*x1790))+px+x1804+(((-1.0)*r00*sj4*x1788))+((cj4*x1793)));
evalcond[2]=(((r00*sj3*x1790))+((r01*x1790*x1791))+((x1793*x1794))+((r00*x1788*x1791))+(((-1.0)*x1803))+x1802+(((-1.0)*r01*sj3*x1788)));
evalcond[3]=(x1799+(((-1.0)*x1804))+(((-1.0)*px))+(((-1.0)*r21*sj3*x1788))+((x1794*x1795))+((r21*x1790*x1791))+((r20*x1788*x1791))+((r20*sj3*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1805=(cj4*r22);
IkReal x1806=((1.0)*cj1);
IkReal x1807=(r20*sj5);
IkReal x1808=(cj4*r02);
IkReal x1809=(cj5*r21);
IkReal x1810=(cj1*sj4);
IkReal x1811=(cj5*r01);
IkReal x1812=(r00*sj5);
IkReal x1813=((1.0)*sj1*sj4);
if( IKabs((((sj1*x1808))+(((-1.0)*x1812*x1813))+(((-1.0)*x1805*x1806))+(((-1.0)*x1811*x1813))+((x1809*x1810))+((x1807*x1810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x1806*x1811))+(((-1.0)*sj4*x1806*x1812))+((sj1*x1805))+(((-1.0)*x1809*x1813))+(((-1.0)*x1807*x1813))+((cj1*x1808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1808))+(((-1.0)*x1812*x1813))+(((-1.0)*x1805*x1806))+(((-1.0)*x1811*x1813))+((x1809*x1810))+((x1807*x1810))))+IKsqr(((((-1.0)*sj4*x1806*x1811))+(((-1.0)*sj4*x1806*x1812))+((sj1*x1805))+(((-1.0)*x1809*x1813))+(((-1.0)*x1807*x1813))+((cj1*x1808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1808))+(((-1.0)*x1812*x1813))+(((-1.0)*x1805*x1806))+(((-1.0)*x1811*x1813))+((x1809*x1810))+((x1807*x1810))), ((((-1.0)*sj4*x1806*x1811))+(((-1.0)*sj4*x1806*x1812))+((sj1*x1805))+(((-1.0)*x1809*x1813))+(((-1.0)*x1807*x1813))+((cj1*x1808))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1814=IKcos(j2);
IkReal x1815=IKsin(j2);
IkReal x1816=(cj3*sj4);
IkReal x1817=(r21*sj5);
IkReal x1818=(cj5*sj4);
IkReal x1819=((0.15)*cj5);
IkReal x1820=((1.0)*cj4);
IkReal x1821=(sj4*sj5);
IkReal x1822=((1.0)*sj3);
IkReal x1823=(cj5*sj3);
IkReal x1824=(r01*sj5);
IkReal x1825=(cj1*x1814);
IkReal x1826=(sj1*x1815);
IkReal x1827=(cj3*cj4*sj5);
IkReal x1828=(cj1*x1815);
IkReal x1829=(sj1*x1814);
IkReal x1830=(cj3*cj4*cj5);
IkReal x1831=(x1825+x1826);
evalcond[0]=(((r00*x1821))+((r01*x1818))+x1831+(((-1.0)*r02*x1820)));
evalcond[1]=((((-1.0)*x1828))+(((-1.0)*r22*x1820))+x1829+((r21*x1818))+((r20*x1821)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1817))+(((-0.54)*x1829))+(((-1.0)*pz))+(((0.54)*x1828))+(((-1.0)*r20*x1819)));
evalcond[3]=((((-0.54)*x1825))+(((-0.54)*x1826))+(((-0.71)*sj1))+(((-1.0)*px))+(((-1.0)*r00*x1819))+(((0.15)*x1824)));
evalcond[4]=(((r22*x1816))+(((-1.0)*x1817*x1822))+((r21*x1830))+x1831+((r20*x1827))+((r20*x1823)));
evalcond[5]=(((r01*x1830))+((r02*x1816))+(((-1.0)*x1829))+((r00*x1827))+((r00*x1823))+x1828+(((-1.0)*x1822*x1824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1832=(cj5*sj4);
IkReal x1833=(cj0*r01);
IkReal x1834=((0.54)*cj0);
IkReal x1835=(sj4*sj5);
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(cj0,-2);
if(!x1836.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x1836.value)*((((r00*x1834*x1835))+(((0.54)*x1832*x1833))+(((0.15)*sj5*x1833))+(((-1.0)*cj4*r02*x1834))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r21*x1832))+(((-0.76056338028169)*r20*x1835))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x1836.value)*((((r00*x1834*x1835))+(((0.54)*x1832*x1833))+(((0.15)*sj5*x1833))+(((-1.0)*cj4*r02*x1834))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.76056338028169)*r21*x1832))+(((-0.76056338028169)*r20*x1835))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x1836.value)*((((r00*x1834*x1835))+(((0.54)*x1832*x1833))+(((0.15)*sj5*x1833))+(((-1.0)*cj4*r02*x1834))+(((-0.15)*cj0*cj5*r00))+(((-1.0)*cj0*px))))), ((((-0.76056338028169)*r21*x1832))+(((-0.76056338028169)*r20*x1835))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1837=IKsin(j1);
IkReal x1838=IKcos(j1);
IkReal x1839=((0.15)*sj5);
IkReal x1840=(r21*sj0);
IkReal x1841=((0.54)*r20);
IkReal x1842=(sj4*sj5);
IkReal x1843=(cj5*sj3);
IkReal x1844=(cj3*cj5);
IkReal x1845=((0.15)*cj5);
IkReal x1846=(r11*sj0);
IkReal x1847=((0.54)*r01);
IkReal x1848=((0.54)*r00);
IkReal x1849=(cj3*sj0);
IkReal x1850=(cj4*sj5);
IkReal x1851=((1.0)*py);
IkReal x1852=(cj0*r21);
IkReal x1853=((0.54)*sj4);
IkReal x1854=((0.54)*r10);
IkReal x1855=(cj0*r11);
IkReal x1856=(cj5*sj4);
IkReal x1857=((1.0)*px);
IkReal x1858=((0.54)*cj4);
IkReal x1859=(cj0*cj3);
IkReal x1860=((1.0)*pz);
IkReal x1861=((0.71)*x1837);
IkReal x1862=(cj0*x1858);
IkReal x1863=((0.54)*sj3*sj5);
IkReal x1864=((0.71)*x1838);
IkReal x1865=(cj0*sj0*x1861);
evalcond[0]=((((-1.0)*x1841*x1842))+(((-1.0)*r21*x1839))+((r22*x1858))+pz+((r20*x1845))+(((-1.0)*x1864))+(((-1.0)*cj5*r21*x1853)));
evalcond[1]=(((cj5*x1846*x1853))+((sj0*x1842*x1854))+((x1861*(sj0*sj0)))+((x1839*x1846))+(((-1.0)*r10*sj0*x1845))+(((-1.0)*sj0*x1851))+(((-1.0)*r12*sj0*x1858)));
evalcond[2]=((((-1.0)*cj0*r00*x1845))+(((-1.0)*r02*x1862))+((cj0*x1847*x1856))+((cj0*x1842*x1848))+((x1861*(cj0*cj0)))+(((-1.0)*cj0*x1857))+((cj0*r01*x1839)));
evalcond[3]=(((x1843*x1854))+(((-1.0)*r20*sj0*x1845))+((r11*x1844*x1858))+(((-1.0)*r11*x1863))+((x1839*x1840))+((cj3*r12*x1853))+((sj0*x1864))+(((-1.0)*sj0*x1860))+((cj3*x1850*x1854)));
evalcond[4]=((((-1.0)*cj0*r20*x1845))+(((-1.0)*cj0*x1860))+((cj3*x1848*x1850))+((cj0*x1864))+((cj4*x1844*x1847))+((x1843*x1848))+((x1839*x1852))+((cj3*r02*x1853))+(((-1.0)*sj3*sj5*x1847)));
evalcond[5]=(((x1840*x1863))+(((-1.0)*x1840*x1844*x1858))+(((-1.0)*r10*x1845))+((r11*x1839))+(((-1.0)*r22*x1849*x1853))+(((-1.0)*sj0*x1841*x1843))+(((-1.0)*x1841*x1849*x1850))+((sj0*x1861))+(((-1.0)*x1851)));
evalcond[6]=(((r01*x1839))+(((-1.0)*x1844*x1852*x1858))+(((-1.0)*r00*x1845))+((cj0*x1861))+(((-1.0)*cj0*x1841*x1843))+(((-1.0)*x1841*x1850*x1859))+(((-1.0)*r22*x1853*x1859))+(((-1.0)*x1857))+((x1852*x1863)));
evalcond[7]=(((r01*sj0*x1839))+((cj5*x1853*x1855))+(((-1.0)*r12*x1862))+x1865+(((-1.0)*sj0*x1857))+(((-1.0)*r00*sj0*x1845))+((cj0*x1842*x1854)));
evalcond[8]=(((sj0*x1842*x1848))+(((-1.0)*cj0*r10*x1845))+(((-1.0)*cj0*x1851))+x1865+((sj0*x1847*x1856))+((x1839*x1855))+(((-1.0)*r02*sj0*x1858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1866=((1.0)*cj4);
IkReal x1867=(sj1*sj4);
IkReal x1868=(r20*sj5);
IkReal x1869=(cj5*r01);
IkReal x1870=(cj5*r21);
IkReal x1871=(cj1*sj4);
IkReal x1872=(r00*sj5);
if( IKabs((((x1867*x1869))+((x1868*x1871))+(((-1.0)*r02*sj1*x1866))+((x1867*x1872))+((x1870*x1871))+(((-1.0)*cj1*r22*x1866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1867*x1868))+(((-1.0)*cj1*r02*x1866))+((x1871*x1872))+((cj4*r22*sj1))+(((-1.0)*x1867*x1870))+((x1869*x1871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1867*x1869))+((x1868*x1871))+(((-1.0)*r02*sj1*x1866))+((x1867*x1872))+((x1870*x1871))+(((-1.0)*cj1*r22*x1866))))+IKsqr(((((-1.0)*x1867*x1868))+(((-1.0)*cj1*r02*x1866))+((x1871*x1872))+((cj4*r22*sj1))+(((-1.0)*x1867*x1870))+((x1869*x1871))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1867*x1869))+((x1868*x1871))+(((-1.0)*r02*sj1*x1866))+((x1867*x1872))+((x1870*x1871))+(((-1.0)*cj1*r22*x1866))), ((((-1.0)*x1867*x1868))+(((-1.0)*cj1*r02*x1866))+((x1871*x1872))+((cj4*r22*sj1))+(((-1.0)*x1867*x1870))+((x1869*x1871))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1873=IKsin(j2);
IkReal x1874=IKcos(j2);
IkReal x1875=(cj3*sj4);
IkReal x1876=(r21*sj5);
IkReal x1877=(cj5*sj4);
IkReal x1878=((0.15)*cj5);
IkReal x1879=((1.0)*cj4);
IkReal x1880=(sj4*sj5);
IkReal x1881=((1.0)*sj3);
IkReal x1882=(cj5*sj3);
IkReal x1883=(r01*sj5);
IkReal x1884=(sj1*x1874);
IkReal x1885=(cj1*x1874);
IkReal x1886=(cj3*cj4*sj5);
IkReal x1887=((0.54)*x1873);
IkReal x1888=(sj1*x1873);
IkReal x1889=(cj3*cj4*cj5);
IkReal x1890=((1.0)*cj1*x1873);
evalcond[0]=((((-1.0)*r22*x1879))+((r20*x1880))+x1884+((r21*x1877))+(((-1.0)*x1890)));
evalcond[1]=((((-1.0)*r02*x1879))+((r00*x1880))+((r01*x1877))+(((-1.0)*x1885))+(((-1.0)*x1888)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1876))+(((-0.54)*x1884))+((cj1*x1887))+(((-1.0)*pz))+(((-1.0)*r20*x1878)));
evalcond[3]=((((0.15)*x1883))+(((0.54)*x1885))+(((-1.0)*r00*x1878))+(((-1.0)*px))+(((0.71)*sj1))+((sj1*x1887)));
evalcond[4]=((((-1.0)*x1876*x1881))+((r21*x1889))+((r22*x1875))+((r20*x1886))+((r20*x1882))+x1888+x1885);
evalcond[5]=(((r02*x1875))+((r00*x1882))+((r00*x1886))+((r01*x1889))+x1884+(((-1.0)*x1890))+(((-1.0)*x1881*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1891=(cj4*r22);
IkReal x1892=((1.0)*cj1);
IkReal x1893=(r20*sj5);
IkReal x1894=(cj4*r02);
IkReal x1895=(cj5*r21);
IkReal x1896=(cj1*sj4);
IkReal x1897=(cj5*r01);
IkReal x1898=(r00*sj5);
IkReal x1899=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x1897*x1899))+((x1893*x1896))+(((-1.0)*x1891*x1892))+(((-1.0)*x1898*x1899))+((x1895*x1896))+((sj1*x1894)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1893*x1899))+(((-1.0)*sj4*x1892*x1898))+(((-1.0)*sj4*x1892*x1897))+((cj1*x1894))+(((-1.0)*x1895*x1899))+((sj1*x1891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1897*x1899))+((x1893*x1896))+(((-1.0)*x1891*x1892))+(((-1.0)*x1898*x1899))+((x1895*x1896))+((sj1*x1894))))+IKsqr(((((-1.0)*x1893*x1899))+(((-1.0)*sj4*x1892*x1898))+(((-1.0)*sj4*x1892*x1897))+((cj1*x1894))+(((-1.0)*x1895*x1899))+((sj1*x1891))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1897*x1899))+((x1893*x1896))+(((-1.0)*x1891*x1892))+(((-1.0)*x1898*x1899))+((x1895*x1896))+((sj1*x1894))), ((((-1.0)*x1893*x1899))+(((-1.0)*sj4*x1892*x1898))+(((-1.0)*sj4*x1892*x1897))+((cj1*x1894))+(((-1.0)*x1895*x1899))+((sj1*x1891))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1900=IKcos(j2);
IkReal x1901=IKsin(j2);
IkReal x1902=(cj3*sj4);
IkReal x1903=(r21*sj5);
IkReal x1904=(cj5*sj4);
IkReal x1905=((0.15)*cj5);
IkReal x1906=((1.0)*cj4);
IkReal x1907=(sj4*sj5);
IkReal x1908=((1.0)*sj3);
IkReal x1909=(cj5*sj3);
IkReal x1910=(r01*sj5);
IkReal x1911=(cj1*x1900);
IkReal x1912=(sj1*x1901);
IkReal x1913=(cj3*cj4*sj5);
IkReal x1914=(cj1*x1901);
IkReal x1915=(sj1*x1900);
IkReal x1916=(cj3*cj4*cj5);
IkReal x1917=(x1911+x1912);
evalcond[0]=(((r01*x1904))+((r00*x1907))+x1917+(((-1.0)*r02*x1906)));
evalcond[1]=((((-1.0)*r22*x1906))+((r21*x1904))+(((-1.0)*x1914))+x1915+((r20*x1907)));
evalcond[2]=((((0.71)*cj1))+(((0.15)*x1903))+(((-1.0)*pz))+(((-1.0)*r20*x1905))+(((-0.54)*x1915))+(((0.54)*x1914)));
evalcond[3]=((((0.15)*x1910))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.54)*x1911))+(((-0.54)*x1912))+(((-1.0)*r00*x1905)));
evalcond[4]=((((-1.0)*x1903*x1908))+x1917+((r22*x1902))+((r21*x1916))+((r20*x1913))+((r20*x1909)));
evalcond[5]=(((r00*x1909))+((r00*x1913))+((r01*x1916))+(((-1.0)*x1915))+x1914+((r02*x1902))+(((-1.0)*x1908*x1910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1918=((1.0)*cj4);
IkReal x1919=(r20*sj5);
IkReal x1920=((1.0)*sj1*sj4);
IkReal x1921=(cj1*cj5*sj4);
IkReal x1922=(r10*sj4*sj5);
if( IKabs((((cj5*r11*sj1*sj4))+((cj1*sj4*x1919))+(((-1.0)*cj1*r22*x1918))+(((-1.0)*r12*sj1*x1918))+((r21*x1921))+((sj1*x1922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1920))+(((-1.0)*cj1*r12*x1918))+((cj1*x1922))+((cj4*r22*sj1))+(((-1.0)*x1919*x1920))+((r11*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj1*sj4))+((cj1*sj4*x1919))+(((-1.0)*cj1*r22*x1918))+(((-1.0)*r12*sj1*x1918))+((r21*x1921))+((sj1*x1922))))+IKsqr(((((-1.0)*cj5*r21*x1920))+(((-1.0)*cj1*r12*x1918))+((cj1*x1922))+((cj4*r22*sj1))+(((-1.0)*x1919*x1920))+((r11*x1921))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r11*sj1*sj4))+((cj1*sj4*x1919))+(((-1.0)*cj1*r22*x1918))+(((-1.0)*r12*sj1*x1918))+((r21*x1921))+((sj1*x1922))), ((((-1.0)*cj5*r21*x1920))+(((-1.0)*cj1*r12*x1918))+((cj1*x1922))+((cj4*r22*sj1))+(((-1.0)*x1919*x1920))+((r11*x1921))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1923=IKsin(j2);
IkReal x1924=IKcos(j2);
IkReal x1925=((0.15)*sj5);
IkReal x1926=((0.15)*cj5);
IkReal x1927=(cj5*sj4);
IkReal x1928=(cj3*cj4);
IkReal x1929=(r20*sj5);
IkReal x1930=(cj3*sj4);
IkReal x1931=(r10*sj5);
IkReal x1932=((1.0)*cj4);
IkReal x1933=(cj5*sj3);
IkReal x1934=(sj1*x1924);
IkReal x1935=(cj1*x1924);
IkReal x1936=((0.54)*x1923);
IkReal x1937=((1.0)*sj3*sj5);
IkReal x1938=(sj1*x1923);
IkReal x1939=((1.0)*cj1*x1923);
evalcond[0]=(((sj4*x1929))+(((-1.0)*r22*x1932))+x1934+((r21*x1927))+(((-1.0)*x1939)));
evalcond[1]=((((-1.0)*x1938))+(((-1.0)*x1935))+((sj4*x1931))+(((-1.0)*r12*x1932))+((r11*x1927)));
evalcond[2]=((((0.71)*cj1))+((cj1*x1936))+(((-1.0)*r20*x1926))+(((-1.0)*pz))+(((-0.54)*x1934))+((r21*x1925)));
evalcond[3]=((((-1.0)*py))+((sj1*x1936))+(((0.71)*sj1))+((r11*x1925))+(((-1.0)*r10*x1926))+(((0.54)*x1935)));
evalcond[4]=(((cj5*r21*x1928))+((x1928*x1929))+((r22*x1930))+(((-1.0)*r21*x1937))+x1935+x1938+((r20*x1933)));
evalcond[5]=(((cj5*r11*x1928))+((r12*x1930))+x1934+(((-1.0)*r11*x1937))+((x1928*x1931))+((r10*x1933))+(((-1.0)*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1940=(cj1*cj4);
IkReal x1941=(r20*sj5);
IkReal x1942=(cj4*sj1);
IkReal x1943=(cj5*r21);
IkReal x1944=(cj1*sj4);
IkReal x1945=(cj5*r11);
IkReal x1946=(r10*sj5);
IkReal x1947=((1.0)*sj1*sj4);
if( IKabs((((x1943*x1944))+(((-1.0)*x1945*x1947))+((r12*x1942))+((x1941*x1944))+(((-1.0)*x1946*x1947))+(((-1.0)*r22*x1940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1944*x1946))+(((-1.0)*x1944*x1945))+(((-1.0)*x1943*x1947))+((r12*x1940))+((r22*x1942))+(((-1.0)*x1941*x1947)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1943*x1944))+(((-1.0)*x1945*x1947))+((r12*x1942))+((x1941*x1944))+(((-1.0)*x1946*x1947))+(((-1.0)*r22*x1940))))+IKsqr(((((-1.0)*x1944*x1946))+(((-1.0)*x1944*x1945))+(((-1.0)*x1943*x1947))+((r12*x1940))+((r22*x1942))+(((-1.0)*x1941*x1947))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1943*x1944))+(((-1.0)*x1945*x1947))+((r12*x1942))+((x1941*x1944))+(((-1.0)*x1946*x1947))+(((-1.0)*r22*x1940))), ((((-1.0)*x1944*x1946))+(((-1.0)*x1944*x1945))+(((-1.0)*x1943*x1947))+((r12*x1940))+((r22*x1942))+(((-1.0)*x1941*x1947))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1948=IKcos(j2);
IkReal x1949=IKsin(j2);
IkReal x1950=((0.15)*sj5);
IkReal x1951=((0.15)*cj5);
IkReal x1952=(r10*sj5);
IkReal x1953=(cj5*sj4);
IkReal x1954=(cj3*cj4);
IkReal x1955=(r20*sj5);
IkReal x1956=(cj3*sj4);
IkReal x1957=((1.0)*cj4);
IkReal x1958=(cj5*sj3);
IkReal x1959=(cj1*x1948);
IkReal x1960=(sj1*x1949);
IkReal x1961=(cj1*x1949);
IkReal x1962=(sj1*x1948);
IkReal x1963=((1.0)*sj3*sj5);
IkReal x1964=(x1960+x1959);
evalcond[0]=(((r11*x1953))+x1964+(((-1.0)*r12*x1957))+((sj4*x1952)));
evalcond[1]=((((-1.0)*r22*x1957))+(((-1.0)*x1961))+((r21*x1953))+x1962+((sj4*x1955)));
evalcond[2]=((((0.71)*cj1))+((r21*x1950))+(((-1.0)*pz))+(((-0.54)*x1962))+(((0.54)*x1961))+(((-1.0)*r20*x1951)));
evalcond[3]=(((r11*x1950))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x1951))+(((-0.54)*x1960))+(((-0.54)*x1959)));
evalcond[4]=(((r20*x1958))+((cj5*r21*x1954))+((x1954*x1955))+((r22*x1956))+x1964+(((-1.0)*r21*x1963)));
evalcond[5]=(((x1952*x1954))+((r12*x1956))+(((-1.0)*x1962))+((r10*x1958))+x1961+((cj5*r11*x1954))+(((-1.0)*r11*x1963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1965=(cj5*sj4);
IkReal x1966=((1.0)*sj0);
IkReal x1967=(cj4*r22);
IkReal x1968=(cj1*sj4*sj5);
IkReal x1969=((1.0)*cj4*r12);
IkReal x1970=(sj1*sj4*sj5);
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1971.valid){
continue;
}
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal((((r20*sj0*x1968))+((r11*sj1*x1965))+((r10*x1970))+((cj1*r21*sj0*x1965))+(((-1.0)*sj1*x1969))+(((-1.0)*cj1*x1966*x1967)))),IkReal(((((-1.0)*r20*x1966*x1970))+((r10*x1968))+(((-1.0)*r21*sj1*x1965*x1966))+((sj0*sj1*x1967))+(((-1.0)*cj1*x1969))+((cj1*r11*x1965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1971.value)))+(x1972.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1973=IKsin(j2);
IkReal x1974=IKcos(j2);
IkReal x1975=(cj3*sj4);
IkReal x1976=(cj0*sj1);
IkReal x1977=((0.15)*sj5);
IkReal x1978=((0.15)*cj5);
IkReal x1979=(cj5*r01);
IkReal x1980=(cj3*cj4);
IkReal x1981=(cj5*sj4);
IkReal x1982=((1.0)*cj0);
IkReal x1983=(r20*sj5);
IkReal x1984=(sj0*sj1);
IkReal x1985=(r10*sj5);
IkReal x1986=((1.0)*cj4);
IkReal x1987=(cj5*sj3);
IkReal x1988=(r00*sj5);
IkReal x1989=(cj1*x1974);
IkReal x1990=((0.54)*x1973);
IkReal x1991=((1.0)*x1973);
IkReal x1992=((1.0)*sj3*sj5);
IkReal x1993=(sj1*x1974);
IkReal x1994=(sj0*x1991);
evalcond[0]=(((r21*x1981))+x1993+((sj4*x1983))+(((-1.0)*cj1*x1991))+(((-1.0)*r22*x1986)));
evalcond[1]=((((0.71)*cj1))+((r21*x1977))+(((-1.0)*pz))+((cj1*x1990))+(((-1.0)*r20*x1978))+(((-0.54)*x1993)));
evalcond[2]=((((-1.0)*r02*x1986))+(((-1.0)*x1976*x1991))+((sj4*x1988))+((sj4*x1979))+(((-1.0)*x1982*x1989)));
evalcond[3]=((((-1.0)*sj0*x1989))+((r11*x1981))+(((-1.0)*r12*x1986))+((sj4*x1985))+(((-1.0)*x1984*x1991)));
evalcond[4]=(((x1976*x1990))+(((0.54)*cj0*x1989))+(((-1.0)*r00*x1978))+(((-1.0)*px))+((r01*x1977))+(((0.71)*x1976)));
evalcond[5]=((((0.54)*sj0*x1989))+((r11*x1977))+(((-1.0)*py))+(((-1.0)*r10*x1978))+(((0.71)*x1984))+((x1984*x1990)));
evalcond[6]=((((-1.0)*r21*x1992))+((cj5*r21*x1980))+((sj1*x1973))+((x1980*x1983))+((r22*x1975))+x1989+((r20*x1987)));
evalcond[7]=(((r02*x1975))+(((-1.0)*cj1*x1973*x1982))+(((-1.0)*r01*x1992))+((x1980*x1988))+((x1979*x1980))+((x1974*x1976))+((r00*x1987)));
evalcond[8]=(((r12*x1975))+((r10*x1987))+((x1980*x1985))+((x1974*x1984))+((cj5*r11*x1980))+(((-1.0)*cj1*x1994))+(((-1.0)*r11*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1995=(sj1*sj4);
IkReal x1996=(cj5*r01);
IkReal x1997=((1.0)*cj0);
IkReal x1998=(r20*sj5);
IkReal x1999=(cj4*r22);
IkReal x2000=(r00*sj5);
IkReal x2001=(cj1*sj4);
IkReal x2002=(cj5*r21);
IkReal x2003=((1.0)*cj4*r02);
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal((((cj0*x2001*x2002))+(((-1.0)*sj1*x2003))+(((-1.0)*cj1*x1997*x1999))+((x1995*x1996))+((cj0*x1998*x2001))+((x1995*x2000)))),IkReal((((x2000*x2001))+((cj0*sj1*x1999))+(((-1.0)*cj1*x2003))+(((-1.0)*x1995*x1997*x1998))+(((-1.0)*x1995*x1997*x2002))+((x1996*x2001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
CheckValue<IkReal> x2005=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2005.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2004.value)+(((1.5707963267949)*(x2005.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2006=IKsin(j2);
IkReal x2007=IKcos(j2);
IkReal x2008=(cj3*sj4);
IkReal x2009=(cj0*sj1);
IkReal x2010=((0.15)*sj5);
IkReal x2011=((0.15)*cj5);
IkReal x2012=(cj5*r01);
IkReal x2013=(cj3*cj4);
IkReal x2014=(cj5*sj4);
IkReal x2015=((1.0)*cj0);
IkReal x2016=(r20*sj5);
IkReal x2017=(sj0*sj1);
IkReal x2018=(r10*sj5);
IkReal x2019=((1.0)*cj4);
IkReal x2020=(cj5*sj3);
IkReal x2021=(r00*sj5);
IkReal x2022=(cj1*x2007);
IkReal x2023=((0.54)*x2006);
IkReal x2024=((1.0)*x2006);
IkReal x2025=((1.0)*sj3*sj5);
IkReal x2026=(sj1*x2007);
IkReal x2027=(sj0*x2024);
evalcond[0]=(((sj4*x2016))+x2026+(((-1.0)*cj1*x2024))+((r21*x2014))+(((-1.0)*r22*x2019)));
evalcond[1]=((((-1.0)*r20*x2011))+(((0.71)*cj1))+(((-1.0)*pz))+((r21*x2010))+((cj1*x2023))+(((-0.54)*x2026)));
evalcond[2]=(((sj4*x2012))+(((-1.0)*x2009*x2024))+(((-1.0)*r02*x2019))+(((-1.0)*x2015*x2022))+((sj4*x2021)));
evalcond[3]=(((sj4*x2018))+(((-1.0)*sj0*x2022))+(((-1.0)*x2017*x2024))+(((-1.0)*r12*x2019))+((r11*x2014)));
evalcond[4]=((((0.54)*cj0*x2022))+(((0.71)*x2009))+((x2009*x2023))+((r01*x2010))+(((-1.0)*px))+(((-1.0)*r00*x2011)));
evalcond[5]=((((0.54)*sj0*x2022))+((x2017*x2023))+(((-1.0)*py))+(((0.71)*x2017))+((r11*x2010))+(((-1.0)*r10*x2011)));
evalcond[6]=(((r22*x2008))+((cj5*r21*x2013))+x2022+((sj1*x2006))+(((-1.0)*r21*x2025))+((r20*x2020))+((x2013*x2016)));
evalcond[7]=(((r00*x2020))+(((-1.0)*r01*x2025))+((x2007*x2009))+((r02*x2008))+(((-1.0)*cj1*x2006*x2015))+((x2013*x2021))+((x2012*x2013)));
evalcond[8]=(((r10*x2020))+((r12*x2008))+(((-1.0)*cj1*x2027))+(((-1.0)*r11*x2025))+((cj5*r11*x2013))+((x2007*x2017))+((x2013*x2018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2028=(cj5*sj4);
IkReal x2029=((0.54)*sj0);
IkReal x2030=(sj4*sj5);
IkReal x2031=((0.15)*sj0);
CheckValue<IkReal> x2032=IKPowWithIntegerCheck(sj0,-2);
if(!x2032.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2032.value)*(((((-1.0)*cj4*r12*x2029))+((r10*x2029*x2030))+(((-1.0)*py*sj0))+(((-1.0)*cj5*r10*x2031))+((r11*x2028*x2029))+((r11*sj5*x2031)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r20*x2030))+(((-0.76056338028169)*r21*x2028))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2032.value)*(((((-1.0)*cj4*r12*x2029))+((r10*x2029*x2030))+(((-1.0)*py*sj0))+(((-1.0)*cj5*r10*x2031))+((r11*x2028*x2029))+((r11*sj5*x2031))))))+IKsqr(((((-0.76056338028169)*r20*x2030))+(((-0.76056338028169)*r21*x2028))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2032.value)*(((((-1.0)*cj4*r12*x2029))+((r10*x2029*x2030))+(((-1.0)*py*sj0))+(((-1.0)*cj5*r10*x2031))+((r11*x2028*x2029))+((r11*sj5*x2031))))), ((((-0.76056338028169)*r20*x2030))+(((-0.76056338028169)*r21*x2028))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2033=IKsin(j1);
IkReal x2034=IKcos(j1);
IkReal x2035=((0.15)*sj5);
IkReal x2036=(r21*sj0);
IkReal x2037=((0.54)*r20);
IkReal x2038=(sj4*sj5);
IkReal x2039=(cj5*sj3);
IkReal x2040=(cj3*cj5);
IkReal x2041=((0.15)*cj5);
IkReal x2042=(r11*sj0);
IkReal x2043=((0.54)*r01);
IkReal x2044=((0.54)*r00);
IkReal x2045=(cj3*sj0);
IkReal x2046=(cj4*sj5);
IkReal x2047=((1.0)*py);
IkReal x2048=(cj0*r21);
IkReal x2049=((0.54)*sj4);
IkReal x2050=((0.54)*r10);
IkReal x2051=(cj0*r11);
IkReal x2052=(cj5*sj4);
IkReal x2053=((1.0)*px);
IkReal x2054=((0.54)*cj4);
IkReal x2055=(cj0*cj3);
IkReal x2056=((1.0)*pz);
IkReal x2057=((0.71)*x2033);
IkReal x2058=(cj0*x2054);
IkReal x2059=((0.54)*sj3*sj5);
IkReal x2060=((0.71)*x2034);
IkReal x2061=(cj0*sj0*x2057);
evalcond[0]=(((r22*x2054))+((r20*x2041))+(((-1.0)*x2060))+(((-1.0)*cj5*r21*x2049))+pz+(((-1.0)*r21*x2035))+(((-1.0)*x2037*x2038)));
evalcond[1]=((((-1.0)*sj0*x2047))+((x2057*(sj0*sj0)))+((sj0*x2038*x2050))+(((-1.0)*r10*sj0*x2041))+((cj5*x2042*x2049))+(((-1.0)*r12*sj0*x2054))+((x2035*x2042)));
evalcond[2]=((((-1.0)*r02*x2058))+(((-1.0)*cj0*r00*x2041))+(((-1.0)*cj0*x2053))+((cj0*r01*x2035))+((cj0*x2043*x2052))+((x2057*(cj0*cj0)))+((cj0*x2038*x2044)));
evalcond[3]=((((-1.0)*r11*x2059))+(((-1.0)*r20*sj0*x2041))+((sj0*x2060))+(((-1.0)*sj0*x2056))+((x2035*x2036))+((cj3*x2046*x2050))+((x2039*x2050))+((r11*x2040*x2054))+((cj3*r12*x2049)));
evalcond[4]=(((cj0*x2060))+((cj4*x2040*x2043))+(((-1.0)*sj3*sj5*x2043))+((x2039*x2044))+((cj3*x2044*x2046))+((cj3*r02*x2049))+(((-1.0)*cj0*r20*x2041))+(((-1.0)*cj0*x2056))+((x2035*x2048)));
evalcond[5]=((((-1.0)*r22*x2045*x2049))+(((-1.0)*x2037*x2045*x2046))+(((-1.0)*x2047))+(((-1.0)*r10*x2041))+((sj0*x2057))+(((-1.0)*sj0*x2037*x2039))+((x2036*x2059))+((r11*x2035))+(((-1.0)*x2036*x2040*x2054)));
evalcond[6]=((((-1.0)*r22*x2049*x2055))+(((-1.0)*cj0*x2037*x2039))+((r01*x2035))+((cj0*x2057))+((x2048*x2059))+(((-1.0)*x2037*x2046*x2055))+(((-1.0)*x2053))+(((-1.0)*x2040*x2048*x2054))+(((-1.0)*r00*x2041)));
evalcond[7]=(x2061+(((-1.0)*r12*x2058))+((cj5*x2049*x2051))+((r01*sj0*x2035))+((cj0*x2038*x2050))+(((-1.0)*sj0*x2053))+(((-1.0)*r00*sj0*x2041)));
evalcond[8]=(((sj0*x2038*x2044))+x2061+(((-1.0)*r02*sj0*x2054))+(((-1.0)*cj0*x2047))+((sj0*x2043*x2052))+((x2035*x2051))+(((-1.0)*cj0*r10*x2041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2062=((1.0)*cj4);
IkReal x2063=(sj1*sj4);
IkReal x2064=(r20*sj5);
IkReal x2065=(cj5*r01);
IkReal x2066=(cj5*r21);
IkReal x2067=(cj1*sj4);
IkReal x2068=(r00*sj5);
if( IKabs((((x2066*x2067))+(((-1.0)*r02*sj1*x2062))+(((-1.0)*cj1*r22*x2062))+((x2063*x2065))+((x2063*x2068))+((x2064*x2067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2067*x2068))+((cj4*r22*sj1))+(((-1.0)*x2063*x2066))+(((-1.0)*x2063*x2064))+(((-1.0)*cj1*r02*x2062))+((x2065*x2067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2066*x2067))+(((-1.0)*r02*sj1*x2062))+(((-1.0)*cj1*r22*x2062))+((x2063*x2065))+((x2063*x2068))+((x2064*x2067))))+IKsqr((((x2067*x2068))+((cj4*r22*sj1))+(((-1.0)*x2063*x2066))+(((-1.0)*x2063*x2064))+(((-1.0)*cj1*r02*x2062))+((x2065*x2067))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2066*x2067))+(((-1.0)*r02*sj1*x2062))+(((-1.0)*cj1*r22*x2062))+((x2063*x2065))+((x2063*x2068))+((x2064*x2067))), (((x2067*x2068))+((cj4*r22*sj1))+(((-1.0)*x2063*x2066))+(((-1.0)*x2063*x2064))+(((-1.0)*cj1*r02*x2062))+((x2065*x2067))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2069=IKsin(j2);
IkReal x2070=IKcos(j2);
IkReal x2071=(cj3*sj4);
IkReal x2072=(r21*sj5);
IkReal x2073=(cj5*sj4);
IkReal x2074=((0.15)*cj5);
IkReal x2075=((1.0)*cj4);
IkReal x2076=(sj4*sj5);
IkReal x2077=((1.0)*sj3);
IkReal x2078=(cj5*sj3);
IkReal x2079=(r01*sj5);
IkReal x2080=(sj1*x2070);
IkReal x2081=(cj1*x2070);
IkReal x2082=(cj3*cj4*sj5);
IkReal x2083=((0.54)*x2069);
IkReal x2084=(sj1*x2069);
IkReal x2085=(cj3*cj4*cj5);
IkReal x2086=((1.0)*cj1*x2069);
evalcond[0]=(x2080+(((-1.0)*r22*x2075))+(((-1.0)*x2086))+((r20*x2076))+((r21*x2073)));
evalcond[1]=((((-1.0)*r02*x2075))+(((-1.0)*x2084))+(((-1.0)*x2081))+((r01*x2073))+((r00*x2076)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2083))+(((-1.0)*pz))+(((-0.54)*x2080))+(((-1.0)*r20*x2074))+(((0.15)*x2072)));
evalcond[3]=(((sj1*x2083))+(((-1.0)*px))+(((-1.0)*r00*x2074))+(((0.15)*x2079))+(((0.54)*x2081))+(((0.71)*sj1)));
evalcond[4]=(((r22*x2071))+x2081+x2084+((r20*x2082))+((r20*x2078))+((r21*x2085))+(((-1.0)*x2072*x2077)));
evalcond[5]=(x2080+(((-1.0)*x2086))+(((-1.0)*x2077*x2079))+((r02*x2071))+((r01*x2085))+((r00*x2078))+((r00*x2082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2087=(cj4*r22);
IkReal x2088=((1.0)*cj1);
IkReal x2089=(r20*sj5);
IkReal x2090=(cj4*r02);
IkReal x2091=(cj5*r21);
IkReal x2092=(cj1*sj4);
IkReal x2093=(cj5*r01);
IkReal x2094=(r00*sj5);
IkReal x2095=((1.0)*sj1*sj4);
if( IKabs((((sj1*x2090))+((x2091*x2092))+(((-1.0)*x2094*x2095))+(((-1.0)*x2087*x2088))+(((-1.0)*x2093*x2095))+((x2089*x2092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2090))+(((-1.0)*x2091*x2095))+(((-1.0)*sj4*x2088*x2093))+(((-1.0)*sj4*x2088*x2094))+((sj1*x2087))+(((-1.0)*x2089*x2095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2090))+((x2091*x2092))+(((-1.0)*x2094*x2095))+(((-1.0)*x2087*x2088))+(((-1.0)*x2093*x2095))+((x2089*x2092))))+IKsqr((((cj1*x2090))+(((-1.0)*x2091*x2095))+(((-1.0)*sj4*x2088*x2093))+(((-1.0)*sj4*x2088*x2094))+((sj1*x2087))+(((-1.0)*x2089*x2095))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2090))+((x2091*x2092))+(((-1.0)*x2094*x2095))+(((-1.0)*x2087*x2088))+(((-1.0)*x2093*x2095))+((x2089*x2092))), (((cj1*x2090))+(((-1.0)*x2091*x2095))+(((-1.0)*sj4*x2088*x2093))+(((-1.0)*sj4*x2088*x2094))+((sj1*x2087))+(((-1.0)*x2089*x2095))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2096=IKcos(j2);
IkReal x2097=IKsin(j2);
IkReal x2098=(cj3*sj4);
IkReal x2099=(r21*sj5);
IkReal x2100=(cj5*sj4);
IkReal x2101=((0.15)*cj5);
IkReal x2102=((1.0)*cj4);
IkReal x2103=(sj4*sj5);
IkReal x2104=((1.0)*sj3);
IkReal x2105=(cj5*sj3);
IkReal x2106=(r01*sj5);
IkReal x2107=(cj1*x2096);
IkReal x2108=(sj1*x2097);
IkReal x2109=(cj3*cj4*sj5);
IkReal x2110=(cj1*x2097);
IkReal x2111=(sj1*x2096);
IkReal x2112=(cj3*cj4*cj5);
IkReal x2113=(x2108+x2107);
evalcond[0]=((((-1.0)*r02*x2102))+x2113+((r00*x2103))+((r01*x2100)));
evalcond[1]=(((r20*x2103))+(((-1.0)*r22*x2102))+((r21*x2100))+x2111+(((-1.0)*x2110)));
evalcond[2]=((((-0.54)*x2111))+(((0.71)*cj1))+(((0.54)*x2110))+(((-1.0)*pz))+(((-1.0)*r20*x2101))+(((0.15)*x2099)));
evalcond[3]=((((-0.54)*x2108))+(((-0.54)*x2107))+(((0.15)*x2106))+(((-1.0)*r00*x2101))+(((-0.71)*sj1))+(((-1.0)*px)));
evalcond[4]=(((r20*x2109))+((r20*x2105))+((r21*x2112))+x2113+((r22*x2098))+(((-1.0)*x2099*x2104)));
evalcond[5]=(((r01*x2112))+x2110+((r00*x2105))+((r00*x2109))+((r02*x2098))+(((-1.0)*x2104*x2106))+(((-1.0)*x2111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2114=((1.0)*cj4);
IkReal x2115=(r20*sj5);
IkReal x2116=((1.0)*sj1*sj4);
IkReal x2117=(cj1*cj5*sj4);
IkReal x2118=(r10*sj4*sj5);
if( IKabs((((cj1*sj4*x2115))+((cj5*r11*sj1*sj4))+((sj1*x2118))+((r21*x2117))+(((-1.0)*cj1*r22*x2114))+(((-1.0)*r12*sj1*x2114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2116))+(((-1.0)*cj1*r12*x2114))+((cj1*x2118))+(((-1.0)*x2115*x2116))+((r11*x2117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*sj4*x2115))+((cj5*r11*sj1*sj4))+((sj1*x2118))+((r21*x2117))+(((-1.0)*cj1*r22*x2114))+(((-1.0)*r12*sj1*x2114))))+IKsqr((((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2116))+(((-1.0)*cj1*r12*x2114))+((cj1*x2118))+(((-1.0)*x2115*x2116))+((r11*x2117))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*sj4*x2115))+((cj5*r11*sj1*sj4))+((sj1*x2118))+((r21*x2117))+(((-1.0)*cj1*r22*x2114))+(((-1.0)*r12*sj1*x2114))), (((cj4*r22*sj1))+(((-1.0)*cj5*r21*x2116))+(((-1.0)*cj1*r12*x2114))+((cj1*x2118))+(((-1.0)*x2115*x2116))+((r11*x2117))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2119=IKsin(j2);
IkReal x2120=IKcos(j2);
IkReal x2121=((0.15)*sj5);
IkReal x2122=((0.15)*cj5);
IkReal x2123=(cj5*sj4);
IkReal x2124=(cj3*cj4);
IkReal x2125=(r20*sj5);
IkReal x2126=(cj3*sj4);
IkReal x2127=(r10*sj5);
IkReal x2128=((1.0)*cj4);
IkReal x2129=(cj5*sj3);
IkReal x2130=(sj1*x2120);
IkReal x2131=(cj1*x2120);
IkReal x2132=((0.54)*x2119);
IkReal x2133=((1.0)*sj3*sj5);
IkReal x2134=(sj1*x2119);
IkReal x2135=((1.0)*cj1*x2119);
evalcond[0]=((((-1.0)*x2135))+(((-1.0)*r22*x2128))+x2130+((r21*x2123))+((sj4*x2125)));
evalcond[1]=(((r11*x2123))+(((-1.0)*r12*x2128))+((sj4*x2127))+(((-1.0)*x2134))+(((-1.0)*x2131)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2130))+((r21*x2121))+(((-1.0)*pz))+((cj1*x2132))+(((-1.0)*r20*x2122)));
evalcond[3]=((((-1.0)*r10*x2122))+((r11*x2121))+(((-1.0)*py))+(((0.54)*x2131))+(((0.71)*sj1))+((sj1*x2132)));
evalcond[4]=(((r20*x2129))+x2134+x2131+(((-1.0)*r21*x2133))+((x2124*x2125))+((r22*x2126))+((cj5*r21*x2124)));
evalcond[5]=(((cj5*r11*x2124))+(((-1.0)*x2135))+((r12*x2126))+(((-1.0)*r11*x2133))+((r10*x2129))+x2130+((x2124*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2136=(cj1*cj4);
IkReal x2137=(r20*sj5);
IkReal x2138=(cj4*sj1);
IkReal x2139=(cj5*r21);
IkReal x2140=(cj1*sj4);
IkReal x2141=(cj5*r11);
IkReal x2142=(r10*sj5);
IkReal x2143=((1.0)*sj1*sj4);
if( IKabs((((r12*x2138))+(((-1.0)*x2142*x2143))+((x2137*x2140))+(((-1.0)*x2141*x2143))+((x2139*x2140))+(((-1.0)*r22*x2136)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2136))+(((-1.0)*x2140*x2141))+(((-1.0)*x2140*x2142))+((r22*x2138))+(((-1.0)*x2139*x2143))+(((-1.0)*x2137*x2143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2138))+(((-1.0)*x2142*x2143))+((x2137*x2140))+(((-1.0)*x2141*x2143))+((x2139*x2140))+(((-1.0)*r22*x2136))))+IKsqr((((r12*x2136))+(((-1.0)*x2140*x2141))+(((-1.0)*x2140*x2142))+((r22*x2138))+(((-1.0)*x2139*x2143))+(((-1.0)*x2137*x2143))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x2138))+(((-1.0)*x2142*x2143))+((x2137*x2140))+(((-1.0)*x2141*x2143))+((x2139*x2140))+(((-1.0)*r22*x2136))), (((r12*x2136))+(((-1.0)*x2140*x2141))+(((-1.0)*x2140*x2142))+((r22*x2138))+(((-1.0)*x2139*x2143))+(((-1.0)*x2137*x2143))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2144=IKcos(j2);
IkReal x2145=IKsin(j2);
IkReal x2146=((0.15)*sj5);
IkReal x2147=((0.15)*cj5);
IkReal x2148=(r10*sj5);
IkReal x2149=(cj5*sj4);
IkReal x2150=(cj3*cj4);
IkReal x2151=(r20*sj5);
IkReal x2152=(cj3*sj4);
IkReal x2153=((1.0)*cj4);
IkReal x2154=(cj5*sj3);
IkReal x2155=(cj1*x2144);
IkReal x2156=(sj1*x2145);
IkReal x2157=(cj1*x2145);
IkReal x2158=(sj1*x2144);
IkReal x2159=((1.0)*sj3*sj5);
IkReal x2160=(x2155+x2156);
evalcond[0]=(((r11*x2149))+x2160+(((-1.0)*r12*x2153))+((sj4*x2148)));
evalcond[1]=(x2158+((sj4*x2151))+((r21*x2149))+(((-1.0)*r22*x2153))+(((-1.0)*x2157)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2158))+(((-1.0)*pz))+(((0.54)*x2157))+((r21*x2146))+(((-1.0)*r20*x2147)));
evalcond[3]=(((r11*x2146))+(((-0.71)*sj1))+(((-0.54)*x2155))+(((-0.54)*x2156))+(((-1.0)*py))+(((-1.0)*r10*x2147)));
evalcond[4]=(((r20*x2154))+x2160+((x2150*x2151))+((cj5*r21*x2150))+((r22*x2152))+(((-1.0)*r21*x2159)));
evalcond[5]=(x2157+(((-1.0)*r11*x2159))+((x2148*x2150))+((r10*x2154))+((cj5*r11*x2150))+((r12*x2152))+(((-1.0)*x2158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2161=(cj5*sj4);
IkReal x2162=((1.0)*sj0);
IkReal x2163=(cj4*r22);
IkReal x2164=(cj1*sj4*sj5);
IkReal x2165=((1.0)*cj4*r12);
IkReal x2166=(sj1*sj4*sj5);
CheckValue<IkReal> x2167 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2165))+((cj1*r21*sj0*x2161))+((r20*sj0*x2164))+((r10*x2166))+((r11*sj1*x2161))+(((-1.0)*cj1*x2162*x2163)))),IkReal(((((-1.0)*r20*x2162*x2166))+((sj0*sj1*x2163))+((cj1*r11*x2161))+((r10*x2164))+(((-1.0)*cj1*x2165))+(((-1.0)*r21*sj1*x2161*x2162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2167.valid){
continue;
}
CheckValue<IkReal> x2168=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2168.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2167.value)+(((1.5707963267949)*(x2168.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2169=IKsin(j2);
IkReal x2170=IKcos(j2);
IkReal x2171=(cj3*sj4);
IkReal x2172=(cj0*sj1);
IkReal x2173=((0.15)*sj5);
IkReal x2174=((0.15)*cj5);
IkReal x2175=(cj5*r01);
IkReal x2176=(cj3*cj4);
IkReal x2177=(cj5*sj4);
IkReal x2178=((1.0)*cj0);
IkReal x2179=(r20*sj5);
IkReal x2180=(sj0*sj1);
IkReal x2181=(r10*sj5);
IkReal x2182=((1.0)*cj4);
IkReal x2183=(cj5*sj3);
IkReal x2184=(r00*sj5);
IkReal x2185=(cj1*x2170);
IkReal x2186=((0.54)*x2169);
IkReal x2187=((1.0)*x2169);
IkReal x2188=((1.0)*sj3*sj5);
IkReal x2189=(sj1*x2170);
IkReal x2190=(sj0*x2187);
evalcond[0]=(((r21*x2177))+x2189+(((-1.0)*r22*x2182))+(((-1.0)*cj1*x2187))+((sj4*x2179)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*r20*x2174))+((r21*x2173))+((cj1*x2186))+(((-1.0)*pz))+(((-0.54)*x2189)));
evalcond[2]=((((-1.0)*x2172*x2187))+(((-1.0)*r02*x2182))+((sj4*x2184))+(((-1.0)*x2178*x2185))+((sj4*x2175)));
evalcond[3]=(((r11*x2177))+(((-1.0)*x2180*x2187))+((sj4*x2181))+(((-1.0)*sj0*x2185))+(((-1.0)*r12*x2182)));
evalcond[4]=(((r01*x2173))+((x2172*x2186))+(((0.71)*x2172))+(((0.54)*cj0*x2185))+(((-1.0)*px))+(((-1.0)*r00*x2174)));
evalcond[5]=(((r11*x2173))+(((0.71)*x2180))+((x2180*x2186))+(((-1.0)*py))+(((0.54)*sj0*x2185))+(((-1.0)*r10*x2174)));
evalcond[6]=(((r22*x2171))+((sj1*x2169))+(((-1.0)*r21*x2188))+x2185+((x2176*x2179))+((r20*x2183))+((cj5*r21*x2176)));
evalcond[7]=(((x2170*x2172))+(((-1.0)*cj1*x2169*x2178))+((x2175*x2176))+((x2176*x2184))+((r02*x2171))+(((-1.0)*r01*x2188))+((r00*x2183)));
evalcond[8]=(((cj5*r11*x2176))+((x2176*x2181))+((x2170*x2180))+(((-1.0)*r11*x2188))+(((-1.0)*cj1*x2190))+((r12*x2171))+((r10*x2183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2191=(sj1*sj4);
IkReal x2192=(cj5*r01);
IkReal x2193=((1.0)*cj0);
IkReal x2194=(r20*sj5);
IkReal x2195=(cj4*r22);
IkReal x2196=(r00*sj5);
IkReal x2197=(cj1*sj4);
IkReal x2198=(cj5*r21);
IkReal x2199=((1.0)*cj4*r02);
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal((((x2191*x2192))+((x2191*x2196))+(((-1.0)*cj1*x2193*x2195))+((cj0*x2194*x2197))+(((-1.0)*sj1*x2199))+((cj0*x2197*x2198)))),IkReal((((x2196*x2197))+((cj0*sj1*x2195))+((x2192*x2197))+(((-1.0)*x2191*x2193*x2198))+(((-1.0)*x2191*x2193*x2194))+(((-1.0)*cj1*x2199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
CheckValue<IkReal> x2201=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2201.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2200.value)+(((1.5707963267949)*(x2201.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2202=IKsin(j2);
IkReal x2203=IKcos(j2);
IkReal x2204=(cj3*sj4);
IkReal x2205=(cj0*sj1);
IkReal x2206=((0.15)*sj5);
IkReal x2207=((0.15)*cj5);
IkReal x2208=(cj5*r01);
IkReal x2209=(cj3*cj4);
IkReal x2210=(cj5*sj4);
IkReal x2211=((1.0)*cj0);
IkReal x2212=(r20*sj5);
IkReal x2213=(sj0*sj1);
IkReal x2214=(r10*sj5);
IkReal x2215=((1.0)*cj4);
IkReal x2216=(cj5*sj3);
IkReal x2217=(r00*sj5);
IkReal x2218=(cj1*x2203);
IkReal x2219=((0.54)*x2202);
IkReal x2220=((1.0)*x2202);
IkReal x2221=((1.0)*sj3*sj5);
IkReal x2222=(sj1*x2203);
IkReal x2223=(sj0*x2220);
evalcond[0]=(x2222+(((-1.0)*r22*x2215))+((sj4*x2212))+((r21*x2210))+(((-1.0)*cj1*x2220)));
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2222))+((cj1*x2219))+(((-1.0)*r20*x2207))+(((-1.0)*pz))+((r21*x2206)));
evalcond[2]=((((-1.0)*x2205*x2220))+((sj4*x2208))+((sj4*x2217))+(((-1.0)*x2211*x2218))+(((-1.0)*r02*x2215)));
evalcond[3]=((((-1.0)*sj0*x2218))+(((-1.0)*r12*x2215))+((r11*x2210))+((sj4*x2214))+(((-1.0)*x2213*x2220)));
evalcond[4]=(((r01*x2206))+((x2205*x2219))+(((-1.0)*px))+(((-1.0)*r00*x2207))+(((0.54)*cj0*x2218))+(((0.71)*x2205)));
evalcond[5]=((((0.54)*sj0*x2218))+(((-1.0)*r10*x2207))+((r11*x2206))+(((-1.0)*py))+(((0.71)*x2213))+((x2213*x2219)));
evalcond[6]=(((cj5*r21*x2209))+(((-1.0)*r21*x2221))+((r20*x2216))+x2218+((sj1*x2202))+((r22*x2204))+((x2209*x2212)));
evalcond[7]=(((r02*x2204))+((r00*x2216))+(((-1.0)*cj1*x2202*x2211))+((x2203*x2205))+(((-1.0)*r01*x2221))+((x2208*x2209))+((x2209*x2217)));
evalcond[8]=(((r12*x2204))+((x2203*x2213))+((cj5*r11*x2209))+(((-1.0)*r11*x2221))+((r10*x2216))+((x2209*x2214))+(((-1.0)*cj1*x2223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2224=(cj0*r21);
IkReal x2225=((1.0)*cj5);
IkReal x2226=((1.0)*cj0);
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2225))+((sj5*x2224)))),IkReal(((((-1.0)*cj4*x2224*x2225))+(((-1.0)*r22*sj4*x2226))+(((-1.0)*cj4*r20*sj5*x2226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((r00*sj4*sj5))+((cj5*r01*sj4)))),-1);
if(!x2228.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2227.value)+(((1.5707963267949)*(x2228.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2229=IKsin(j3);
IkReal x2230=IKcos(j3);
IkReal x2231=(sj4*x2229);
IkReal x2232=(sj5*x2230);
IkReal x2233=(cj4*cj5*x2229);
IkReal x2234=(cj4*sj5*x2229);
IkReal x2235=((1.0)*cj5*x2230);
evalcond[0]=((((-1.0)*r20*x2235))+((r22*x2231))+((r21*x2232))+((r21*x2233))+((r20*x2234)));
evalcond[1]=((((-1.0)*r10*x2235))+cj0+((r10*x2234))+((r11*x2232))+((r11*x2233))+((r12*x2231)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2231))+(((-1.0)*r00*x2235))+((r01*x2233))+((r01*x2232))+((r00*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2236=((0.76056338028169)*sj4);
IkReal x2237=((0.211267605633803)*sj5);
IkReal x2238=((0.76056338028169)*cj4);
IkReal x2239=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r10*sj5*x2236))+((r10*x2239))+(((-1.0)*cj5*r11*x2236))+(((-1.0)*r11*x2237))+(((1.40845070422535)*py))+((r12*x2238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2237))+(((-1.0)*cj5*r21*x2236))+(((-1.0)*r20*sj5*x2236))+((r22*x2238))+((r20*x2239))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj5*x2236))+((r10*x2239))+(((-1.0)*cj5*r11*x2236))+(((-1.0)*r11*x2237))+(((1.40845070422535)*py))+((r12*x2238))))+IKsqr(((((-1.0)*r21*x2237))+(((-1.0)*cj5*r21*x2236))+(((-1.0)*r20*sj5*x2236))+((r22*x2238))+((r20*x2239))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*sj5*x2236))+((r10*x2239))+(((-1.0)*cj5*r11*x2236))+(((-1.0)*r11*x2237))+(((1.40845070422535)*py))+((r12*x2238))), ((((-1.0)*r21*x2237))+(((-1.0)*cj5*r21*x2236))+(((-1.0)*r20*sj5*x2236))+((r22*x2238))+((r20*x2239))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2240=((1.0)*py);
IkReal x2241=((0.54)*sj5);
IkReal x2242=((0.15)*sj5);
IkReal x2243=(cj5*r10);
IkReal x2244=((0.54)*cj5);
IkReal x2245=(cj3*cj4);
IkReal x2246=((0.54)*r12);
IkReal x2247=(cj3*sj4);
IkReal x2248=((0.54)*r22);
IkReal x2249=((0.71)*(IKsin(j1)));
IkReal x2250=(r11*x2242);
IkReal x2251=((0.15)*x2243);
IkReal x2252=(r21*x2242);
IkReal x2253=((0.71)*(IKcos(j1)));
IkReal x2254=((0.15)*cj5*r20);
IkReal x2255=(x2240+x2251);
IkReal x2256=(x2253+x2252);
IkReal x2257=(x2249+x2250);
evalcond[0]=(x2254+(((-1.0)*x2256))+pz+(((-1.0)*r21*sj4*x2244))+((cj4*x2248))+(((-1.0)*r20*sj4*x2241)));
evalcond[1]=((((-1.0)*cj4*x2246))+x2257+((r10*sj4*x2241))+((r11*sj4*x2244))+(((-1.0)*x2255)));
evalcond[2]=(x2257+(((-1.0)*x2247*x2248))+(((-1.0)*r20*sj3*x2244))+(((-1.0)*x2255))+(((-1.0)*r20*x2241*x2245))+((r21*sj3*x2241))+(((-1.0)*r21*x2244*x2245)));
evalcond[3]=(x2256+(((0.54)*sj3*x2243))+((x2246*x2247))+(((-1.0)*x2254))+(((-1.0)*pz))+((r11*x2244*x2245))+((r10*x2241*x2245))+(((-1.0)*r11*sj3*x2241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2258=((1.0)*cj4);
IkReal x2259=(r20*sj5);
IkReal x2260=((1.0)*sj1*sj4);
IkReal x2261=(cj1*cj5*sj4);
IkReal x2262=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x2258))+((sj1*x2262))+((cj1*sj4*x2259))+((cj5*r11*sj1*sj4))+((r21*x2261))+(((-1.0)*cj1*r22*x2258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r12*x2258))+(((-1.0)*cj5*r21*x2260))+((cj1*x2262))+((cj4*r22*sj1))+(((-1.0)*x2259*x2260))+((r11*x2261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x2258))+((sj1*x2262))+((cj1*sj4*x2259))+((cj5*r11*sj1*sj4))+((r21*x2261))+(((-1.0)*cj1*r22*x2258))))+IKsqr(((((-1.0)*cj1*r12*x2258))+(((-1.0)*cj5*r21*x2260))+((cj1*x2262))+((cj4*r22*sj1))+(((-1.0)*x2259*x2260))+((r11*x2261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x2258))+((sj1*x2262))+((cj1*sj4*x2259))+((cj5*r11*sj1*sj4))+((r21*x2261))+(((-1.0)*cj1*r22*x2258))), ((((-1.0)*cj1*r12*x2258))+(((-1.0)*cj5*r21*x2260))+((cj1*x2262))+((cj4*r22*sj1))+(((-1.0)*x2259*x2260))+((r11*x2261))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2263=IKsin(j2);
IkReal x2264=IKcos(j2);
IkReal x2265=((0.15)*sj5);
IkReal x2266=((0.15)*cj5);
IkReal x2267=(cj5*sj4);
IkReal x2268=(cj3*cj4);
IkReal x2269=(r20*sj5);
IkReal x2270=(cj3*sj4);
IkReal x2271=(r10*sj5);
IkReal x2272=((1.0)*cj4);
IkReal x2273=(cj5*sj3);
IkReal x2274=(sj1*x2264);
IkReal x2275=(cj1*x2264);
IkReal x2276=((0.54)*x2263);
IkReal x2277=((1.0)*sj3*sj5);
IkReal x2278=(sj1*x2263);
IkReal x2279=((1.0)*cj1*x2263);
evalcond[0]=(((sj4*x2269))+x2274+((r21*x2267))+(((-1.0)*r22*x2272))+(((-1.0)*x2279)));
evalcond[1]=(((sj4*x2271))+((r11*x2267))+(((-1.0)*r12*x2272))+(((-1.0)*x2278))+(((-1.0)*x2275)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2276))+((r21*x2265))+(((-1.0)*r20*x2266))+(((-0.54)*x2274))+(((-1.0)*pz)));
evalcond[3]=(((sj1*x2276))+(((0.54)*x2275))+((r11*x2265))+(((-1.0)*py))+(((0.71)*sj1))+(((-1.0)*r10*x2266)));
evalcond[4]=(x2275+x2278+((cj5*r21*x2268))+(((-1.0)*r21*x2277))+((r22*x2270))+((x2268*x2269))+((r20*x2273)));
evalcond[5]=(x2274+((cj5*r11*x2268))+((x2268*x2271))+((r10*x2273))+((r12*x2270))+(((-1.0)*x2279))+(((-1.0)*r11*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2280=((0.76056338028169)*sj4);
IkReal x2281=((0.211267605633803)*sj5);
IkReal x2282=((0.76056338028169)*cj4);
IkReal x2283=((0.211267605633803)*cj5);
if( IKabs((((r11*x2281))+(((-1.0)*r12*x2282))+(((-1.0)*r10*x2283))+(((-1.40845070422535)*py))+((r10*sj5*x2280))+((cj5*r11*x2280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x2283))+(((-1.0)*r20*sj5*x2280))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2281))+(((-1.0)*cj5*r21*x2280))+((r22*x2282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2281))+(((-1.0)*r12*x2282))+(((-1.0)*r10*x2283))+(((-1.40845070422535)*py))+((r10*sj5*x2280))+((cj5*r11*x2280))))+IKsqr((((r20*x2283))+(((-1.0)*r20*sj5*x2280))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2281))+(((-1.0)*cj5*r21*x2280))+((r22*x2282))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x2281))+(((-1.0)*r12*x2282))+(((-1.0)*r10*x2283))+(((-1.40845070422535)*py))+((r10*sj5*x2280))+((cj5*r11*x2280))), (((r20*x2283))+(((-1.0)*r20*sj5*x2280))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2281))+(((-1.0)*cj5*r21*x2280))+((r22*x2282))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2284=(r21*sj5);
IkReal x2285=((0.54)*sj3);
IkReal x2286=(cj5*r10);
IkReal x2287=((0.54)*sj4);
IkReal x2288=(cj5*r11);
IkReal x2289=(r20*sj5);
IkReal x2290=(cj5*r20);
IkReal x2291=(cj5*r21);
IkReal x2292=((0.54)*cj4);
IkReal x2293=(r11*sj5);
IkReal x2294=(r10*sj5);
IkReal x2295=((0.15)*x2290);
IkReal x2296=((0.15)*x2284);
IkReal x2297=((0.71)*(IKcos(j1)));
IkReal x2298=((0.15)*x2293);
IkReal x2299=((0.71)*(IKsin(j1)));
IkReal x2300=((0.15)*x2286);
IkReal x2301=(x2295+pz);
IkReal x2302=(x2297+x2296);
IkReal x2303=(x2299+x2300);
evalcond[0]=(x2301+((r22*x2292))+(((-1.0)*x2302))+(((-1.0)*x2287*x2291))+(((-1.0)*x2287*x2289)));
evalcond[1]=(x2303+(((-1.0)*x2287*x2294))+py+(((-1.0)*x2287*x2288))+(((-1.0)*x2298))+((r12*x2292)));
evalcond[2]=(x2301+(((-1.0)*x2285*x2293))+((cj3*r12*x2287))+(((-1.0)*x2302))+((cj3*x2292*x2294))+((cj3*x2288*x2292))+((x2285*x2286)));
evalcond[3]=(x2298+(((-1.0)*x2284*x2285))+(((-1.0)*x2303))+(((-1.0)*py))+((x2285*x2290))+((cj3*r22*x2287))+((cj3*x2291*x2292))+((cj3*x2289*x2292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2304=(cj1*cj4);
IkReal x2305=(r20*sj5);
IkReal x2306=(cj4*sj1);
IkReal x2307=(cj5*r21);
IkReal x2308=(cj1*sj4);
IkReal x2309=(cj5*r11);
IkReal x2310=(r10*sj5);
IkReal x2311=((1.0)*sj1*sj4);
if( IKabs((((r12*x2306))+((x2305*x2308))+(((-1.0)*x2309*x2311))+(((-1.0)*x2310*x2311))+(((-1.0)*r22*x2304))+((x2307*x2308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2304))+(((-1.0)*x2308*x2310))+((r22*x2306))+(((-1.0)*x2308*x2309))+(((-1.0)*x2307*x2311))+(((-1.0)*x2305*x2311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2306))+((x2305*x2308))+(((-1.0)*x2309*x2311))+(((-1.0)*x2310*x2311))+(((-1.0)*r22*x2304))+((x2307*x2308))))+IKsqr((((r12*x2304))+(((-1.0)*x2308*x2310))+((r22*x2306))+(((-1.0)*x2308*x2309))+(((-1.0)*x2307*x2311))+(((-1.0)*x2305*x2311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x2306))+((x2305*x2308))+(((-1.0)*x2309*x2311))+(((-1.0)*x2310*x2311))+(((-1.0)*r22*x2304))+((x2307*x2308))), (((r12*x2304))+(((-1.0)*x2308*x2310))+((r22*x2306))+(((-1.0)*x2308*x2309))+(((-1.0)*x2307*x2311))+(((-1.0)*x2305*x2311))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2312=IKcos(j2);
IkReal x2313=IKsin(j2);
IkReal x2314=((0.15)*sj5);
IkReal x2315=((0.15)*cj5);
IkReal x2316=(r10*sj5);
IkReal x2317=(cj5*sj4);
IkReal x2318=(cj3*cj4);
IkReal x2319=(r20*sj5);
IkReal x2320=(cj3*sj4);
IkReal x2321=((1.0)*cj4);
IkReal x2322=(cj5*sj3);
IkReal x2323=(cj1*x2312);
IkReal x2324=(sj1*x2313);
IkReal x2325=(cj1*x2313);
IkReal x2326=(sj1*x2312);
IkReal x2327=((1.0)*sj3*sj5);
IkReal x2328=(x2323+x2324);
evalcond[0]=(x2328+((r11*x2317))+(((-1.0)*r12*x2321))+((sj4*x2316)));
evalcond[1]=(((r21*x2317))+(((-1.0)*r22*x2321))+x2326+((sj4*x2319))+(((-1.0)*x2325)));
evalcond[2]=((((-1.0)*r20*x2315))+(((0.71)*cj1))+(((-0.54)*x2326))+((r21*x2314))+(((0.54)*x2325))+(((-1.0)*pz)));
evalcond[3]=((((-0.54)*x2323))+(((-0.54)*x2324))+((r11*x2314))+(((-1.0)*r10*x2315))+(((-0.71)*sj1))+(((-1.0)*py)));
evalcond[4]=(x2328+((r22*x2320))+((x2318*x2319))+((cj5*r21*x2318))+((r20*x2322))+(((-1.0)*r21*x2327)));
evalcond[5]=(((r10*x2322))+((cj5*r11*x2318))+((x2316*x2318))+x2325+((r12*x2320))+(((-1.0)*r11*x2327))+(((-1.0)*x2326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2329=((0.76056338028169)*sj4);
IkReal x2330=((0.211267605633803)*sj5);
IkReal x2331=((0.76056338028169)*cj4);
IkReal x2332=((0.211267605633803)*cj5);
if( IKabs((((r02*x2331))+(((-1.0)*r00*sj5*x2329))+(((-1.0)*cj5*r01*x2329))+(((-1.0)*r01*x2330))+((r00*x2332))+(((1.40845070422535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x2329))+((r22*x2331))+(((-1.0)*cj5*r21*x2329))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2330))+((r20*x2332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2331))+(((-1.0)*r00*sj5*x2329))+(((-1.0)*cj5*r01*x2329))+(((-1.0)*r01*x2330))+((r00*x2332))+(((1.40845070422535)*px))))+IKsqr(((((-1.0)*r20*sj5*x2329))+((r22*x2331))+(((-1.0)*cj5*r21*x2329))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2330))+((r20*x2332))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x2331))+(((-1.0)*r00*sj5*x2329))+(((-1.0)*cj5*r01*x2329))+(((-1.0)*r01*x2330))+((r00*x2332))+(((1.40845070422535)*px))), ((((-1.0)*r20*sj5*x2329))+((r22*x2331))+(((-1.0)*cj5*r21*x2329))+(((1.40845070422535)*pz))+(((-1.0)*r21*x2330))+((r20*x2332))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2333=((1.0)*px);
IkReal x2334=((0.54)*sj5);
IkReal x2335=((0.15)*sj5);
IkReal x2336=((0.54)*cj5);
IkReal x2337=(cj3*cj4);
IkReal x2338=((0.15)*cj5);
IkReal x2339=((0.54)*r02);
IkReal x2340=(cj3*sj4);
IkReal x2341=((0.54)*r22);
IkReal x2342=(r01*x2335);
IkReal x2343=((0.71)*(IKsin(j1)));
IkReal x2344=(r00*x2338);
IkReal x2345=(r21*x2335);
IkReal x2346=((0.71)*(IKcos(j1)));
IkReal x2347=(r20*x2338);
IkReal x2348=(x2333+x2344);
IkReal x2349=(x2345+x2346);
IkReal x2350=(x2343+x2342);
evalcond[0]=(x2347+(((-1.0)*r20*sj4*x2334))+pz+(((-1.0)*r21*sj4*x2336))+(((-1.0)*x2349))+((cj4*x2341)));
evalcond[1]=(x2350+((r01*sj4*x2336))+(((-1.0)*cj4*x2339))+(((-1.0)*x2348))+((r00*sj4*x2334)));
evalcond[2]=((((-1.0)*r20*sj3*x2336))+(((-1.0)*x2340*x2341))+x2350+(((-1.0)*r21*x2336*x2337))+((r21*sj3*x2334))+(((-1.0)*r20*x2334*x2337))+(((-1.0)*x2348)));
evalcond[3]=(((r00*sj3*x2336))+x2349+(((-1.0)*r01*sj3*x2334))+(((-1.0)*pz))+((r01*x2336*x2337))+((x2339*x2340))+((r00*x2334*x2337))+(((-1.0)*x2347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2351=((1.0)*cj4);
IkReal x2352=(sj1*sj4);
IkReal x2353=(r20*sj5);
IkReal x2354=(cj5*r01);
IkReal x2355=(cj5*r21);
IkReal x2356=(cj1*sj4);
IkReal x2357=(r00*sj5);
if( IKabs(((((-1.0)*cj1*r22*x2351))+((x2352*x2357))+((x2352*x2354))+((x2353*x2356))+((x2355*x2356))+(((-1.0)*r02*sj1*x2351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2356*x2357))+(((-1.0)*cj1*r02*x2351))+(((-1.0)*x2352*x2355))+(((-1.0)*x2352*x2353))+((x2354*x2356))+((cj4*r22*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r22*x2351))+((x2352*x2357))+((x2352*x2354))+((x2353*x2356))+((x2355*x2356))+(((-1.0)*r02*sj1*x2351))))+IKsqr((((x2356*x2357))+(((-1.0)*cj1*r02*x2351))+(((-1.0)*x2352*x2355))+(((-1.0)*x2352*x2353))+((x2354*x2356))+((cj4*r22*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r22*x2351))+((x2352*x2357))+((x2352*x2354))+((x2353*x2356))+((x2355*x2356))+(((-1.0)*r02*sj1*x2351))), (((x2356*x2357))+(((-1.0)*cj1*r02*x2351))+(((-1.0)*x2352*x2355))+(((-1.0)*x2352*x2353))+((x2354*x2356))+((cj4*r22*sj1))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2358=IKsin(j2);
IkReal x2359=IKcos(j2);
IkReal x2360=(cj3*sj4);
IkReal x2361=(r21*sj5);
IkReal x2362=(cj5*sj4);
IkReal x2363=((0.15)*cj5);
IkReal x2364=((1.0)*cj4);
IkReal x2365=(sj4*sj5);
IkReal x2366=((1.0)*sj3);
IkReal x2367=(cj5*sj3);
IkReal x2368=(r01*sj5);
IkReal x2369=(sj1*x2359);
IkReal x2370=(cj1*x2359);
IkReal x2371=(cj3*cj4*sj5);
IkReal x2372=((0.54)*x2358);
IkReal x2373=(sj1*x2358);
IkReal x2374=(cj3*cj4*cj5);
IkReal x2375=((1.0)*cj1*x2358);
evalcond[0]=(((r20*x2365))+x2369+(((-1.0)*x2375))+(((-1.0)*r22*x2364))+((r21*x2362)));
evalcond[1]=((((-1.0)*x2370))+(((-1.0)*x2373))+((r01*x2362))+((r00*x2365))+(((-1.0)*r02*x2364)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2369))+(((-1.0)*r20*x2363))+(((-1.0)*pz))+((cj1*x2372))+(((0.15)*x2361)));
evalcond[3]=((((0.54)*x2370))+((sj1*x2372))+(((-1.0)*r00*x2363))+(((-1.0)*px))+(((0.71)*sj1))+(((0.15)*x2368)));
evalcond[4]=(((r20*x2367))+((r20*x2371))+x2370+x2373+((r22*x2360))+(((-1.0)*x2361*x2366))+((r21*x2374)));
evalcond[5]=(((r02*x2360))+x2369+(((-1.0)*x2375))+(((-1.0)*x2366*x2368))+((r00*x2371))+((r01*x2374))+((r00*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2376=((0.76056338028169)*sj4);
IkReal x2377=((0.211267605633803)*sj5);
IkReal x2378=((0.76056338028169)*cj4);
IkReal x2379=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r02*x2378))+(((-1.0)*r00*x2379))+((cj5*r01*x2376))+(((-1.40845070422535)*px))+((r00*sj5*x2376))+((r01*x2377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x2379))+(((-1.0)*r21*x2377))+((r22*x2378))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2376))+(((-1.0)*r20*sj5*x2376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2378))+(((-1.0)*r00*x2379))+((cj5*r01*x2376))+(((-1.40845070422535)*px))+((r00*sj5*x2376))+((r01*x2377))))+IKsqr((((r20*x2379))+(((-1.0)*r21*x2377))+((r22*x2378))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2376))+(((-1.0)*r20*sj5*x2376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x2378))+(((-1.0)*r00*x2379))+((cj5*r01*x2376))+(((-1.40845070422535)*px))+((r00*sj5*x2376))+((r01*x2377))), (((r20*x2379))+(((-1.0)*r21*x2377))+((r22*x2378))+(((1.40845070422535)*pz))+(((-1.0)*cj5*r21*x2376))+(((-1.0)*r20*sj5*x2376))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2380=((0.54)*sj5);
IkReal x2381=((0.15)*sj5);
IkReal x2382=((0.54)*cj5);
IkReal x2383=(cj3*cj4);
IkReal x2384=((0.15)*cj5);
IkReal x2385=((0.54)*r02);
IkReal x2386=(cj3*sj4);
IkReal x2387=((0.54)*r22);
IkReal x2388=(r20*x2384);
IkReal x2389=(r21*x2381);
IkReal x2390=((0.71)*(IKcos(j1)));
IkReal x2391=(r01*x2381);
IkReal x2392=((0.71)*(IKsin(j1)));
IkReal x2393=(r00*x2384);
IkReal x2394=(x2388+pz);
IkReal x2395=(x2390+x2389);
IkReal x2396=(x2392+x2393);
evalcond[0]=(x2394+(((-1.0)*x2395))+(((-1.0)*r21*sj4*x2382))+(((-1.0)*r20*sj4*x2380))+((cj4*x2387)));
evalcond[1]=((((-1.0)*r00*sj4*x2380))+x2396+(((-1.0)*r01*sj4*x2382))+(((-1.0)*x2391))+px+((cj4*x2385)));
evalcond[2]=(((x2385*x2386))+x2394+((r00*x2380*x2383))+((r01*x2382*x2383))+((r00*sj3*x2382))+(((-1.0)*x2395))+(((-1.0)*r01*sj3*x2380)));
evalcond[3]=(((r21*x2382*x2383))+x2391+(((-1.0)*px))+((r20*sj3*x2382))+(((-1.0)*r21*sj3*x2380))+(((-1.0)*x2396))+((r20*x2380*x2383))+((x2386*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2397=(cj4*r22);
IkReal x2398=((1.0)*cj1);
IkReal x2399=(r20*sj5);
IkReal x2400=(cj4*r02);
IkReal x2401=(cj5*r21);
IkReal x2402=(cj1*sj4);
IkReal x2403=(cj5*r01);
IkReal x2404=(r00*sj5);
IkReal x2405=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2404*x2405))+(((-1.0)*x2403*x2405))+((x2399*x2402))+((x2401*x2402))+(((-1.0)*x2397*x2398))+((sj1*x2400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2401*x2405))+(((-1.0)*x2399*x2405))+((cj1*x2400))+((sj1*x2397))+(((-1.0)*sj4*x2398*x2404))+(((-1.0)*sj4*x2398*x2403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2404*x2405))+(((-1.0)*x2403*x2405))+((x2399*x2402))+((x2401*x2402))+(((-1.0)*x2397*x2398))+((sj1*x2400))))+IKsqr(((((-1.0)*x2401*x2405))+(((-1.0)*x2399*x2405))+((cj1*x2400))+((sj1*x2397))+(((-1.0)*sj4*x2398*x2404))+(((-1.0)*sj4*x2398*x2403))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2404*x2405))+(((-1.0)*x2403*x2405))+((x2399*x2402))+((x2401*x2402))+(((-1.0)*x2397*x2398))+((sj1*x2400))), ((((-1.0)*x2401*x2405))+(((-1.0)*x2399*x2405))+((cj1*x2400))+((sj1*x2397))+(((-1.0)*sj4*x2398*x2404))+(((-1.0)*sj4*x2398*x2403))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2406=IKcos(j2);
IkReal x2407=IKsin(j2);
IkReal x2408=(cj3*sj4);
IkReal x2409=(r21*sj5);
IkReal x2410=(cj5*sj4);
IkReal x2411=((0.15)*cj5);
IkReal x2412=((1.0)*cj4);
IkReal x2413=(sj4*sj5);
IkReal x2414=((1.0)*sj3);
IkReal x2415=(cj5*sj3);
IkReal x2416=(r01*sj5);
IkReal x2417=(cj1*x2406);
IkReal x2418=(sj1*x2407);
IkReal x2419=(cj3*cj4*sj5);
IkReal x2420=(cj1*x2407);
IkReal x2421=(sj1*x2406);
IkReal x2422=(cj3*cj4*cj5);
IkReal x2423=(x2417+x2418);
evalcond[0]=(x2423+((r01*x2410))+((r00*x2413))+(((-1.0)*r02*x2412)));
evalcond[1]=(x2421+((r21*x2410))+(((-1.0)*x2420))+((r20*x2413))+(((-1.0)*r22*x2412)));
evalcond[2]=((((-1.0)*r20*x2411))+(((0.71)*cj1))+(((0.54)*x2420))+(((-1.0)*pz))+(((0.15)*x2409))+(((-0.54)*x2421)));
evalcond[3]=((((-1.0)*r00*x2411))+(((-0.71)*sj1))+(((-0.54)*x2417))+(((-0.54)*x2418))+(((-1.0)*px))+(((0.15)*x2416)));
evalcond[4]=(x2423+((r21*x2422))+((r22*x2408))+((r20*x2415))+((r20*x2419))+(((-1.0)*x2409*x2414)));
evalcond[5]=(x2420+((r02*x2408))+((r00*x2415))+((r00*x2419))+(((-1.0)*x2414*x2416))+((r01*x2422))+(((-1.0)*x2421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2424=(cj5*sj4);
IkReal x2425=(cj0*r01);
IkReal x2426=((0.54)*cj0);
IkReal x2427=(sj4*sj5);
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(cj0,-2);
if(!x2428.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2428.value)*((((r00*x2426*x2427))+(((-1.0)*cj4*r02*x2426))+(((-0.15)*cj0*cj5*r00))+(((0.15)*sj5*x2425))+(((-1.0)*cj0*px))+(((0.54)*x2424*x2425)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x2424))+(((-0.76056338028169)*r20*x2427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2428.value)*((((r00*x2426*x2427))+(((-1.0)*cj4*r02*x2426))+(((-0.15)*cj0*cj5*r00))+(((0.15)*sj5*x2425))+(((-1.0)*cj0*px))+(((0.54)*x2424*x2425))))))+IKsqr(((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x2424))+(((-0.76056338028169)*r20*x2427))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2428.value)*((((r00*x2426*x2427))+(((-1.0)*cj4*r02*x2426))+(((-0.15)*cj0*cj5*r00))+(((0.15)*sj5*x2425))+(((-1.0)*cj0*px))+(((0.54)*x2424*x2425))))), ((((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))+(((-0.76056338028169)*r21*x2424))+(((-0.76056338028169)*r20*x2427))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2429=IKsin(j1);
IkReal x2430=IKcos(j1);
IkReal x2431=((0.15)*sj5);
IkReal x2432=(r21*sj0);
IkReal x2433=((0.54)*r20);
IkReal x2434=(sj4*sj5);
IkReal x2435=(cj5*sj3);
IkReal x2436=(cj3*cj5);
IkReal x2437=((0.15)*cj5);
IkReal x2438=(r11*sj0);
IkReal x2439=((0.54)*r01);
IkReal x2440=((0.54)*r00);
IkReal x2441=(cj3*sj0);
IkReal x2442=(cj4*sj5);
IkReal x2443=((1.0)*py);
IkReal x2444=(cj0*r21);
IkReal x2445=((0.54)*sj4);
IkReal x2446=((0.54)*r10);
IkReal x2447=(cj0*r11);
IkReal x2448=(cj5*sj4);
IkReal x2449=((1.0)*px);
IkReal x2450=((0.54)*cj4);
IkReal x2451=(cj0*cj3);
IkReal x2452=((1.0)*pz);
IkReal x2453=((0.71)*x2429);
IkReal x2454=(cj0*x2450);
IkReal x2455=((0.54)*sj3*sj5);
IkReal x2456=((0.71)*x2430);
IkReal x2457=(cj0*sj0*x2453);
evalcond[0]=((((-1.0)*x2433*x2434))+((r20*x2437))+((r22*x2450))+pz+(((-1.0)*cj5*r21*x2445))+(((-1.0)*x2456))+(((-1.0)*r21*x2431)));
evalcond[1]=((((-1.0)*sj0*x2443))+((x2431*x2438))+(((-1.0)*r10*sj0*x2437))+((x2453*(sj0*sj0)))+(((-1.0)*r12*sj0*x2450))+((cj5*x2438*x2445))+((sj0*x2434*x2446)));
evalcond[2]=((((-1.0)*cj0*x2449))+(((-1.0)*cj0*r00*x2437))+((cj0*x2434*x2440))+((cj0*r01*x2431))+((cj0*x2439*x2448))+(((-1.0)*r02*x2454))+((x2453*(cj0*cj0))));
evalcond[3]=(((cj3*r12*x2445))+((cj3*x2442*x2446))+(((-1.0)*sj0*x2452))+((sj0*x2456))+((x2431*x2432))+(((-1.0)*r11*x2455))+((r11*x2436*x2450))+(((-1.0)*r20*sj0*x2437))+((x2435*x2446)));
evalcond[4]=(((cj4*x2436*x2439))+((x2431*x2444))+((cj3*x2440*x2442))+(((-1.0)*cj0*x2452))+(((-1.0)*cj0*r20*x2437))+((cj3*r02*x2445))+((cj0*x2456))+(((-1.0)*sj3*sj5*x2439))+((x2435*x2440)));
evalcond[5]=((((-1.0)*x2432*x2436*x2450))+((r11*x2431))+((x2432*x2455))+((sj0*x2453))+(((-1.0)*sj0*x2433*x2435))+(((-1.0)*r22*x2441*x2445))+(((-1.0)*x2443))+(((-1.0)*r10*x2437))+(((-1.0)*x2433*x2441*x2442)));
evalcond[6]=((((-1.0)*cj0*x2433*x2435))+((r01*x2431))+(((-1.0)*r00*x2437))+(((-1.0)*x2433*x2442*x2451))+(((-1.0)*x2436*x2444*x2450))+((x2444*x2455))+((cj0*x2453))+(((-1.0)*x2449))+(((-1.0)*r22*x2445*x2451)));
evalcond[7]=((((-1.0)*r00*sj0*x2437))+x2457+(((-1.0)*sj0*x2449))+((cj0*x2434*x2446))+(((-1.0)*r12*x2454))+((cj5*x2445*x2447))+((r01*sj0*x2431)));
evalcond[8]=(x2457+((x2431*x2447))+(((-1.0)*cj0*r10*x2437))+((sj0*x2439*x2448))+(((-1.0)*cj0*x2443))+((sj0*x2434*x2440))+(((-1.0)*r02*sj0*x2450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2458=((1.0)*cj4);
IkReal x2459=(sj1*sj4);
IkReal x2460=(r20*sj5);
IkReal x2461=(cj5*r01);
IkReal x2462=(cj5*r21);
IkReal x2463=(cj1*sj4);
IkReal x2464=(r00*sj5);
if( IKabs(((((-1.0)*r02*sj1*x2458))+((x2459*x2464))+((x2459*x2461))+((x2460*x2463))+((x2462*x2463))+(((-1.0)*cj1*r22*x2458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r02*x2458))+(((-1.0)*x2459*x2462))+(((-1.0)*x2459*x2460))+((x2461*x2463))+((cj4*r22*sj1))+((x2463*x2464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x2458))+((x2459*x2464))+((x2459*x2461))+((x2460*x2463))+((x2462*x2463))+(((-1.0)*cj1*r22*x2458))))+IKsqr(((((-1.0)*cj1*r02*x2458))+(((-1.0)*x2459*x2462))+(((-1.0)*x2459*x2460))+((x2461*x2463))+((cj4*r22*sj1))+((x2463*x2464))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*sj1*x2458))+((x2459*x2464))+((x2459*x2461))+((x2460*x2463))+((x2462*x2463))+(((-1.0)*cj1*r22*x2458))), ((((-1.0)*cj1*r02*x2458))+(((-1.0)*x2459*x2462))+(((-1.0)*x2459*x2460))+((x2461*x2463))+((cj4*r22*sj1))+((x2463*x2464))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2465=IKsin(j2);
IkReal x2466=IKcos(j2);
IkReal x2467=(cj3*sj4);
IkReal x2468=(r21*sj5);
IkReal x2469=(cj5*sj4);
IkReal x2470=((0.15)*cj5);
IkReal x2471=((1.0)*cj4);
IkReal x2472=(sj4*sj5);
IkReal x2473=((1.0)*sj3);
IkReal x2474=(cj5*sj3);
IkReal x2475=(r01*sj5);
IkReal x2476=(sj1*x2466);
IkReal x2477=(cj1*x2466);
IkReal x2478=(cj3*cj4*sj5);
IkReal x2479=((0.54)*x2465);
IkReal x2480=(sj1*x2465);
IkReal x2481=(cj3*cj4*cj5);
IkReal x2482=((1.0)*cj1*x2465);
evalcond[0]=(x2476+(((-1.0)*x2482))+((r21*x2469))+((r20*x2472))+(((-1.0)*r22*x2471)));
evalcond[1]=(((r01*x2469))+(((-1.0)*x2480))+(((-1.0)*x2477))+((r00*x2472))+(((-1.0)*r02*x2471)));
evalcond[2]=((((0.15)*x2468))+(((0.71)*cj1))+(((-1.0)*r20*x2470))+(((-1.0)*pz))+(((-0.54)*x2476))+((cj1*x2479)));
evalcond[3]=((((0.15)*x2475))+(((-1.0)*r00*x2470))+(((-1.0)*px))+((sj1*x2479))+(((0.54)*x2477))+(((0.71)*sj1)));
evalcond[4]=(x2480+x2477+((r20*x2478))+((r20*x2474))+(((-1.0)*x2468*x2473))+((r22*x2467))+((r21*x2481)));
evalcond[5]=(((r01*x2481))+x2476+(((-1.0)*x2473*x2475))+(((-1.0)*x2482))+((r00*x2478))+((r00*x2474))+((r02*x2467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2483=(cj4*r22);
IkReal x2484=((1.0)*cj1);
IkReal x2485=(r20*sj5);
IkReal x2486=(cj4*r02);
IkReal x2487=(cj5*r21);
IkReal x2488=(cj1*sj4);
IkReal x2489=(cj5*r01);
IkReal x2490=(r00*sj5);
IkReal x2491=((1.0)*sj1*sj4);
if( IKabs((((x2485*x2488))+(((-1.0)*x2490*x2491))+((x2487*x2488))+(((-1.0)*x2489*x2491))+(((-1.0)*x2483*x2484))+((sj1*x2486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x2484*x2489))+((cj1*x2486))+(((-1.0)*sj4*x2484*x2490))+(((-1.0)*x2485*x2491))+(((-1.0)*x2487*x2491))+((sj1*x2483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2485*x2488))+(((-1.0)*x2490*x2491))+((x2487*x2488))+(((-1.0)*x2489*x2491))+(((-1.0)*x2483*x2484))+((sj1*x2486))))+IKsqr(((((-1.0)*sj4*x2484*x2489))+((cj1*x2486))+(((-1.0)*sj4*x2484*x2490))+(((-1.0)*x2485*x2491))+(((-1.0)*x2487*x2491))+((sj1*x2483))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2485*x2488))+(((-1.0)*x2490*x2491))+((x2487*x2488))+(((-1.0)*x2489*x2491))+(((-1.0)*x2483*x2484))+((sj1*x2486))), ((((-1.0)*sj4*x2484*x2489))+((cj1*x2486))+(((-1.0)*sj4*x2484*x2490))+(((-1.0)*x2485*x2491))+(((-1.0)*x2487*x2491))+((sj1*x2483))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2492=IKcos(j2);
IkReal x2493=IKsin(j2);
IkReal x2494=(cj3*sj4);
IkReal x2495=(r21*sj5);
IkReal x2496=(cj5*sj4);
IkReal x2497=((0.15)*cj5);
IkReal x2498=((1.0)*cj4);
IkReal x2499=(sj4*sj5);
IkReal x2500=((1.0)*sj3);
IkReal x2501=(cj5*sj3);
IkReal x2502=(r01*sj5);
IkReal x2503=(cj1*x2492);
IkReal x2504=(sj1*x2493);
IkReal x2505=(cj3*cj4*sj5);
IkReal x2506=(cj1*x2493);
IkReal x2507=(sj1*x2492);
IkReal x2508=(cj3*cj4*cj5);
IkReal x2509=(x2504+x2503);
evalcond[0]=(((r00*x2499))+x2509+(((-1.0)*r02*x2498))+((r01*x2496)));
evalcond[1]=(x2507+(((-1.0)*x2506))+((r21*x2496))+((r20*x2499))+(((-1.0)*r22*x2498)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2507))+(((-1.0)*r20*x2497))+(((-1.0)*pz))+(((0.54)*x2506))+(((0.15)*x2495)));
evalcond[3]=((((0.15)*x2502))+(((-0.54)*x2503))+(((-0.54)*x2504))+(((-1.0)*r00*x2497))+(((-0.71)*sj1))+(((-1.0)*px)));
evalcond[4]=(x2509+((r22*x2494))+(((-1.0)*x2495*x2500))+((r21*x2508))+((r20*x2505))+((r20*x2501)));
evalcond[5]=(x2506+((r02*x2494))+(((-1.0)*x2500*x2502))+(((-1.0)*x2507))+((r00*x2501))+((r00*x2505))+((r01*x2508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2510=((1.0)*cj4);
IkReal x2511=(r20*sj5);
IkReal x2512=((1.0)*sj1*sj4);
IkReal x2513=(cj1*cj5*sj4);
IkReal x2514=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x2510))+((cj5*r11*sj1*sj4))+((cj1*sj4*x2511))+((sj1*x2514))+(((-1.0)*cj1*r22*x2510))+((r21*x2513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2513))+(((-1.0)*cj5*r21*x2512))+((cj4*r22*sj1))+((cj1*x2514))+(((-1.0)*cj1*r12*x2510))+(((-1.0)*x2511*x2512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x2510))+((cj5*r11*sj1*sj4))+((cj1*sj4*x2511))+((sj1*x2514))+(((-1.0)*cj1*r22*x2510))+((r21*x2513))))+IKsqr((((r11*x2513))+(((-1.0)*cj5*r21*x2512))+((cj4*r22*sj1))+((cj1*x2514))+(((-1.0)*cj1*r12*x2510))+(((-1.0)*x2511*x2512))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x2510))+((cj5*r11*sj1*sj4))+((cj1*sj4*x2511))+((sj1*x2514))+(((-1.0)*cj1*r22*x2510))+((r21*x2513))), (((r11*x2513))+(((-1.0)*cj5*r21*x2512))+((cj4*r22*sj1))+((cj1*x2514))+(((-1.0)*cj1*r12*x2510))+(((-1.0)*x2511*x2512))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2515=IKsin(j2);
IkReal x2516=IKcos(j2);
IkReal x2517=((0.15)*sj5);
IkReal x2518=((0.15)*cj5);
IkReal x2519=(cj5*sj4);
IkReal x2520=(cj3*cj4);
IkReal x2521=(r20*sj5);
IkReal x2522=(cj3*sj4);
IkReal x2523=(r10*sj5);
IkReal x2524=((1.0)*cj4);
IkReal x2525=(cj5*sj3);
IkReal x2526=(sj1*x2516);
IkReal x2527=(cj1*x2516);
IkReal x2528=((0.54)*x2515);
IkReal x2529=((1.0)*sj3*sj5);
IkReal x2530=(sj1*x2515);
IkReal x2531=((1.0)*cj1*x2515);
evalcond[0]=(((sj4*x2521))+x2526+(((-1.0)*x2531))+((r21*x2519))+(((-1.0)*r22*x2524)));
evalcond[1]=(((sj4*x2523))+((r11*x2519))+(((-1.0)*r12*x2524))+(((-1.0)*x2527))+(((-1.0)*x2530)));
evalcond[2]=(((cj1*x2528))+(((0.71)*cj1))+(((-1.0)*pz))+((r21*x2517))+(((-0.54)*x2526))+(((-1.0)*r20*x2518)));
evalcond[3]=(((r11*x2517))+(((0.54)*x2527))+(((-1.0)*py))+(((-1.0)*r10*x2518))+((sj1*x2528))+(((0.71)*sj1)));
evalcond[4]=(((r22*x2522))+x2527+x2530+(((-1.0)*r21*x2529))+((r20*x2525))+((x2520*x2521))+((cj5*r21*x2520)));
evalcond[5]=(x2526+((cj5*r11*x2520))+(((-1.0)*r11*x2529))+((r12*x2522))+(((-1.0)*x2531))+((x2520*x2523))+((r10*x2525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2532=(cj1*cj4);
IkReal x2533=(r20*sj5);
IkReal x2534=(cj4*sj1);
IkReal x2535=(cj5*r21);
IkReal x2536=(cj1*sj4);
IkReal x2537=(cj5*r11);
IkReal x2538=(r10*sj5);
IkReal x2539=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2538*x2539))+(((-1.0)*x2537*x2539))+(((-1.0)*r22*x2532))+((x2533*x2536))+((r12*x2534))+((x2535*x2536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2533*x2539))+(((-1.0)*x2535*x2539))+((r22*x2534))+((r12*x2532))+(((-1.0)*x2536*x2538))+(((-1.0)*x2536*x2537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2538*x2539))+(((-1.0)*x2537*x2539))+(((-1.0)*r22*x2532))+((x2533*x2536))+((r12*x2534))+((x2535*x2536))))+IKsqr(((((-1.0)*x2533*x2539))+(((-1.0)*x2535*x2539))+((r22*x2534))+((r12*x2532))+(((-1.0)*x2536*x2538))+(((-1.0)*x2536*x2537))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2538*x2539))+(((-1.0)*x2537*x2539))+(((-1.0)*r22*x2532))+((x2533*x2536))+((r12*x2534))+((x2535*x2536))), ((((-1.0)*x2533*x2539))+(((-1.0)*x2535*x2539))+((r22*x2534))+((r12*x2532))+(((-1.0)*x2536*x2538))+(((-1.0)*x2536*x2537))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2540=IKcos(j2);
IkReal x2541=IKsin(j2);
IkReal x2542=((0.15)*sj5);
IkReal x2543=((0.15)*cj5);
IkReal x2544=(r10*sj5);
IkReal x2545=(cj5*sj4);
IkReal x2546=(cj3*cj4);
IkReal x2547=(r20*sj5);
IkReal x2548=(cj3*sj4);
IkReal x2549=((1.0)*cj4);
IkReal x2550=(cj5*sj3);
IkReal x2551=(cj1*x2540);
IkReal x2552=(sj1*x2541);
IkReal x2553=(cj1*x2541);
IkReal x2554=(sj1*x2540);
IkReal x2555=((1.0)*sj3*sj5);
IkReal x2556=(x2551+x2552);
evalcond[0]=((((-1.0)*r12*x2549))+x2556+((r11*x2545))+((sj4*x2544)));
evalcond[1]=(x2554+((r21*x2545))+(((-1.0)*x2553))+(((-1.0)*r22*x2549))+((sj4*x2547)));
evalcond[2]=((((0.71)*cj1))+((r21*x2542))+(((0.54)*x2553))+(((-1.0)*pz))+(((-0.54)*x2554))+(((-1.0)*r20*x2543)));
evalcond[3]=((((-1.0)*r10*x2543))+((r11*x2542))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.54)*x2551))+(((-0.54)*x2552)));
evalcond[4]=(x2556+(((-1.0)*r21*x2555))+((r20*x2550))+((x2546*x2547))+((cj5*r21*x2546))+((r22*x2548)));
evalcond[5]=(x2553+(((-1.0)*r11*x2555))+((cj5*r11*x2546))+(((-1.0)*x2554))+((r12*x2548))+((r10*x2550))+((x2544*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2557=(cj5*sj4);
IkReal x2558=((1.0)*sj0);
IkReal x2559=(cj4*r22);
IkReal x2560=(cj1*sj4*sj5);
IkReal x2561=((1.0)*cj4*r12);
IkReal x2562=(sj1*sj4*sj5);
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2563.valid){
continue;
}
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x2558*x2559))+((cj1*r21*sj0*x2557))+((r10*x2562))+((r11*sj1*x2557))+(((-1.0)*sj1*x2561))+((r20*sj0*x2560)))),IkReal(((((-1.0)*cj1*x2561))+(((-1.0)*r20*x2558*x2562))+((cj1*r11*x2557))+(((-1.0)*r21*sj1*x2557*x2558))+((r10*x2560))+((sj0*sj1*x2559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2563.value)))+(x2564.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2565=IKsin(j2);
IkReal x2566=IKcos(j2);
IkReal x2567=(cj3*sj4);
IkReal x2568=(cj0*sj1);
IkReal x2569=((0.15)*sj5);
IkReal x2570=((0.15)*cj5);
IkReal x2571=(cj5*r01);
IkReal x2572=(cj3*cj4);
IkReal x2573=(cj5*sj4);
IkReal x2574=((1.0)*cj0);
IkReal x2575=(r20*sj5);
IkReal x2576=(sj0*sj1);
IkReal x2577=(r10*sj5);
IkReal x2578=((1.0)*cj4);
IkReal x2579=(cj5*sj3);
IkReal x2580=(r00*sj5);
IkReal x2581=(cj1*x2566);
IkReal x2582=((0.54)*x2565);
IkReal x2583=((1.0)*x2565);
IkReal x2584=((1.0)*sj3*sj5);
IkReal x2585=(sj1*x2566);
IkReal x2586=(sj0*x2583);
evalcond[0]=(((r21*x2573))+x2585+(((-1.0)*cj1*x2583))+(((-1.0)*r22*x2578))+((sj4*x2575)));
evalcond[1]=((((0.71)*cj1))+((cj1*x2582))+(((-0.54)*x2585))+(((-1.0)*pz))+(((-1.0)*r20*x2570))+((r21*x2569)));
evalcond[2]=(((sj4*x2580))+(((-1.0)*r02*x2578))+((sj4*x2571))+(((-1.0)*x2574*x2581))+(((-1.0)*x2568*x2583)));
evalcond[3]=((((-1.0)*r12*x2578))+((r11*x2573))+(((-1.0)*sj0*x2581))+(((-1.0)*x2576*x2583))+((sj4*x2577)));
evalcond[4]=(((r01*x2569))+(((0.71)*x2568))+(((0.54)*cj0*x2581))+(((-1.0)*px))+(((-1.0)*r00*x2570))+((x2568*x2582)));
evalcond[5]=((((-1.0)*r10*x2570))+(((0.54)*sj0*x2581))+(((-1.0)*py))+(((0.71)*x2576))+((r11*x2569))+((x2576*x2582)));
evalcond[6]=(((r22*x2567))+x2581+(((-1.0)*r21*x2584))+((r20*x2579))+((x2572*x2575))+((sj1*x2565))+((cj5*r21*x2572)));
evalcond[7]=(((x2571*x2572))+(((-1.0)*r01*x2584))+((x2572*x2580))+(((-1.0)*cj1*x2565*x2574))+((x2566*x2568))+((r00*x2579))+((r02*x2567)));
evalcond[8]=(((r10*x2579))+(((-1.0)*cj1*x2586))+((cj5*r11*x2572))+((x2572*x2577))+((r12*x2567))+((x2566*x2576))+(((-1.0)*r11*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2587=(sj1*sj4);
IkReal x2588=(cj5*r01);
IkReal x2589=((1.0)*cj0);
IkReal x2590=(r20*sj5);
IkReal x2591=(cj4*r22);
IkReal x2592=(r00*sj5);
IkReal x2593=(cj1*sj4);
IkReal x2594=(cj5*r21);
IkReal x2595=((1.0)*cj4*r02);
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal((((cj0*x2590*x2593))+((cj0*x2593*x2594))+(((-1.0)*cj1*x2589*x2591))+(((-1.0)*sj1*x2595))+((x2587*x2588))+((x2587*x2592)))),IkReal(((((-1.0)*cj1*x2595))+((cj0*sj1*x2591))+((x2592*x2593))+(((-1.0)*x2587*x2589*x2594))+(((-1.0)*x2587*x2589*x2590))+((x2588*x2593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
CheckValue<IkReal> x2597=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2597.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2596.value)+(((1.5707963267949)*(x2597.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2598=IKsin(j2);
IkReal x2599=IKcos(j2);
IkReal x2600=(cj3*sj4);
IkReal x2601=(cj0*sj1);
IkReal x2602=((0.15)*sj5);
IkReal x2603=((0.15)*cj5);
IkReal x2604=(cj5*r01);
IkReal x2605=(cj3*cj4);
IkReal x2606=(cj5*sj4);
IkReal x2607=((1.0)*cj0);
IkReal x2608=(r20*sj5);
IkReal x2609=(sj0*sj1);
IkReal x2610=(r10*sj5);
IkReal x2611=((1.0)*cj4);
IkReal x2612=(cj5*sj3);
IkReal x2613=(r00*sj5);
IkReal x2614=(cj1*x2599);
IkReal x2615=((0.54)*x2598);
IkReal x2616=((1.0)*x2598);
IkReal x2617=((1.0)*sj3*sj5);
IkReal x2618=(sj1*x2599);
IkReal x2619=(sj0*x2616);
evalcond[0]=((((-1.0)*r22*x2611))+((sj4*x2608))+(((-1.0)*cj1*x2616))+((r21*x2606))+x2618);
evalcond[1]=((((0.71)*cj1))+(((-1.0)*pz))+((cj1*x2615))+((r21*x2602))+(((-0.54)*x2618))+(((-1.0)*r20*x2603)));
evalcond[2]=((((-1.0)*x2607*x2614))+((sj4*x2613))+((sj4*x2604))+(((-1.0)*r02*x2611))+(((-1.0)*x2601*x2616)));
evalcond[3]=((((-1.0)*x2609*x2616))+(((-1.0)*r12*x2611))+((sj4*x2610))+((r11*x2606))+(((-1.0)*sj0*x2614)));
evalcond[4]=(((x2601*x2615))+(((0.71)*x2601))+(((-1.0)*px))+(((0.54)*cj0*x2614))+((r01*x2602))+(((-1.0)*r00*x2603)));
evalcond[5]=((((0.54)*sj0*x2614))+(((-1.0)*r10*x2603))+(((0.71)*x2609))+(((-1.0)*py))+((x2609*x2615))+((r11*x2602)));
evalcond[6]=((((-1.0)*r21*x2617))+((cj5*r21*x2605))+((r20*x2612))+((x2605*x2608))+((sj1*x2598))+((r22*x2600))+x2614);
evalcond[7]=(((r00*x2612))+(((-1.0)*cj1*x2598*x2607))+(((-1.0)*r01*x2617))+((x2605*x2613))+((r02*x2600))+((x2599*x2601))+((x2604*x2605)));
evalcond[8]=((((-1.0)*r11*x2617))+((cj5*r11*x2605))+((x2605*x2610))+((r12*x2600))+(((-1.0)*cj1*x2619))+((r10*x2612))+((x2599*x2609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2620=(cj5*sj4);
IkReal x2621=((0.54)*sj0);
IkReal x2622=(sj4*sj5);
IkReal x2623=((0.15)*sj0);
CheckValue<IkReal> x2624=IKPowWithIntegerCheck(sj0,-2);
if(!x2624.valid){
continue;
}
if( IKabs(((-1.40845070422535)*(x2624.value)*((((r11*x2620*x2621))+(((-1.0)*cj5*r10*x2623))+((r10*x2621*x2622))+((r11*sj5*x2623))+(((-1.0)*cj4*r12*x2621))+(((-1.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.76056338028169)*r21*x2620))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x2622))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.40845070422535)*(x2624.value)*((((r11*x2620*x2621))+(((-1.0)*cj5*r10*x2623))+((r10*x2621*x2622))+((r11*sj5*x2623))+(((-1.0)*cj4*r12*x2621))+(((-1.0)*py*sj0))))))+IKsqr(((((-0.76056338028169)*r21*x2620))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x2622))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.40845070422535)*(x2624.value)*((((r11*x2620*x2621))+(((-1.0)*cj5*r10*x2623))+((r10*x2621*x2622))+((r11*sj5*x2623))+(((-1.0)*cj4*r12*x2621))+(((-1.0)*py*sj0))))), ((((-0.76056338028169)*r21*x2620))+(((-0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((-0.76056338028169)*r20*x2622))+(((0.76056338028169)*cj4*r22))+(((0.211267605633803)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2625=IKsin(j1);
IkReal x2626=IKcos(j1);
IkReal x2627=((0.15)*sj5);
IkReal x2628=(r21*sj0);
IkReal x2629=((0.54)*r20);
IkReal x2630=(sj4*sj5);
IkReal x2631=(cj5*sj3);
IkReal x2632=(cj3*cj5);
IkReal x2633=((0.15)*cj5);
IkReal x2634=(r11*sj0);
IkReal x2635=((0.54)*r01);
IkReal x2636=((0.54)*r00);
IkReal x2637=(cj3*sj0);
IkReal x2638=(cj4*sj5);
IkReal x2639=((1.0)*py);
IkReal x2640=(cj0*r21);
IkReal x2641=((0.54)*sj4);
IkReal x2642=((0.54)*r10);
IkReal x2643=(cj0*r11);
IkReal x2644=(cj5*sj4);
IkReal x2645=((1.0)*px);
IkReal x2646=((0.54)*cj4);
IkReal x2647=(cj0*cj3);
IkReal x2648=((1.0)*pz);
IkReal x2649=((0.71)*x2625);
IkReal x2650=(cj0*x2646);
IkReal x2651=((0.54)*sj3*sj5);
IkReal x2652=((0.71)*x2626);
IkReal x2653=(cj0*sj0*x2649);
evalcond[0]=((((-1.0)*cj5*r21*x2641))+((r22*x2646))+pz+(((-1.0)*x2629*x2630))+((r20*x2633))+(((-1.0)*x2652))+(((-1.0)*r21*x2627)));
evalcond[1]=((((-1.0)*r12*sj0*x2646))+((x2649*(sj0*sj0)))+(((-1.0)*r10*sj0*x2633))+((cj5*x2634*x2641))+(((-1.0)*sj0*x2639))+((sj0*x2630*x2642))+((x2627*x2634)));
evalcond[2]=(((cj0*r01*x2627))+(((-1.0)*r02*x2650))+(((-1.0)*cj0*r00*x2633))+((cj0*x2635*x2644))+((cj0*x2630*x2636))+((x2649*(cj0*cj0)))+(((-1.0)*cj0*x2645)));
evalcond[3]=((((-1.0)*sj0*x2648))+((sj0*x2652))+(((-1.0)*r11*x2651))+((x2627*x2628))+((cj3*r12*x2641))+((r11*x2632*x2646))+((x2631*x2642))+(((-1.0)*r20*sj0*x2633))+((cj3*x2638*x2642)));
evalcond[4]=((((-1.0)*sj3*sj5*x2635))+((cj0*x2652))+(((-1.0)*cj0*r20*x2633))+((cj4*x2632*x2635))+((x2627*x2640))+((x2631*x2636))+((cj3*r02*x2641))+(((-1.0)*cj0*x2648))+((cj3*x2636*x2638)));
evalcond[5]=(((sj0*x2649))+(((-1.0)*r10*x2633))+(((-1.0)*sj0*x2629*x2631))+(((-1.0)*r22*x2637*x2641))+((x2628*x2651))+(((-1.0)*x2639))+((r11*x2627))+(((-1.0)*x2628*x2632*x2646))+(((-1.0)*x2629*x2637*x2638)));
evalcond[6]=(((r01*x2627))+(((-1.0)*r22*x2641*x2647))+(((-1.0)*cj0*x2629*x2631))+(((-1.0)*r00*x2633))+((cj0*x2649))+(((-1.0)*x2629*x2638*x2647))+(((-1.0)*x2645))+((x2640*x2651))+(((-1.0)*x2632*x2640*x2646)));
evalcond[7]=((((-1.0)*sj0*x2645))+(((-1.0)*r00*sj0*x2633))+(((-1.0)*r12*x2650))+((cj5*x2641*x2643))+((r01*sj0*x2627))+((cj0*x2630*x2642))+x2653);
evalcond[8]=(((sj0*x2630*x2636))+(((-1.0)*cj0*r10*x2633))+((sj0*x2635*x2644))+(((-1.0)*cj0*x2639))+((x2627*x2643))+(((-1.0)*r02*sj0*x2646))+x2653);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2654=((1.0)*cj4);
IkReal x2655=(sj1*sj4);
IkReal x2656=(r20*sj5);
IkReal x2657=(cj5*r01);
IkReal x2658=(cj5*r21);
IkReal x2659=(cj1*sj4);
IkReal x2660=(r00*sj5);
if( IKabs((((x2658*x2659))+((x2656*x2659))+((x2655*x2657))+((x2655*x2660))+(((-1.0)*r02*sj1*x2654))+(((-1.0)*cj1*r22*x2654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2655*x2658))+(((-1.0)*x2655*x2656))+((x2659*x2660))+((x2657*x2659))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2658*x2659))+((x2656*x2659))+((x2655*x2657))+((x2655*x2660))+(((-1.0)*r02*sj1*x2654))+(((-1.0)*cj1*r22*x2654))))+IKsqr(((((-1.0)*x2655*x2658))+(((-1.0)*x2655*x2656))+((x2659*x2660))+((x2657*x2659))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2654))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2658*x2659))+((x2656*x2659))+((x2655*x2657))+((x2655*x2660))+(((-1.0)*r02*sj1*x2654))+(((-1.0)*cj1*r22*x2654))), ((((-1.0)*x2655*x2658))+(((-1.0)*x2655*x2656))+((x2659*x2660))+((x2657*x2659))+((cj4*r22*sj1))+(((-1.0)*cj1*r02*x2654))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2661=IKsin(j2);
IkReal x2662=IKcos(j2);
IkReal x2663=(cj3*sj4);
IkReal x2664=(r21*sj5);
IkReal x2665=(cj5*sj4);
IkReal x2666=((0.15)*cj5);
IkReal x2667=((1.0)*cj4);
IkReal x2668=(sj4*sj5);
IkReal x2669=((1.0)*sj3);
IkReal x2670=(cj5*sj3);
IkReal x2671=(r01*sj5);
IkReal x2672=(sj1*x2662);
IkReal x2673=(cj1*x2662);
IkReal x2674=(cj3*cj4*sj5);
IkReal x2675=((0.54)*x2661);
IkReal x2676=(sj1*x2661);
IkReal x2677=(cj3*cj4*cj5);
IkReal x2678=((1.0)*cj1*x2661);
evalcond[0]=(((r21*x2665))+(((-1.0)*x2678))+(((-1.0)*r22*x2667))+((r20*x2668))+x2672);
evalcond[1]=((((-1.0)*x2676))+(((-1.0)*x2673))+(((-1.0)*r02*x2667))+((r00*x2668))+((r01*x2665)));
evalcond[2]=((((0.71)*cj1))+((cj1*x2675))+(((-0.54)*x2672))+(((-1.0)*pz))+(((-1.0)*r20*x2666))+(((0.15)*x2664)));
evalcond[3]=(((sj1*x2675))+(((-1.0)*r00*x2666))+(((0.54)*x2673))+(((-1.0)*px))+(((0.71)*sj1))+(((0.15)*x2671)));
evalcond[4]=(((r21*x2677))+((r22*x2663))+(((-1.0)*x2664*x2669))+((r20*x2674))+((r20*x2670))+x2673+x2676);
evalcond[5]=(((r02*x2663))+(((-1.0)*x2678))+((r00*x2674))+((r00*x2670))+(((-1.0)*x2669*x2671))+((r01*x2677))+x2672);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2679=(cj4*r22);
IkReal x2680=((1.0)*cj1);
IkReal x2681=(r20*sj5);
IkReal x2682=(cj4*r02);
IkReal x2683=(cj5*r21);
IkReal x2684=(cj1*sj4);
IkReal x2685=(cj5*r01);
IkReal x2686=(r00*sj5);
IkReal x2687=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2685*x2687))+((sj1*x2682))+(((-1.0)*x2679*x2680))+((x2683*x2684))+(((-1.0)*x2686*x2687))+((x2681*x2684)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2679))+(((-1.0)*x2683*x2687))+(((-1.0)*x2681*x2687))+((cj1*x2682))+(((-1.0)*sj4*x2680*x2685))+(((-1.0)*sj4*x2680*x2686)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2685*x2687))+((sj1*x2682))+(((-1.0)*x2679*x2680))+((x2683*x2684))+(((-1.0)*x2686*x2687))+((x2681*x2684))))+IKsqr((((sj1*x2679))+(((-1.0)*x2683*x2687))+(((-1.0)*x2681*x2687))+((cj1*x2682))+(((-1.0)*sj4*x2680*x2685))+(((-1.0)*sj4*x2680*x2686))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2685*x2687))+((sj1*x2682))+(((-1.0)*x2679*x2680))+((x2683*x2684))+(((-1.0)*x2686*x2687))+((x2681*x2684))), (((sj1*x2679))+(((-1.0)*x2683*x2687))+(((-1.0)*x2681*x2687))+((cj1*x2682))+(((-1.0)*sj4*x2680*x2685))+(((-1.0)*sj4*x2680*x2686))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2688=IKcos(j2);
IkReal x2689=IKsin(j2);
IkReal x2690=(cj3*sj4);
IkReal x2691=(r21*sj5);
IkReal x2692=(cj5*sj4);
IkReal x2693=((0.15)*cj5);
IkReal x2694=((1.0)*cj4);
IkReal x2695=(sj4*sj5);
IkReal x2696=((1.0)*sj3);
IkReal x2697=(cj5*sj3);
IkReal x2698=(r01*sj5);
IkReal x2699=(cj1*x2688);
IkReal x2700=(sj1*x2689);
IkReal x2701=(cj3*cj4*sj5);
IkReal x2702=(cj1*x2689);
IkReal x2703=(sj1*x2688);
IkReal x2704=(cj3*cj4*cj5);
IkReal x2705=(x2700+x2699);
evalcond[0]=(x2705+(((-1.0)*r02*x2694))+((r00*x2695))+((r01*x2692)));
evalcond[1]=(x2703+(((-1.0)*r22*x2694))+((r21*x2692))+((r20*x2695))+(((-1.0)*x2702)));
evalcond[2]=((((0.71)*cj1))+(((0.54)*x2702))+(((-1.0)*pz))+(((-0.54)*x2703))+(((0.15)*x2691))+(((-1.0)*r20*x2693)));
evalcond[3]=((((-0.71)*sj1))+(((-0.54)*x2699))+(((-1.0)*px))+(((-1.0)*r00*x2693))+(((-0.54)*x2700))+(((0.15)*x2698)));
evalcond[4]=(x2705+(((-1.0)*x2691*x2696))+((r22*x2690))+((r20*x2701))+((r21*x2704))+((r20*x2697)));
evalcond[5]=(x2702+((r00*x2701))+(((-1.0)*x2696*x2698))+((r01*x2704))+((r00*x2697))+((r02*x2690))+(((-1.0)*x2703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2706=((1.0)*cj4);
IkReal x2707=(r20*sj5);
IkReal x2708=((1.0)*sj1*sj4);
IkReal x2709=(cj1*cj5*sj4);
IkReal x2710=(r10*sj4*sj5);
if( IKabs(((((-1.0)*r12*sj1*x2706))+((cj5*r11*sj1*sj4))+((sj1*x2710))+((r21*x2709))+((cj1*sj4*x2707))+(((-1.0)*cj1*r22*x2706)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x2708))+((r11*x2709))+(((-1.0)*cj1*r12*x2706))+((cj4*r22*sj1))+(((-1.0)*x2707*x2708))+((cj1*x2710)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj1*x2706))+((cj5*r11*sj1*sj4))+((sj1*x2710))+((r21*x2709))+((cj1*sj4*x2707))+(((-1.0)*cj1*r22*x2706))))+IKsqr(((((-1.0)*cj5*r21*x2708))+((r11*x2709))+(((-1.0)*cj1*r12*x2706))+((cj4*r22*sj1))+(((-1.0)*x2707*x2708))+((cj1*x2710))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*sj1*x2706))+((cj5*r11*sj1*sj4))+((sj1*x2710))+((r21*x2709))+((cj1*sj4*x2707))+(((-1.0)*cj1*r22*x2706))), ((((-1.0)*cj5*r21*x2708))+((r11*x2709))+(((-1.0)*cj1*r12*x2706))+((cj4*r22*sj1))+(((-1.0)*x2707*x2708))+((cj1*x2710))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2711=IKsin(j2);
IkReal x2712=IKcos(j2);
IkReal x2713=((0.15)*sj5);
IkReal x2714=((0.15)*cj5);
IkReal x2715=(cj5*sj4);
IkReal x2716=(cj3*cj4);
IkReal x2717=(r20*sj5);
IkReal x2718=(cj3*sj4);
IkReal x2719=(r10*sj5);
IkReal x2720=((1.0)*cj4);
IkReal x2721=(cj5*sj3);
IkReal x2722=(sj1*x2712);
IkReal x2723=(cj1*x2712);
IkReal x2724=((0.54)*x2711);
IkReal x2725=((1.0)*sj3*sj5);
IkReal x2726=(sj1*x2711);
IkReal x2727=((1.0)*cj1*x2711);
evalcond[0]=(x2722+(((-1.0)*r22*x2720))+(((-1.0)*x2727))+((sj4*x2717))+((r21*x2715)));
evalcond[1]=((((-1.0)*x2723))+(((-1.0)*x2726))+(((-1.0)*r12*x2720))+((r11*x2715))+((sj4*x2719)));
evalcond[2]=((((-0.54)*x2722))+(((0.71)*cj1))+(((-1.0)*r20*x2714))+((cj1*x2724))+(((-1.0)*pz))+((r21*x2713)));
evalcond[3]=((((-1.0)*r10*x2714))+(((-1.0)*py))+(((0.71)*sj1))+(((0.54)*x2723))+((r11*x2713))+((sj1*x2724)));
evalcond[4]=(x2726+x2723+(((-1.0)*r21*x2725))+((x2716*x2717))+((r22*x2718))+((r20*x2721))+((cj5*r21*x2716)));
evalcond[5]=(((r12*x2718))+x2722+((x2716*x2719))+(((-1.0)*r11*x2725))+((cj5*r11*x2716))+(((-1.0)*x2727))+((r10*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2728=(cj1*cj4);
IkReal x2729=(r20*sj5);
IkReal x2730=(cj4*sj1);
IkReal x2731=(cj5*r21);
IkReal x2732=(cj1*sj4);
IkReal x2733=(cj5*r11);
IkReal x2734=(r10*sj5);
IkReal x2735=((1.0)*sj1*sj4);
if( IKabs(((((-1.0)*x2733*x2735))+(((-1.0)*x2734*x2735))+((x2731*x2732))+((r12*x2730))+(((-1.0)*r22*x2728))+((x2729*x2732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2731*x2735))+((r22*x2730))+(((-1.0)*x2732*x2733))+(((-1.0)*x2732*x2734))+((r12*x2728))+(((-1.0)*x2729*x2735)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2733*x2735))+(((-1.0)*x2734*x2735))+((x2731*x2732))+((r12*x2730))+(((-1.0)*r22*x2728))+((x2729*x2732))))+IKsqr(((((-1.0)*x2731*x2735))+((r22*x2730))+(((-1.0)*x2732*x2733))+(((-1.0)*x2732*x2734))+((r12*x2728))+(((-1.0)*x2729*x2735))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2733*x2735))+(((-1.0)*x2734*x2735))+((x2731*x2732))+((r12*x2730))+(((-1.0)*r22*x2728))+((x2729*x2732))), ((((-1.0)*x2731*x2735))+((r22*x2730))+(((-1.0)*x2732*x2733))+(((-1.0)*x2732*x2734))+((r12*x2728))+(((-1.0)*x2729*x2735))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2736=IKcos(j2);
IkReal x2737=IKsin(j2);
IkReal x2738=((0.15)*sj5);
IkReal x2739=((0.15)*cj5);
IkReal x2740=(r10*sj5);
IkReal x2741=(cj5*sj4);
IkReal x2742=(cj3*cj4);
IkReal x2743=(r20*sj5);
IkReal x2744=(cj3*sj4);
IkReal x2745=((1.0)*cj4);
IkReal x2746=(cj5*sj3);
IkReal x2747=(cj1*x2736);
IkReal x2748=(sj1*x2737);
IkReal x2749=(cj1*x2737);
IkReal x2750=(sj1*x2736);
IkReal x2751=((1.0)*sj3*sj5);
IkReal x2752=(x2747+x2748);
evalcond[0]=(x2752+((r11*x2741))+((sj4*x2740))+(((-1.0)*r12*x2745)));
evalcond[1]=(x2750+((r21*x2741))+((sj4*x2743))+(((-1.0)*x2749))+(((-1.0)*r22*x2745)));
evalcond[2]=((((0.71)*cj1))+(((-0.54)*x2750))+((r21*x2738))+(((-1.0)*pz))+(((0.54)*x2749))+(((-1.0)*r20*x2739)));
evalcond[3]=((((-0.54)*x2747))+(((-0.54)*x2748))+(((-0.71)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x2739))+((r11*x2738)));
evalcond[4]=(x2752+((r22*x2744))+((x2742*x2743))+((cj5*r21*x2742))+((r20*x2746))+(((-1.0)*r21*x2751)));
evalcond[5]=(x2749+((r12*x2744))+((cj5*r11*x2742))+((r10*x2746))+(((-1.0)*r11*x2751))+((x2740*x2742))+(((-1.0)*x2750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2753=(cj5*sj4);
IkReal x2754=((1.0)*sj0);
IkReal x2755=(cj4*r22);
IkReal x2756=(cj1*sj4*sj5);
IkReal x2757=((1.0)*cj4*r12);
IkReal x2758=(sj1*sj4*sj5);
CheckValue<IkReal> x2759=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2759.valid){
continue;
}
CheckValue<IkReal> x2760 = IKatan2WithCheck(IkReal((((r20*sj0*x2756))+((r10*x2758))+((r11*sj1*x2753))+(((-1.0)*sj1*x2757))+(((-1.0)*cj1*x2754*x2755))+((cj1*r21*sj0*x2753)))),IkReal((((sj0*sj1*x2755))+((cj1*r11*x2753))+((r10*x2756))+(((-1.0)*r21*sj1*x2753*x2754))+(((-1.0)*r20*x2754*x2758))+(((-1.0)*cj1*x2757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2760.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2759.value)))+(x2760.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2761=IKsin(j2);
IkReal x2762=IKcos(j2);
IkReal x2763=(cj3*sj4);
IkReal x2764=(cj0*sj1);
IkReal x2765=((0.15)*sj5);
IkReal x2766=((0.15)*cj5);
IkReal x2767=(cj5*r01);
IkReal x2768=(cj3*cj4);
IkReal x2769=(cj5*sj4);
IkReal x2770=((1.0)*cj0);
IkReal x2771=(r20*sj5);
IkReal x2772=(sj0*sj1);
IkReal x2773=(r10*sj5);
IkReal x2774=((1.0)*cj4);
IkReal x2775=(cj5*sj3);
IkReal x2776=(r00*sj5);
IkReal x2777=(cj1*x2762);
IkReal x2778=((0.54)*x2761);
IkReal x2779=((1.0)*x2761);
IkReal x2780=((1.0)*sj3*sj5);
IkReal x2781=(sj1*x2762);
IkReal x2782=(sj0*x2779);
evalcond[0]=(x2781+((sj4*x2771))+(((-1.0)*cj1*x2779))+((r21*x2769))+(((-1.0)*r22*x2774)));
evalcond[1]=((((0.71)*cj1))+(((-0.54)*x2781))+(((-1.0)*pz))+(((-1.0)*r20*x2766))+((r21*x2765))+((cj1*x2778)));
evalcond[2]=(((sj4*x2767))+(((-1.0)*r02*x2774))+(((-1.0)*x2770*x2777))+((sj4*x2776))+(((-1.0)*x2764*x2779)));
evalcond[3]=((((-1.0)*r12*x2774))+((sj4*x2773))+(((-1.0)*x2772*x2779))+(((-1.0)*sj0*x2777))+((r11*x2769)));
evalcond[4]=((((0.71)*x2764))+(((-1.0)*r00*x2766))+((r01*x2765))+(((0.54)*cj0*x2777))+(((-1.0)*px))+((x2764*x2778)));
evalcond[5]=((((-1.0)*r10*x2766))+(((-1.0)*py))+(((0.54)*sj0*x2777))+(((0.71)*x2772))+((x2772*x2778))+((r11*x2765)));
evalcond[6]=(x2777+((cj5*r21*x2768))+((sj1*x2761))+(((-1.0)*r21*x2780))+((x2768*x2771))+((r20*x2775))+((r22*x2763)));
evalcond[7]=((((-1.0)*cj1*x2761*x2770))+((r00*x2775))+((x2768*x2776))+((x2762*x2764))+((x2767*x2768))+((r02*x2763))+(((-1.0)*r01*x2780)));
evalcond[8]=((((-1.0)*cj1*x2782))+((r12*x2763))+((x2762*x2772))+((x2768*x2773))+((r10*x2775))+((cj5*r11*x2768))+(((-1.0)*r11*x2780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2783=(sj1*sj4);
IkReal x2784=(cj5*r01);
IkReal x2785=((1.0)*cj0);
IkReal x2786=(r20*sj5);
IkReal x2787=(cj4*r22);
IkReal x2788=(r00*sj5);
IkReal x2789=(cj1*sj4);
IkReal x2790=(cj5*r21);
IkReal x2791=((1.0)*cj4*r02);
CheckValue<IkReal> x2792 = IKatan2WithCheck(IkReal((((cj0*x2786*x2789))+(((-1.0)*sj1*x2791))+((x2783*x2788))+((x2783*x2784))+(((-1.0)*cj1*x2785*x2787))+((cj0*x2789*x2790)))),IkReal((((cj0*sj1*x2787))+((x2784*x2789))+(((-1.0)*x2783*x2785*x2790))+(((-1.0)*x2783*x2785*x2786))+((x2788*x2789))+(((-1.0)*cj1*x2791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2792.valid){
continue;
}
CheckValue<IkReal> x2793=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2793.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2792.value)+(((1.5707963267949)*(x2793.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2794=IKsin(j2);
IkReal x2795=IKcos(j2);
IkReal x2796=(cj3*sj4);
IkReal x2797=(cj0*sj1);
IkReal x2798=((0.15)*sj5);
IkReal x2799=((0.15)*cj5);
IkReal x2800=(cj5*r01);
IkReal x2801=(cj3*cj4);
IkReal x2802=(cj5*sj4);
IkReal x2803=((1.0)*cj0);
IkReal x2804=(r20*sj5);
IkReal x2805=(sj0*sj1);
IkReal x2806=(r10*sj5);
IkReal x2807=((1.0)*cj4);
IkReal x2808=(cj5*sj3);
IkReal x2809=(r00*sj5);
IkReal x2810=(cj1*x2795);
IkReal x2811=((0.54)*x2794);
IkReal x2812=((1.0)*x2794);
IkReal x2813=((1.0)*sj3*sj5);
IkReal x2814=(sj1*x2795);
IkReal x2815=(sj0*x2812);
evalcond[0]=(((sj4*x2804))+(((-1.0)*cj1*x2812))+(((-1.0)*r22*x2807))+((r21*x2802))+x2814);
evalcond[1]=((((0.71)*cj1))+((r21*x2798))+(((-1.0)*r20*x2799))+((cj1*x2811))+(((-1.0)*pz))+(((-0.54)*x2814)));
evalcond[2]=(((sj4*x2809))+((sj4*x2800))+(((-1.0)*x2797*x2812))+(((-1.0)*r02*x2807))+(((-1.0)*x2803*x2810)));
evalcond[3]=(((sj4*x2806))+(((-1.0)*r12*x2807))+(((-1.0)*x2805*x2812))+(((-1.0)*sj0*x2810))+((r11*x2802)));
evalcond[4]=((((0.54)*cj0*x2810))+((x2797*x2811))+(((0.71)*x2797))+(((-1.0)*px))+((r01*x2798))+(((-1.0)*r00*x2799)));
evalcond[5]=((((0.54)*sj0*x2810))+(((0.71)*x2805))+(((-1.0)*py))+((r11*x2798))+(((-1.0)*r10*x2799))+((x2805*x2811)));
evalcond[6]=(((r20*x2808))+((cj5*r21*x2801))+((sj1*x2794))+((r22*x2796))+((x2801*x2804))+(((-1.0)*r21*x2813))+x2810);
evalcond[7]=(((x2795*x2797))+((r02*x2796))+((x2801*x2809))+(((-1.0)*r01*x2813))+((x2800*x2801))+((r00*x2808))+(((-1.0)*cj1*x2794*x2803)));
evalcond[8]=((((-1.0)*r11*x2813))+((r10*x2808))+((cj5*r11*x2801))+(((-1.0)*cj1*x2815))+((r12*x2796))+((x2801*x2806))+((x2795*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - crx-10 (ada33570efc63e1164c5d78ede210098)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
